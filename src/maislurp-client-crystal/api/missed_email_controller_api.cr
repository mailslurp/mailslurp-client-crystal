# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
#
#The version of the OpenAPI document: 6.5.2
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.0
#

require "uri"

module 
  class MissedEmailControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all MissedEmails in paginated format
    # @return [PageMissedEmailProjection]
    def get_all_missed_emails(page : Int32?, size : Int32?, sort : String?)
      data, _status_code, _headers = get_all_missed_emails_with_http_info(page, size, sort)
      data
    end

    # Get all MissedEmails in paginated format
    # @return [Array<(PageMissedEmailProjection, Integer, Hash)>] PageMissedEmailProjection data, response status code and response headers
    def get_all_missed_emails_with_http_info(page : Int32?, size : Int32?, sort : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: MissedEmailControllerApi.get_all_missed_emails ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/missed-emails"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageMissedEmailProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"MissedEmailControllerApi.get_all_missed_emails",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: MissedEmailControllerApi#get_all_missed_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageMissedEmailProjection.from_json(data), status_code, headers
    end

    # Get MissedEmail
    # @param missed_email_id [String] MissedEmailId
    # @return [MissedEmail]
    def get_missed_email(missed_email_id : String)
      data, _status_code, _headers = get_missed_email_with_http_info(missed_email_id)
      data
    end

    # Get MissedEmail
    # @param missed_email_id [String] MissedEmailId
    # @return [Array<(MissedEmail, Integer, Hash)>] MissedEmail data, response status code and response headers
    def get_missed_email_with_http_info(missed_email_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: MissedEmailControllerApi.get_missed_email ..."}
      end
      # verify the required parameter "missed_email_id" is set
      if @api_client.config.client_side_validation && missed_email_id.nil?
        raise ArgumentError.new("Missing the required parameter 'missed_email_id' when calling MissedEmailControllerApi.get_missed_email")
      end
      # resource path
      local_var_path = "/missed-emails/{MissedEmailId}".sub("{" + "MissedEmailId" + "}", URI.encode(missed_email_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "MissedEmail"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"MissedEmailControllerApi.get_missed_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: MissedEmailControllerApi#get_missed_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MissedEmail.from_json(data), status_code, headers
    end
  end
end
