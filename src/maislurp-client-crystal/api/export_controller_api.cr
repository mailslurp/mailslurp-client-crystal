# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class ExportControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Export inboxes link callable via browser
    # @param api_key [String] apiKey
    # @param export_type [String] exportType
    # @param output_format [String] outputFormat
    # @return [String]
    def export_entities(api_key : String, export_type : String, output_format : String, created_earliest_time : Time?, created_oldest_time : Time?, exclude_previously_exported : Bool?, filter : String?, list_separator_token : String?)
      data, _status_code, _headers = export_entities_with_http_info(api_key, export_type, output_format, created_earliest_time, created_oldest_time, exclude_previously_exported, filter, list_separator_token)
      data
    end

    # Export inboxes link callable via browser
    # @param api_key [String] apiKey
    # @param export_type [String] exportType
    # @param output_format [String] outputFormat
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def export_entities_with_http_info(api_key : String, export_type : String, output_format : String, created_earliest_time : Time?, created_oldest_time : Time?, exclude_previously_exported : Bool?, filter : String?, list_separator_token : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ExportControllerApi.export_entities ..."}
      end
      # verify the required parameter "api_key" is set
      if @api_client.config.client_side_validation && api_key.nil?
        raise ArgumentError.new("Missing the required parameter 'api_key' when calling ExportControllerApi.export_entities")
      end
      # verify the required parameter "export_type" is set
      if @api_client.config.client_side_validation && export_type.nil?
        raise ArgumentError.new("Missing the required parameter 'export_type' when calling ExportControllerApi.export_entities")
      end
      # verify enum value
      allowable_values = ["INBOXES", "CONTACTS", "ATTACHMENTS", "EMAILS"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(export_type)
        raise ArgumentError.new("invalid value for \"export_type\", must be one of #{allowable_values}")
      end
      # verify the required parameter "output_format" is set
      if @api_client.config.client_side_validation && output_format.nil?
        raise ArgumentError.new("Missing the required parameter 'output_format' when calling ExportControllerApi.export_entities")
      end
      # verify enum value
      allowable_values = ["CSV_DEFAULT", "CSV_EXCEL"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(output_format)
        raise ArgumentError.new("invalid value for \"output_format\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/export"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"apiKey"] = api_key
      query_params[:"createdEarliestTime"] = created_earliest_time
      query_params[:"createdOldestTime"] = created_oldest_time
      query_params[:"excludePreviouslyExported"] = exclude_previously_exported
      query_params[:"exportType"] = export_type
      query_params[:"filter"] = filter
      query_params[:"listSeparatorToken"] = list_separator_token
      query_params[:"outputFormat"] = output_format

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ExportControllerApi.export_entities",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ExportControllerApi#export_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Get export link
    # @param export_type [String] exportType
    # @param export_options [ExportOptions] exportOptions
    # @return [ExportLink]
    def get_export_link(export_type : String, export_options : ExportOptions, api_key : String?)
      data, _status_code, _headers = get_export_link_with_http_info(export_type, export_options, api_key)
      data
    end

    # Get export link
    # @param export_type [String] exportType
    # @param export_options [ExportOptions] exportOptions
    # @return [Array<(ExportLink, Integer, Hash)>] ExportLink data, response status code and response headers
    def get_export_link_with_http_info(export_type : String, export_options : ExportOptions, api_key : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ExportControllerApi.get_export_link ..."}
      end
      # verify the required parameter "export_type" is set
      if @api_client.config.client_side_validation && export_type.nil?
        raise ArgumentError.new("Missing the required parameter 'export_type' when calling ExportControllerApi.get_export_link")
      end
      # verify enum value
      allowable_values = ["INBOXES", "CONTACTS", "ATTACHMENTS", "EMAILS"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(export_type)
        raise ArgumentError.new("invalid value for \"export_type\", must be one of #{allowable_values}")
      end
      # verify the required parameter "export_options" is set
      if @api_client.config.client_side_validation && export_options.nil?
        raise ArgumentError.new("Missing the required parameter 'export_options' when calling ExportControllerApi.get_export_link")
      end
      # resource path
      local_var_path = "/export"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"apiKey"] = api_key
      query_params[:"exportType"] = export_type

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = export_options.to_json

      # return_type
      return_type = "ExportLink"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ExportControllerApi.get_export_link",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ExportControllerApi#get_export_link\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ExportLink.from_json(data), status_code, headers
    end
  end
end
