# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class ConnectorControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an inbox connector
    # Sync emails between external mailboxes and MailSlurp inboxes
    # @param create_connector_options [CreateConnectorOptions] 
    # @return [ConnectorDto]
    def create_connector(create_connector_options : CreateConnectorOptions)
      data, _status_code, _headers = create_connector_with_http_info(create_connector_options)
      data
    end

    # Create an inbox connector
    # Sync emails between external mailboxes and MailSlurp inboxes
    # @param create_connector_options [CreateConnectorOptions] 
    # @return [Array<(ConnectorDto, Integer, Hash)>] ConnectorDto data, response status code and response headers
    def create_connector_with_http_info(create_connector_options : CreateConnectorOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.create_connector ..."}
      end
      # verify the required parameter "create_connector_options" is set
      if @api_client.config.client_side_validation && create_connector_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_connector_options' when calling ConnectorControllerApi.create_connector")
      end
      # resource path
      local_var_path = "/connectors"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_options.to_json

      # return_type
      return_type = "ConnectorDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.create_connector",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#create_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorDto.from_json(data), status_code, headers
    end

    # Delete an inbox connector
    # @param id [String] 
    # @return [nil]
    def delete_connector(id : String)
      delete_connector_with_http_info(id)
      nil
    end

    # Delete an inbox connector
    # @param id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_connector_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.delete_connector ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.delete_connector")
      end
      # resource path
      local_var_path = "/connectors/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.delete_connector",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#delete_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get all inbox connector sync events
    # @return [PageConnectorSyncEvents]
    def get_all_connector_sync_events(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_all_connector_sync_events_with_http_info(page, size, sort, since, before)
      data
    end

    # Get all inbox connector sync events
    # @return [Array<(PageConnectorSyncEvents, Integer, Hash)>] PageConnectorSyncEvents data, response status code and response headers
    def get_all_connector_sync_events_with_http_info(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_all_connector_sync_events ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/connectors/events"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageConnectorSyncEvents"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_all_connector_sync_events",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_all_connector_sync_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageConnectorSyncEvents.from_json(data), status_code, headers
    end

    # Get an inbox connector
    # @param id [String] 
    # @return [ConnectorDto]
    def get_connector(id : String)
      data, _status_code, _headers = get_connector_with_http_info(id)
      data
    end

    # Get an inbox connector
    # @param id [String] 
    # @return [Array<(ConnectorDto, Integer, Hash)>] ConnectorDto data, response status code and response headers
    def get_connector_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.get_connector")
      end
      # resource path
      local_var_path = "/connectors/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ConnectorDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorDto.from_json(data), status_code, headers
    end

    # Get an inbox connector sync event
    # @param id [String] 
    # @return [ConnectorSyncEventDto]
    def get_connector_sync_event(id : String)
      data, _status_code, _headers = get_connector_sync_event_with_http_info(id)
      data
    end

    # Get an inbox connector sync event
    # @param id [String] 
    # @return [Array<(ConnectorSyncEventDto, Integer, Hash)>] ConnectorSyncEventDto data, response status code and response headers
    def get_connector_sync_event_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector_sync_event ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.get_connector_sync_event")
      end
      # resource path
      local_var_path = "/connectors/events/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ConnectorSyncEventDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector_sync_event",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector_sync_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorSyncEventDto.from_json(data), status_code, headers
    end

    # Get an inbox connector sync events
    # @param id [String] 
    # @return [PageConnectorSyncEvents]
    def get_connector_sync_events(id : String, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_connector_sync_events_with_http_info(id, page, size, sort, since, before)
      data
    end

    # Get an inbox connector sync events
    # @param id [String] 
    # @return [Array<(PageConnectorSyncEvents, Integer, Hash)>] PageConnectorSyncEvents data, response status code and response headers
    def get_connector_sync_events_with_http_info(id : String, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector_sync_events ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.get_connector_sync_events")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/connectors/{id}/events".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageConnectorSyncEvents"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector_sync_events",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector_sync_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageConnectorSyncEvents.from_json(data), status_code, headers
    end

    # Get inbox connectors
    # List inbox connectors that sync external emails to MailSlurp inboxes
    # @return [PageConnector]
    def get_connectors(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_connectors_with_http_info(page, size, sort, since, before)
      data
    end

    # Get inbox connectors
    # List inbox connectors that sync external emails to MailSlurp inboxes
    # @return [Array<(PageConnector, Integer, Hash)>] PageConnector data, response status code and response headers
    def get_connectors_with_http_info(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connectors ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/connectors"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageConnector"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connectors",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connectors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageConnector.from_json(data), status_code, headers
    end

    # Sync an inbox connector
    # @param id [String] 
    # @return [ConnectorSyncRequestResult]
    def sync_connector(id : String)
      data, _status_code, _headers = sync_connector_with_http_info(id)
      data
    end

    # Sync an inbox connector
    # @param id [String] 
    # @return [Array<(ConnectorSyncRequestResult, Integer, Hash)>] ConnectorSyncRequestResult data, response status code and response headers
    def sync_connector_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.sync_connector ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.sync_connector")
      end
      # resource path
      local_var_path = "/connectors/{id}/sync".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ConnectorSyncRequestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.sync_connector",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#sync_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorSyncRequestResult.from_json(data), status_code, headers
    end

    # Update an inbox connector
    # @param id [String] 
    # @param create_connector_options [CreateConnectorOptions] 
    # @return [ConnectorDto]
    def update_connector(id : String, create_connector_options : CreateConnectorOptions)
      data, _status_code, _headers = update_connector_with_http_info(id, create_connector_options)
      data
    end

    # Update an inbox connector
    # @param id [String] 
    # @param create_connector_options [CreateConnectorOptions] 
    # @return [Array<(ConnectorDto, Integer, Hash)>] ConnectorDto data, response status code and response headers
    def update_connector_with_http_info(id : String, create_connector_options : CreateConnectorOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.update_connector ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.update_connector")
      end
      # verify the required parameter "create_connector_options" is set
      if @api_client.config.client_side_validation && create_connector_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_connector_options' when calling ConnectorControllerApi.update_connector")
      end
      # resource path
      local_var_path = "/connectors/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_options.to_json

      # return_type
      return_type = "ConnectorDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.update_connector",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#update_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorDto.from_json(data), status_code, headers
    end
  end
end
