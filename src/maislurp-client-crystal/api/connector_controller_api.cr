# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class ConnectorControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an inbox connector
    # Sync emails between external mailboxes and MailSlurp inboxes
    # @param create_connector_options [CreateConnectorOptions] 
    # @return [ConnectorDto]
    def create_connector(create_connector_options : CreateConnectorOptions, inbox_id : String?)
      data, _status_code, _headers = create_connector_with_http_info(create_connector_options, inbox_id)
      data
    end

    # Create an inbox connector
    # Sync emails between external mailboxes and MailSlurp inboxes
    # @param create_connector_options [CreateConnectorOptions] 
    # @return [Array<(ConnectorDto, Integer, Hash)>] ConnectorDto data, response status code and response headers
    def create_connector_with_http_info(create_connector_options : CreateConnectorOptions, inbox_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.create_connector ..."}
      end
      # verify the required parameter "create_connector_options" is set
      if @api_client.config.client_side_validation && create_connector_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_connector_options' when calling ConnectorControllerApi.create_connector")
      end
      # resource path
      local_var_path = "/connectors"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_options.to_json

      # return_type
      return_type = "ConnectorDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.create_connector",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#create_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorDto.from_json(data), status_code, headers
    end

    # Create an inbox connector IMAP connection
    # Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
    # @param id [String] 
    # @param create_connector_imap_connection_options [CreateConnectorImapConnectionOptions] 
    # @return [ConnectorImapConnectionDto]
    def create_connector_imap_connection(id : String, create_connector_imap_connection_options : CreateConnectorImapConnectionOptions)
      data, _status_code, _headers = create_connector_imap_connection_with_http_info(id, create_connector_imap_connection_options)
      data
    end

    # Create an inbox connector IMAP connection
    # Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
    # @param id [String] 
    # @param create_connector_imap_connection_options [CreateConnectorImapConnectionOptions] 
    # @return [Array<(ConnectorImapConnectionDto, Integer, Hash)>] ConnectorImapConnectionDto data, response status code and response headers
    def create_connector_imap_connection_with_http_info(id : String, create_connector_imap_connection_options : CreateConnectorImapConnectionOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.create_connector_imap_connection ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.create_connector_imap_connection")
      end
      # verify the required parameter "create_connector_imap_connection_options" is set
      if @api_client.config.client_side_validation && create_connector_imap_connection_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_connector_imap_connection_options' when calling ConnectorControllerApi.create_connector_imap_connection")
      end
      # resource path
      local_var_path = "/connectors/{id}/imap".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_imap_connection_options.to_json

      # return_type
      return_type = "ConnectorImapConnectionDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.create_connector_imap_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#create_connector_imap_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorImapConnectionDto.from_json(data), status_code, headers
    end

    # Create an inbox connector SMTP connection
    # Allows sending via connector and email is routed to connected inbox and sent via SMTP
    # @param id [String] 
    # @param create_connector_smtp_connection_options [CreateConnectorSmtpConnectionOptions] 
    # @return [ConnectorSmtpConnectionDto]
    def create_connector_smtp_connection(id : String, create_connector_smtp_connection_options : CreateConnectorSmtpConnectionOptions)
      data, _status_code, _headers = create_connector_smtp_connection_with_http_info(id, create_connector_smtp_connection_options)
      data
    end

    # Create an inbox connector SMTP connection
    # Allows sending via connector and email is routed to connected inbox and sent via SMTP
    # @param id [String] 
    # @param create_connector_smtp_connection_options [CreateConnectorSmtpConnectionOptions] 
    # @return [Array<(ConnectorSmtpConnectionDto, Integer, Hash)>] ConnectorSmtpConnectionDto data, response status code and response headers
    def create_connector_smtp_connection_with_http_info(id : String, create_connector_smtp_connection_options : CreateConnectorSmtpConnectionOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.create_connector_smtp_connection ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.create_connector_smtp_connection")
      end
      # verify the required parameter "create_connector_smtp_connection_options" is set
      if @api_client.config.client_side_validation && create_connector_smtp_connection_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_connector_smtp_connection_options' when calling ConnectorControllerApi.create_connector_smtp_connection")
      end
      # resource path
      local_var_path = "/connectors/{id}/smtp".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_smtp_connection_options.to_json

      # return_type
      return_type = "ConnectorSmtpConnectionDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.create_connector_smtp_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#create_connector_smtp_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorSmtpConnectionDto.from_json(data), status_code, headers
    end

    # Create an inbox connector sync settings
    # Configure automatic pull or emails from external inboxes using an interval or schedule
    # @param id [String] 
    # @param create_connector_sync_settings_options [CreateConnectorSyncSettingsOptions] 
    # @return [ConnectorSyncSettingsDto]
    def create_connector_sync_settings(id : String, create_connector_sync_settings_options : CreateConnectorSyncSettingsOptions)
      data, _status_code, _headers = create_connector_sync_settings_with_http_info(id, create_connector_sync_settings_options)
      data
    end

    # Create an inbox connector sync settings
    # Configure automatic pull or emails from external inboxes using an interval or schedule
    # @param id [String] 
    # @param create_connector_sync_settings_options [CreateConnectorSyncSettingsOptions] 
    # @return [Array<(ConnectorSyncSettingsDto, Integer, Hash)>] ConnectorSyncSettingsDto data, response status code and response headers
    def create_connector_sync_settings_with_http_info(id : String, create_connector_sync_settings_options : CreateConnectorSyncSettingsOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.create_connector_sync_settings ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.create_connector_sync_settings")
      end
      # verify the required parameter "create_connector_sync_settings_options" is set
      if @api_client.config.client_side_validation && create_connector_sync_settings_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_connector_sync_settings_options' when calling ConnectorControllerApi.create_connector_sync_settings")
      end
      # resource path
      local_var_path = "/connectors/{id}/sync-settings".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_sync_settings_options.to_json

      # return_type
      return_type = "ConnectorSyncSettingsDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.create_connector_sync_settings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#create_connector_sync_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorSyncSettingsDto.from_json(data), status_code, headers
    end

    # Create an inbox connector with options
    # Sync emails between external mailboxes and MailSlurp inboxes
    # @param create_connector_with_options [CreateConnectorWithOptions] 
    # @return [ConnectorDto]
    def create_connector_with_options(create_connector_with_options : CreateConnectorWithOptions, inbox_id : String?)
      data, _status_code, _headers = create_connector_with_options_with_http_info(create_connector_with_options, inbox_id)
      data
    end

    # Create an inbox connector with options
    # Sync emails between external mailboxes and MailSlurp inboxes
    # @param create_connector_with_options [CreateConnectorWithOptions] 
    # @return [Array<(ConnectorDto, Integer, Hash)>] ConnectorDto data, response status code and response headers
    def create_connector_with_options_with_http_info(create_connector_with_options : CreateConnectorWithOptions, inbox_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.create_connector_with_options ..."}
      end
      # verify the required parameter "create_connector_with_options" is set
      if @api_client.config.client_side_validation && create_connector_with_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_connector_with_options' when calling ConnectorControllerApi.create_connector_with_options")
      end
      # resource path
      local_var_path = "/connectors/withOptions"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_with_options.to_json

      # return_type
      return_type = "ConnectorDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.create_connector_with_options",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#create_connector_with_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorDto.from_json(data), status_code, headers
    end

    # Delete all inbox connectors
    # @return [nil]
    def delete_all_connector()
      delete_all_connector_with_http_info()
      nil
    end

    # Delete all inbox connectors
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_all_connector_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.delete_all_connector ..."}
      end
      # resource path
      local_var_path = "/connectors"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.delete_all_connector",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#delete_all_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete an inbox connector
    # @param id [String] 
    # @return [nil]
    def delete_connector(id : String)
      delete_connector_with_http_info(id)
      nil
    end

    # Delete an inbox connector
    # @param id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_connector_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.delete_connector ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.delete_connector")
      end
      # resource path
      local_var_path = "/connectors/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.delete_connector",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#delete_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete an inbox connector IMAP connection
    # Delete IMAP connection for external inbox
    # @param id [String] 
    # @return [nil]
    def delete_connector_imap_connection(id : String)
      delete_connector_imap_connection_with_http_info(id)
      nil
    end

    # Delete an inbox connector IMAP connection
    # Delete IMAP connection for external inbox
    # @param id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_connector_imap_connection_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.delete_connector_imap_connection ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.delete_connector_imap_connection")
      end
      # resource path
      local_var_path = "/connectors/{id}/imap".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.delete_connector_imap_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#delete_connector_imap_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete an inbox connector SMTP connection
    # Delete SMTP connection for external inbox
    # @param id [String] 
    # @return [nil]
    def delete_connector_smtp_connection(id : String)
      delete_connector_smtp_connection_with_http_info(id)
      nil
    end

    # Delete an inbox connector SMTP connection
    # Delete SMTP connection for external inbox
    # @param id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_connector_smtp_connection_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.delete_connector_smtp_connection ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.delete_connector_smtp_connection")
      end
      # resource path
      local_var_path = "/connectors/{id}/smtp".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.delete_connector_smtp_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#delete_connector_smtp_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create an inbox connector sync settings
    # Configure automatic pull or emails from external inboxes using an interval or schedule
    # @param id [String] 
    # @return [nil]
    def delete_connector_sync_settings(id : String)
      delete_connector_sync_settings_with_http_info(id)
      nil
    end

    # Create an inbox connector sync settings
    # Configure automatic pull or emails from external inboxes using an interval or schedule
    # @param id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_connector_sync_settings_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.delete_connector_sync_settings ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.delete_connector_sync_settings")
      end
      # resource path
      local_var_path = "/connectors/{id}/sync-settings".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.delete_connector_sync_settings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#delete_connector_sync_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get all inbox connector events
    # @return [PageConnectorEvents]
    def get_all_connector_events(id : String?, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, event_type : String?)
      data, _status_code, _headers = get_all_connector_events_with_http_info(id, page, size, sort, since, before, event_type)
      data
    end

    # Get all inbox connector events
    # @return [Array<(PageConnectorEvents, Integer, Hash)>] PageConnectorEvents data, response status code and response headers
    def get_all_connector_events_with_http_info(id : String?, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, event_type : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_all_connector_events ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      allowable_values = ["SEND", "SYNC"]
      if @api_client.config.client_side_validation && event_type && !allowable_values.includes?(event_type)
        raise ArgumentError.new("invalid value for \"event_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/connectors/events"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"id"] = id
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before
      query_params[:"eventType"] = event_type

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageConnectorEvents"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_all_connector_events",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_all_connector_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageConnectorEvents.from_json(data), status_code, headers
    end

    # Get an inbox connector
    # @param id [String] 
    # @return [ConnectorDto]
    def get_connector(id : String)
      data, _status_code, _headers = get_connector_with_http_info(id)
      data
    end

    # Get an inbox connector
    # @param id [String] 
    # @return [Array<(ConnectorDto, Integer, Hash)>] ConnectorDto data, response status code and response headers
    def get_connector_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.get_connector")
      end
      # resource path
      local_var_path = "/connectors/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ConnectorDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorDto.from_json(data), status_code, headers
    end

    # Get connector by email address
    # Find an inbox connector by email address
    # @param email_address [String] Email address to search for connector by
    # @return [OptionalConnectorDto]
    def get_connector_by_email_address(email_address : String)
      data, _status_code, _headers = get_connector_by_email_address_with_http_info(email_address)
      data
    end

    # Get connector by email address
    # Find an inbox connector by email address
    # @param email_address [String] Email address to search for connector by
    # @return [Array<(OptionalConnectorDto, Integer, Hash)>] OptionalConnectorDto data, response status code and response headers
    def get_connector_by_email_address_with_http_info(email_address : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector_by_email_address ..."}
      end
      # verify the required parameter "email_address" is set
      if @api_client.config.client_side_validation && email_address.nil?
        raise ArgumentError.new("Missing the required parameter 'email_address' when calling ConnectorControllerApi.get_connector_by_email_address")
      end
      # resource path
      local_var_path = "/connectors/by-email-address"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"emailAddress"] = email_address

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OptionalConnectorDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector_by_email_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector_by_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OptionalConnectorDto.from_json(data), status_code, headers
    end

    # Get connector by inbox ID
    # Find an inbox connector by inbox ID
    # @param inbox_id [String] Inbox ID to search for connector by
    # @return [OptionalConnectorDto]
    def get_connector_by_inbox_id(inbox_id : String)
      data, _status_code, _headers = get_connector_by_inbox_id_with_http_info(inbox_id)
      data
    end

    # Get connector by inbox ID
    # Find an inbox connector by inbox ID
    # @param inbox_id [String] Inbox ID to search for connector by
    # @return [Array<(OptionalConnectorDto, Integer, Hash)>] OptionalConnectorDto data, response status code and response headers
    def get_connector_by_inbox_id_with_http_info(inbox_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector_by_inbox_id ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling ConnectorControllerApi.get_connector_by_inbox_id")
      end
      # resource path
      local_var_path = "/connectors/by-inbox-id"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OptionalConnectorDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector_by_inbox_id",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector_by_inbox_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OptionalConnectorDto.from_json(data), status_code, headers
    end

    # Get connector by name
    # Find an inbox connector by name
    # @param name [String] Name to search for connector by
    # @return [OptionalConnectorDto]
    def get_connector_by_name(name : String)
      data, _status_code, _headers = get_connector_by_name_with_http_info(name)
      data
    end

    # Get connector by name
    # Find an inbox connector by name
    # @param name [String] Name to search for connector by
    # @return [Array<(OptionalConnectorDto, Integer, Hash)>] OptionalConnectorDto data, response status code and response headers
    def get_connector_by_name_with_http_info(name : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector_by_name ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling ConnectorControllerApi.get_connector_by_name")
      end
      # resource path
      local_var_path = "/connectors/by-name"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"name"] = name

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OptionalConnectorDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector_by_name",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OptionalConnectorDto.from_json(data), status_code, headers
    end

    # Get an inbox connector event
    # @param id [String] 
    # @return [ConnectorEventDto]
    def get_connector_event(id : String)
      data, _status_code, _headers = get_connector_event_with_http_info(id)
      data
    end

    # Get an inbox connector event
    # @param id [String] 
    # @return [Array<(ConnectorEventDto, Integer, Hash)>] ConnectorEventDto data, response status code and response headers
    def get_connector_event_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector_event ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.get_connector_event")
      end
      # resource path
      local_var_path = "/connectors/events/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ConnectorEventDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector_event",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorEventDto.from_json(data), status_code, headers
    end

    # Get an inbox connector events
    # @param id [String] 
    # @return [PageConnectorEvents]
    def get_connector_events(id : String, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, event_type : String?)
      data, _status_code, _headers = get_connector_events_with_http_info(id, page, size, sort, since, before, event_type)
      data
    end

    # Get an inbox connector events
    # @param id [String] 
    # @return [Array<(PageConnectorEvents, Integer, Hash)>] PageConnectorEvents data, response status code and response headers
    def get_connector_events_with_http_info(id : String, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, event_type : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector_events ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.get_connector_events")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      allowable_values = ["SEND", "SYNC"]
      if @api_client.config.client_side_validation && event_type && !allowable_values.includes?(event_type)
        raise ArgumentError.new("invalid value for \"event_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/connectors/{id}/events".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before
      query_params[:"eventType"] = event_type

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageConnectorEvents"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector_events",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageConnectorEvents.from_json(data), status_code, headers
    end

    # Get an inbox connector IMAP connection
    # Get IMAP connection for external inbox
    # @param id [String] 
    # @return [OptionalConnectorImapConnectionDto]
    def get_connector_imap_connection(id : String)
      data, _status_code, _headers = get_connector_imap_connection_with_http_info(id)
      data
    end

    # Get an inbox connector IMAP connection
    # Get IMAP connection for external inbox
    # @param id [String] 
    # @return [Array<(OptionalConnectorImapConnectionDto, Integer, Hash)>] OptionalConnectorImapConnectionDto data, response status code and response headers
    def get_connector_imap_connection_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector_imap_connection ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.get_connector_imap_connection")
      end
      # resource path
      local_var_path = "/connectors/{id}/imap".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OptionalConnectorImapConnectionDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector_imap_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector_imap_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OptionalConnectorImapConnectionDto.from_json(data), status_code, headers
    end

    # Get SMTP and IMAP connection settings for common mail providers
    # Get common mail provider SMTP and IMAP connection settings
    # @return [ConnectorProviderSettingsDto]
    def get_connector_provider_settings()
      data, _status_code, _headers = get_connector_provider_settings_with_http_info()
      data
    end

    # Get SMTP and IMAP connection settings for common mail providers
    # Get common mail provider SMTP and IMAP connection settings
    # @return [Array<(ConnectorProviderSettingsDto, Integer, Hash)>] ConnectorProviderSettingsDto data, response status code and response headers
    def get_connector_provider_settings_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector_provider_settings ..."}
      end
      # resource path
      local_var_path = "/connectors/provider-settings"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ConnectorProviderSettingsDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector_provider_settings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector_provider_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorProviderSettingsDto.from_json(data), status_code, headers
    end

    # Get an inbox connector SMTP connection
    # Get SMTP connection for external inbox
    # @param id [String] 
    # @return [OptionalConnectorSmtpConnectionDto]
    def get_connector_smtp_connection(id : String)
      data, _status_code, _headers = get_connector_smtp_connection_with_http_info(id)
      data
    end

    # Get an inbox connector SMTP connection
    # Get SMTP connection for external inbox
    # @param id [String] 
    # @return [Array<(OptionalConnectorSmtpConnectionDto, Integer, Hash)>] OptionalConnectorSmtpConnectionDto data, response status code and response headers
    def get_connector_smtp_connection_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector_smtp_connection ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.get_connector_smtp_connection")
      end
      # resource path
      local_var_path = "/connectors/{id}/smtp".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OptionalConnectorSmtpConnectionDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector_smtp_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector_smtp_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OptionalConnectorSmtpConnectionDto.from_json(data), status_code, headers
    end

    # Get an inbox connector sync settings
    # Get sync settings for connection with external inbox
    # @param id [String] 
    # @return [OptionalConnectorSyncSettingsDto]
    def get_connector_sync_settings(id : String)
      data, _status_code, _headers = get_connector_sync_settings_with_http_info(id)
      data
    end

    # Get an inbox connector sync settings
    # Get sync settings for connection with external inbox
    # @param id [String] 
    # @return [Array<(OptionalConnectorSyncSettingsDto, Integer, Hash)>] OptionalConnectorSyncSettingsDto data, response status code and response headers
    def get_connector_sync_settings_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connector_sync_settings ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.get_connector_sync_settings")
      end
      # resource path
      local_var_path = "/connectors/{id}/sync-settings".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OptionalConnectorSyncSettingsDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connector_sync_settings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connector_sync_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OptionalConnectorSyncSettingsDto.from_json(data), status_code, headers
    end

    # Get inbox connectors
    # List inbox connectors that sync external emails to MailSlurp inboxes
    # @return [PageConnector]
    def get_connectors(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_connectors_with_http_info(page, size, sort, since, before)
      data
    end

    # Get inbox connectors
    # List inbox connectors that sync external emails to MailSlurp inboxes
    # @return [Array<(PageConnector, Integer, Hash)>] PageConnector data, response status code and response headers
    def get_connectors_with_http_info(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.get_connectors ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/connectors"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageConnector"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.get_connectors",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#get_connectors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageConnector.from_json(data), status_code, headers
    end

    # Send from an inbox connector
    # @param id [String] 
    # @param send_email_options [SendEmailOptions] 
    # @return [SentEmailDto]
    def send_email_from_connector(id : String, send_email_options : SendEmailOptions, use_fallback : Bool?)
      data, _status_code, _headers = send_email_from_connector_with_http_info(id, send_email_options, use_fallback)
      data
    end

    # Send from an inbox connector
    # @param id [String] 
    # @param send_email_options [SendEmailOptions] 
    # @return [Array<(SentEmailDto, Integer, Hash)>] SentEmailDto data, response status code and response headers
    def send_email_from_connector_with_http_info(id : String, send_email_options : SendEmailOptions, use_fallback : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.send_email_from_connector ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.send_email_from_connector")
      end
      # verify the required parameter "send_email_options" is set
      if @api_client.config.client_side_validation && send_email_options.nil?
        raise ArgumentError.new("Missing the required parameter 'send_email_options' when calling ConnectorControllerApi.send_email_from_connector")
      end
      # resource path
      local_var_path = "/connectors/{id}/send".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"useFallback"] = use_fallback

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = send_email_options.to_json

      # return_type
      return_type = "SentEmailDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.send_email_from_connector",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#send_email_from_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SentEmailDto.from_json(data), status_code, headers
    end

    # Sync an inbox connector
    # @param id [String] 
    # @return [ConnectorSyncRequestResult]
    def sync_connector(id : String, since : Time?, folder : String?, logging : Bool?)
      data, _status_code, _headers = sync_connector_with_http_info(id, since, folder, logging)
      data
    end

    # Sync an inbox connector
    # @param id [String] 
    # @return [Array<(ConnectorSyncRequestResult, Integer, Hash)>] ConnectorSyncRequestResult data, response status code and response headers
    def sync_connector_with_http_info(id : String, since : Time?, folder : String?, logging : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.sync_connector ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.sync_connector")
      end
      # resource path
      local_var_path = "/connectors/{id}/sync".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"since"] = since
      query_params[:"folder"] = folder
      query_params[:"logging"] = logging

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ConnectorSyncRequestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.sync_connector",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#sync_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorSyncRequestResult.from_json(data), status_code, headers
    end

    # Test an inbox connector IMAP connection
    # Test the IMAP connection for a connector
    # @param id [String] 
    # @return [ConnectorImapConnectionTestResult]
    def test_connector_imap_connection(id : String, create_connector_imap_connection_options : CreateConnectorImapConnectionOptions?)
      data, _status_code, _headers = test_connector_imap_connection_with_http_info(id, create_connector_imap_connection_options)
      data
    end

    # Test an inbox connector IMAP connection
    # Test the IMAP connection for a connector
    # @param id [String] 
    # @return [Array<(ConnectorImapConnectionTestResult, Integer, Hash)>] ConnectorImapConnectionTestResult data, response status code and response headers
    def test_connector_imap_connection_with_http_info(id : String, create_connector_imap_connection_options : CreateConnectorImapConnectionOptions?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.test_connector_imap_connection ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.test_connector_imap_connection")
      end
      # resource path
      local_var_path = "/connectors/{id}/imap/test".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_imap_connection_options.to_json

      # return_type
      return_type = "ConnectorImapConnectionTestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.test_connector_imap_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#test_connector_imap_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorImapConnectionTestResult.from_json(data), status_code, headers
    end

    # Test an inbox connector IMAP connection options
    # Test the IMAP connection options for a connector
    # @param create_connector_imap_connection_options [CreateConnectorImapConnectionOptions] 
    # @return [ConnectorImapConnectionTestResult]
    def test_connector_imap_connection_options(create_connector_imap_connection_options : CreateConnectorImapConnectionOptions)
      data, _status_code, _headers = test_connector_imap_connection_options_with_http_info(create_connector_imap_connection_options)
      data
    end

    # Test an inbox connector IMAP connection options
    # Test the IMAP connection options for a connector
    # @param create_connector_imap_connection_options [CreateConnectorImapConnectionOptions] 
    # @return [Array<(ConnectorImapConnectionTestResult, Integer, Hash)>] ConnectorImapConnectionTestResult data, response status code and response headers
    def test_connector_imap_connection_options_with_http_info(create_connector_imap_connection_options : CreateConnectorImapConnectionOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.test_connector_imap_connection_options ..."}
      end
      # verify the required parameter "create_connector_imap_connection_options" is set
      if @api_client.config.client_side_validation && create_connector_imap_connection_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_connector_imap_connection_options' when calling ConnectorControllerApi.test_connector_imap_connection_options")
      end
      # resource path
      local_var_path = "/connectors/connections/imap/test"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_imap_connection_options.to_json

      # return_type
      return_type = "ConnectorImapConnectionTestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.test_connector_imap_connection_options",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#test_connector_imap_connection_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorImapConnectionTestResult.from_json(data), status_code, headers
    end

    # Test an inbox connector SMTP connection
    # Test the SMTP connection for a connector
    # @param id [String] 
    # @return [ConnectorSmtpConnectionTestResult]
    def test_connector_smtp_connection(id : String, create_connector_smtp_connection_options : CreateConnectorSmtpConnectionOptions?)
      data, _status_code, _headers = test_connector_smtp_connection_with_http_info(id, create_connector_smtp_connection_options)
      data
    end

    # Test an inbox connector SMTP connection
    # Test the SMTP connection for a connector
    # @param id [String] 
    # @return [Array<(ConnectorSmtpConnectionTestResult, Integer, Hash)>] ConnectorSmtpConnectionTestResult data, response status code and response headers
    def test_connector_smtp_connection_with_http_info(id : String, create_connector_smtp_connection_options : CreateConnectorSmtpConnectionOptions?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.test_connector_smtp_connection ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.test_connector_smtp_connection")
      end
      # resource path
      local_var_path = "/connectors/{id}/smtp/test".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_smtp_connection_options.to_json

      # return_type
      return_type = "ConnectorSmtpConnectionTestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.test_connector_smtp_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#test_connector_smtp_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorSmtpConnectionTestResult.from_json(data), status_code, headers
    end

    # Test an inbox connector SMTP connection options
    # Test the SMTP connection options for a connector
    # @param create_connector_smtp_connection_options [CreateConnectorSmtpConnectionOptions] 
    # @return [ConnectorSmtpConnectionTestResult]
    def test_connector_smtp_connection_options(create_connector_smtp_connection_options : CreateConnectorSmtpConnectionOptions)
      data, _status_code, _headers = test_connector_smtp_connection_options_with_http_info(create_connector_smtp_connection_options)
      data
    end

    # Test an inbox connector SMTP connection options
    # Test the SMTP connection options for a connector
    # @param create_connector_smtp_connection_options [CreateConnectorSmtpConnectionOptions] 
    # @return [Array<(ConnectorSmtpConnectionTestResult, Integer, Hash)>] ConnectorSmtpConnectionTestResult data, response status code and response headers
    def test_connector_smtp_connection_options_with_http_info(create_connector_smtp_connection_options : CreateConnectorSmtpConnectionOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.test_connector_smtp_connection_options ..."}
      end
      # verify the required parameter "create_connector_smtp_connection_options" is set
      if @api_client.config.client_side_validation && create_connector_smtp_connection_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_connector_smtp_connection_options' when calling ConnectorControllerApi.test_connector_smtp_connection_options")
      end
      # resource path
      local_var_path = "/connectors/connections/smtp/test"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_smtp_connection_options.to_json

      # return_type
      return_type = "ConnectorSmtpConnectionTestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.test_connector_smtp_connection_options",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#test_connector_smtp_connection_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorSmtpConnectionTestResult.from_json(data), status_code, headers
    end

    # Update an inbox connector
    # @param id [String] 
    # @param create_connector_options [CreateConnectorOptions] 
    # @return [ConnectorDto]
    def update_connector(id : String, create_connector_options : CreateConnectorOptions)
      data, _status_code, _headers = update_connector_with_http_info(id, create_connector_options)
      data
    end

    # Update an inbox connector
    # @param id [String] 
    # @param create_connector_options [CreateConnectorOptions] 
    # @return [Array<(ConnectorDto, Integer, Hash)>] ConnectorDto data, response status code and response headers
    def update_connector_with_http_info(id : String, create_connector_options : CreateConnectorOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.update_connector ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.update_connector")
      end
      # verify the required parameter "create_connector_options" is set
      if @api_client.config.client_side_validation && create_connector_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_connector_options' when calling ConnectorControllerApi.update_connector")
      end
      # resource path
      local_var_path = "/connectors/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_options.to_json

      # return_type
      return_type = "ConnectorDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.update_connector",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#update_connector\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorDto.from_json(data), status_code, headers
    end

    # Update an inbox connector IMAP connection
    # Update IMAP connection for external inbox
    # @param id [String] 
    # @param create_connector_imap_connection_options [CreateConnectorImapConnectionOptions] 
    # @return [ConnectorImapConnectionDto]
    def update_connector_imap_connection(id : String, create_connector_imap_connection_options : CreateConnectorImapConnectionOptions)
      data, _status_code, _headers = update_connector_imap_connection_with_http_info(id, create_connector_imap_connection_options)
      data
    end

    # Update an inbox connector IMAP connection
    # Update IMAP connection for external inbox
    # @param id [String] 
    # @param create_connector_imap_connection_options [CreateConnectorImapConnectionOptions] 
    # @return [Array<(ConnectorImapConnectionDto, Integer, Hash)>] ConnectorImapConnectionDto data, response status code and response headers
    def update_connector_imap_connection_with_http_info(id : String, create_connector_imap_connection_options : CreateConnectorImapConnectionOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.update_connector_imap_connection ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.update_connector_imap_connection")
      end
      # verify the required parameter "create_connector_imap_connection_options" is set
      if @api_client.config.client_side_validation && create_connector_imap_connection_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_connector_imap_connection_options' when calling ConnectorControllerApi.update_connector_imap_connection")
      end
      # resource path
      local_var_path = "/connectors/{id}/imap".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_imap_connection_options.to_json

      # return_type
      return_type = "ConnectorImapConnectionDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.update_connector_imap_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#update_connector_imap_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorImapConnectionDto.from_json(data), status_code, headers
    end

    # Update an inbox connector SMTP connection
    # Update SMTP connection for external inbox
    # @param id [String] 
    # @param create_connector_smtp_connection_options [CreateConnectorSmtpConnectionOptions] 
    # @return [ConnectorSmtpConnectionDto]
    def update_connector_smtp_connection(id : String, create_connector_smtp_connection_options : CreateConnectorSmtpConnectionOptions)
      data, _status_code, _headers = update_connector_smtp_connection_with_http_info(id, create_connector_smtp_connection_options)
      data
    end

    # Update an inbox connector SMTP connection
    # Update SMTP connection for external inbox
    # @param id [String] 
    # @param create_connector_smtp_connection_options [CreateConnectorSmtpConnectionOptions] 
    # @return [Array<(ConnectorSmtpConnectionDto, Integer, Hash)>] ConnectorSmtpConnectionDto data, response status code and response headers
    def update_connector_smtp_connection_with_http_info(id : String, create_connector_smtp_connection_options : CreateConnectorSmtpConnectionOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConnectorControllerApi.update_connector_smtp_connection ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling ConnectorControllerApi.update_connector_smtp_connection")
      end
      # verify the required parameter "create_connector_smtp_connection_options" is set
      if @api_client.config.client_side_validation && create_connector_smtp_connection_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_connector_smtp_connection_options' when calling ConnectorControllerApi.update_connector_smtp_connection")
      end
      # resource path
      local_var_path = "/connectors/{id}/smtp".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_connector_smtp_connection_options.to_json

      # return_type
      return_type = "ConnectorSmtpConnectionDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"ConnectorControllerApi.update_connector_smtp_connection",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConnectorControllerApi#update_connector_smtp_connection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConnectorSmtpConnectionDto.from_json(data), status_code, headers
    end
  end
end
