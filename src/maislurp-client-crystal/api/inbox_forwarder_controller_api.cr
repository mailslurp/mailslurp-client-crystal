# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
#
#The version of the OpenAPI document: 6.5.2
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class InboxForwarderControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an inbox forwarder
    # Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
    # @param create_inbox_forwarder_options [CreateInboxForwarderOptions] createInboxForwarderOptions
    # @return [InboxForwarderDto]
    def create_new_inbox_forwarder(create_inbox_forwarder_options : CreateInboxForwarderOptions, inbox_id : String?)
      data, _status_code, _headers = create_new_inbox_forwarder_with_http_info(create_inbox_forwarder_options, inbox_id)
      data
    end

    # Create an inbox forwarder
    # Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
    # @param create_inbox_forwarder_options [CreateInboxForwarderOptions] createInboxForwarderOptions
    # @return [Array<(InboxForwarderDto, Integer, Hash)>] InboxForwarderDto data, response status code and response headers
    def create_new_inbox_forwarder_with_http_info(create_inbox_forwarder_options : CreateInboxForwarderOptions, inbox_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxForwarderControllerApi.create_new_inbox_forwarder ..."}
      end
      # verify the required parameter "create_inbox_forwarder_options" is set
      if @api_client.config.client_side_validation && create_inbox_forwarder_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_inbox_forwarder_options' when calling InboxForwarderControllerApi.create_new_inbox_forwarder")
      end
      # resource path
      local_var_path = "/forwarders"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_inbox_forwarder_options.to_json

      # return_type
      return_type = "InboxForwarderDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxForwarderControllerApi.create_new_inbox_forwarder",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxForwarderControllerApi#create_new_inbox_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxForwarderDto.from_json(data), status_code, headers
    end

    # Delete an inbox forwarder
    # Delete inbox forwarder
    # @param id [String] ID of inbox forwarder
    # @return [nil]
    def delete_inbox_forwarder(id : String)
      delete_inbox_forwarder_with_http_info(id)
      nil
    end

    # Delete an inbox forwarder
    # Delete inbox forwarder
    # @param id [String] ID of inbox forwarder
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_inbox_forwarder_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxForwarderControllerApi.delete_inbox_forwarder ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling InboxForwarderControllerApi.delete_inbox_forwarder")
      end
      # resource path
      local_var_path = "/forwarders/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"InboxForwarderControllerApi.delete_inbox_forwarder",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxForwarderControllerApi#delete_inbox_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete inbox forwarders
    # Delete inbox forwarders. Accepts optional inboxId filter.
    # @return [nil]
    def delete_inbox_forwarders(inbox_id : String?)
      delete_inbox_forwarders_with_http_info(inbox_id)
      nil
    end

    # Delete inbox forwarders
    # Delete inbox forwarders. Accepts optional inboxId filter.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_inbox_forwarders_with_http_info(inbox_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxForwarderControllerApi.delete_inbox_forwarders ..."}
      end
      # resource path
      local_var_path = "/forwarders"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"InboxForwarderControllerApi.delete_inbox_forwarders",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxForwarderControllerApi#delete_inbox_forwarders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get an inbox forwarder
    # Get inbox ruleset
    # @param id [String] ID of inbox forwarder
    # @return [InboxForwarderDto]
    def get_inbox_forwarder(id : String)
      data, _status_code, _headers = get_inbox_forwarder_with_http_info(id)
      data
    end

    # Get an inbox forwarder
    # Get inbox ruleset
    # @param id [String] ID of inbox forwarder
    # @return [Array<(InboxForwarderDto, Integer, Hash)>] InboxForwarderDto data, response status code and response headers
    def get_inbox_forwarder_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxForwarderControllerApi.get_inbox_forwarder ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling InboxForwarderControllerApi.get_inbox_forwarder")
      end
      # resource path
      local_var_path = "/forwarders/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "InboxForwarderDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxForwarderControllerApi.get_inbox_forwarder",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxForwarderControllerApi#get_inbox_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxForwarderDto.from_json(data), status_code, headers
    end

    # List inbox forwarders
    # List all forwarders attached to an inbox
    # @return [PageInboxForwarderDto]
    def get_inbox_forwarders(inbox_id : String?, page : Int32?, search_filter : String?, size : Int32?, sort : String?)
      data, _status_code, _headers = get_inbox_forwarders_with_http_info(inbox_id, page, search_filter, size, sort)
      data
    end

    # List inbox forwarders
    # List all forwarders attached to an inbox
    # @return [Array<(PageInboxForwarderDto, Integer, Hash)>] PageInboxForwarderDto data, response status code and response headers
    def get_inbox_forwarders_with_http_info(inbox_id : String?, page : Int32?, search_filter : String?, size : Int32?, sort : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxForwarderControllerApi.get_inbox_forwarders ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/forwarders"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id
      query_params[:"page"] = page
      query_params[:"searchFilter"] = search_filter
      query_params[:"size"] = size
      query_params[:"sort"] = sort

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageInboxForwarderDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxForwarderControllerApi.get_inbox_forwarders",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxForwarderControllerApi#get_inbox_forwarders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageInboxForwarderDto.from_json(data), status_code, headers
    end

    # Test an inbox forwarder
    # Test an inbox forwarder
    # @param id [String] ID of inbox forwarder
    # @param inbox_forwarder_test_options [InboxForwarderTestOptions] inboxForwarderTestOptions
    # @return [InboxForwarderTestResult]
    def test_inbox_forwarder(id : String, inbox_forwarder_test_options : InboxForwarderTestOptions)
      data, _status_code, _headers = test_inbox_forwarder_with_http_info(id, inbox_forwarder_test_options)
      data
    end

    # Test an inbox forwarder
    # Test an inbox forwarder
    # @param id [String] ID of inbox forwarder
    # @param inbox_forwarder_test_options [InboxForwarderTestOptions] inboxForwarderTestOptions
    # @return [Array<(InboxForwarderTestResult, Integer, Hash)>] InboxForwarderTestResult data, response status code and response headers
    def test_inbox_forwarder_with_http_info(id : String, inbox_forwarder_test_options : InboxForwarderTestOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxForwarderControllerApi.test_inbox_forwarder ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling InboxForwarderControllerApi.test_inbox_forwarder")
      end
      # verify the required parameter "inbox_forwarder_test_options" is set
      if @api_client.config.client_side_validation && inbox_forwarder_test_options.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_forwarder_test_options' when calling InboxForwarderControllerApi.test_inbox_forwarder")
      end
      # resource path
      local_var_path = "/forwarders/{id}/test".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = inbox_forwarder_test_options.to_json

      # return_type
      return_type = "InboxForwarderTestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxForwarderControllerApi.test_inbox_forwarder",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxForwarderControllerApi#test_inbox_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxForwarderTestResult.from_json(data), status_code, headers
    end

    # Test inbox forwarders for inbox
    # Test inbox forwarders for inbox
    # @param inbox_id [String] ID of inbox
    # @param inbox_forwarder_test_options [InboxForwarderTestOptions] inboxForwarderTestOptions
    # @return [InboxForwarderTestResult]
    def test_inbox_forwarders_for_inbox(inbox_id : String, inbox_forwarder_test_options : InboxForwarderTestOptions)
      data, _status_code, _headers = test_inbox_forwarders_for_inbox_with_http_info(inbox_id, inbox_forwarder_test_options)
      data
    end

    # Test inbox forwarders for inbox
    # Test inbox forwarders for inbox
    # @param inbox_id [String] ID of inbox
    # @param inbox_forwarder_test_options [InboxForwarderTestOptions] inboxForwarderTestOptions
    # @return [Array<(InboxForwarderTestResult, Integer, Hash)>] InboxForwarderTestResult data, response status code and response headers
    def test_inbox_forwarders_for_inbox_with_http_info(inbox_id : String, inbox_forwarder_test_options : InboxForwarderTestOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxForwarderControllerApi.test_inbox_forwarders_for_inbox ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxForwarderControllerApi.test_inbox_forwarders_for_inbox")
      end
      # verify the required parameter "inbox_forwarder_test_options" is set
      if @api_client.config.client_side_validation && inbox_forwarder_test_options.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_forwarder_test_options' when calling InboxForwarderControllerApi.test_inbox_forwarders_for_inbox")
      end
      # resource path
      local_var_path = "/forwarders"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = inbox_forwarder_test_options.to_json

      # return_type
      return_type = "InboxForwarderTestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"InboxForwarderControllerApi.test_inbox_forwarders_for_inbox",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxForwarderControllerApi#test_inbox_forwarders_for_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxForwarderTestResult.from_json(data), status_code, headers
    end

    # Test new inbox forwarder
    # Test new inbox forwarder
    # @param test_new_inbox_forwarder_options [TestNewInboxForwarderOptions] testNewInboxForwarderOptions
    # @return [InboxForwarderTestResult]
    def test_new_inbox_forwarder(test_new_inbox_forwarder_options : TestNewInboxForwarderOptions)
      data, _status_code, _headers = test_new_inbox_forwarder_with_http_info(test_new_inbox_forwarder_options)
      data
    end

    # Test new inbox forwarder
    # Test new inbox forwarder
    # @param test_new_inbox_forwarder_options [TestNewInboxForwarderOptions] testNewInboxForwarderOptions
    # @return [Array<(InboxForwarderTestResult, Integer, Hash)>] InboxForwarderTestResult data, response status code and response headers
    def test_new_inbox_forwarder_with_http_info(test_new_inbox_forwarder_options : TestNewInboxForwarderOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxForwarderControllerApi.test_new_inbox_forwarder ..."}
      end
      # verify the required parameter "test_new_inbox_forwarder_options" is set
      if @api_client.config.client_side_validation && test_new_inbox_forwarder_options.nil?
        raise ArgumentError.new("Missing the required parameter 'test_new_inbox_forwarder_options' when calling InboxForwarderControllerApi.test_new_inbox_forwarder")
      end
      # resource path
      local_var_path = "/forwarders"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = test_new_inbox_forwarder_options.to_json

      # return_type
      return_type = "InboxForwarderTestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"InboxForwarderControllerApi.test_new_inbox_forwarder",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxForwarderControllerApi#test_new_inbox_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxForwarderTestResult.from_json(data), status_code, headers
    end
  end
end
