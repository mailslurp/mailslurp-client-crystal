# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class PhoneControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an emergency address
    # Add an emergency address to a phone number
    # @param create_emergency_address_options [CreateEmergencyAddressOptions] 
    # @return [EmergencyAddress]
    def create_emergency_address(create_emergency_address_options : CreateEmergencyAddressOptions)
      data, _status_code, _headers = create_emergency_address_with_http_info(create_emergency_address_options)
      data
    end

    # Create an emergency address
    # Add an emergency address to a phone number
    # @param create_emergency_address_options [CreateEmergencyAddressOptions] 
    # @return [Array<(EmergencyAddress, Integer, Hash)>] EmergencyAddress data, response status code and response headers
    def create_emergency_address_with_http_info(create_emergency_address_options : CreateEmergencyAddressOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.create_emergency_address ..."}
      end
      # verify the required parameter "create_emergency_address_options" is set
      if @api_client.config.client_side_validation && create_emergency_address_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_emergency_address_options' when calling PhoneControllerApi.create_emergency_address")
      end
      # resource path
      local_var_path = "/phone/emergency-addresses"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_emergency_address_options.to_json

      # return_type
      return_type = "EmergencyAddress"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"PhoneControllerApi.create_emergency_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#create_emergency_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmergencyAddress.from_json(data), status_code, headers
    end

    # Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
    # Create new phone number
    # @param create_phone_number_options [CreatePhoneNumberOptions] 
    # @return [PhoneNumberDto]
    def create_phone_number(create_phone_number_options : CreatePhoneNumberOptions)
      data, _status_code, _headers = create_phone_number_with_http_info(create_phone_number_options)
      data
    end

    # Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
    # Create new phone number
    # @param create_phone_number_options [CreatePhoneNumberOptions] 
    # @return [Array<(PhoneNumberDto, Integer, Hash)>] PhoneNumberDto data, response status code and response headers
    def create_phone_number_with_http_info(create_phone_number_options : CreatePhoneNumberOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.create_phone_number ..."}
      end
      # verify the required parameter "create_phone_number_options" is set
      if @api_client.config.client_side_validation && create_phone_number_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_phone_number_options' when calling PhoneControllerApi.create_phone_number")
      end
      # resource path
      local_var_path = "/phone"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_phone_number_options.to_json

      # return_type
      return_type = "PhoneNumberDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"PhoneControllerApi.create_phone_number",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#create_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PhoneNumberDto.from_json(data), status_code, headers
    end

    # Delete an emergency address
    # Delete an emergency address
    # @param address_id [String] 
    # @return [EmptyResponseDto]
    def delete_emergency_address(address_id : String)
      data, _status_code, _headers = delete_emergency_address_with_http_info(address_id)
      data
    end

    # Delete an emergency address
    # Delete an emergency address
    # @param address_id [String] 
    # @return [Array<(EmptyResponseDto, Integer, Hash)>] EmptyResponseDto data, response status code and response headers
    def delete_emergency_address_with_http_info(address_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.delete_emergency_address ..."}
      end
      # verify the required parameter "address_id" is set
      if @api_client.config.client_side_validation && address_id.nil?
        raise ArgumentError.new("Missing the required parameter 'address_id' when calling PhoneControllerApi.delete_emergency_address")
      end
      # resource path
      local_var_path = "/phone/emergency-addresses/{addressId}".sub("{" + "addressId" + "}", URI.encode(address_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "EmptyResponseDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"PhoneControllerApi.delete_emergency_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#delete_emergency_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyResponseDto.from_json(data), status_code, headers
    end

    # Delete a phone number
    # Remove phone number from account
    # @param phone_number_id [String] 
    # @return [nil]
    def delete_phone_number(phone_number_id : String)
      delete_phone_number_with_http_info(phone_number_id)
      nil
    end

    # Delete a phone number
    # Remove phone number from account
    # @param phone_number_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_phone_number_with_http_info(phone_number_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.delete_phone_number ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.delete_phone_number")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"PhoneControllerApi.delete_phone_number",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#delete_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get the latest messages for all phones
    # List all message threads for all phones
    # @return [PagePhoneMessageThreadProjection]
    def get_all_phone_message_threads(page : Int32?, size : Int32?)
      data, _status_code, _headers = get_all_phone_message_threads_with_http_info(page, size)
      data
    end

    # Get the latest messages for all phones
    # List all message threads for all phones
    # @return [Array<(PagePhoneMessageThreadProjection, Integer, Hash)>] PagePhoneMessageThreadProjection data, response status code and response headers
    def get_all_phone_message_threads_with_http_info(page : Int32?, size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_all_phone_message_threads ..."}
      end
      # resource path
      local_var_path = "/phone/numbers/message-threads"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PagePhoneMessageThreadProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_all_phone_message_threads",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_all_phone_message_threads\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PagePhoneMessageThreadProjection.from_json(data), status_code, headers
    end

    # Get consent status
    # Get the status of phone usage consent
    # @return [ConsentStatusDto]
    def get_consent_status()
      data, _status_code, _headers = get_consent_status_with_http_info()
      data
    end

    # Get consent status
    # Get the status of phone usage consent
    # @return [Array<(ConsentStatusDto, Integer, Hash)>] ConsentStatusDto data, response status code and response headers
    def get_consent_status_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_consent_status ..."}
      end
      # resource path
      local_var_path = "/phone/consent"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ConsentStatusDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_consent_status",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_consent_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConsentStatusDto.from_json(data), status_code, headers
    end

    # Get an emergency address
    # Fetch an emergency address by ID
    # @param address_id [String] 
    # @return [EmergencyAddress]
    def get_emergency_address(address_id : String)
      data, _status_code, _headers = get_emergency_address_with_http_info(address_id)
      data
    end

    # Get an emergency address
    # Fetch an emergency address by ID
    # @param address_id [String] 
    # @return [Array<(EmergencyAddress, Integer, Hash)>] EmergencyAddress data, response status code and response headers
    def get_emergency_address_with_http_info(address_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_emergency_address ..."}
      end
      # verify the required parameter "address_id" is set
      if @api_client.config.client_side_validation && address_id.nil?
        raise ArgumentError.new("Missing the required parameter 'address_id' when calling PhoneControllerApi.get_emergency_address")
      end
      # resource path
      local_var_path = "/phone/emergency-addresses/{addressId}".sub("{" + "addressId" + "}", URI.encode(address_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "EmergencyAddress"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_emergency_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_emergency_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmergencyAddress.from_json(data), status_code, headers
    end

    # Get emergency addresses
    # List emergency addresses
    # @return [Array(EmergencyAddressDto)]
    def get_emergency_addresses()
      data, _status_code, _headers = get_emergency_addresses_with_http_info()
      data
    end

    # Get emergency addresses
    # List emergency addresses
    # @return [Array<(Array(EmergencyAddressDto), Integer, Hash)>] Array(EmergencyAddressDto) data, response status code and response headers
    def get_emergency_addresses_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_emergency_addresses ..."}
      end
      # resource path
      local_var_path = "/phone/emergency-addresses"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(EmergencyAddressDto)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_emergency_addresses",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_emergency_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(EmergencyAddressDto).from_json(data), status_code, headers
    end

    # Get messages in a phone thread
    # List message thread messages for a phone message thread
    # @param phone_number_id [String] 
    # @param other_number [String] 
    # @return [PagePhoneMessageThreadItemProjection]
    def get_phone_message_thread_items(phone_number_id : String, other_number : String, page : Int32?, size : Int32?)
      data, _status_code, _headers = get_phone_message_thread_items_with_http_info(phone_number_id, other_number, page, size)
      data
    end

    # Get messages in a phone thread
    # List message thread messages for a phone message thread
    # @param phone_number_id [String] 
    # @param other_number [String] 
    # @return [Array<(PagePhoneMessageThreadItemProjection, Integer, Hash)>] PagePhoneMessageThreadItemProjection data, response status code and response headers
    def get_phone_message_thread_items_with_http_info(phone_number_id : String, other_number : String, page : Int32?, size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_phone_message_thread_items ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.get_phone_message_thread_items")
      end
      # verify the required parameter "other_number" is set
      if @api_client.config.client_side_validation && other_number.nil?
        raise ArgumentError.new("Missing the required parameter 'other_number' when calling PhoneControllerApi.get_phone_message_thread_items")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}/message-threads/{otherNumber}".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s)).sub("{" + "otherNumber" + "}", URI.encode(other_number.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PagePhoneMessageThreadItemProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_phone_message_thread_items",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_phone_message_thread_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PagePhoneMessageThreadItemProjection.from_json(data), status_code, headers
    end

    # Get the latest message preview for a thread
    # List message threads for a phone
    # @param phone_number_id [String] 
    # @return [PagePhoneMessageThreadProjection]
    def get_phone_message_threads(phone_number_id : String, page : Int32?, size : Int32?)
      data, _status_code, _headers = get_phone_message_threads_with_http_info(phone_number_id, page, size)
      data
    end

    # Get the latest message preview for a thread
    # List message threads for a phone
    # @param phone_number_id [String] 
    # @return [Array<(PagePhoneMessageThreadProjection, Integer, Hash)>] PagePhoneMessageThreadProjection data, response status code and response headers
    def get_phone_message_threads_with_http_info(phone_number_id : String, page : Int32?, size : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_phone_message_threads ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.get_phone_message_threads")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}/message-threads".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PagePhoneMessageThreadProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_phone_message_threads",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_phone_message_threads\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PagePhoneMessageThreadProjection.from_json(data), status_code, headers
    end

    # Get a phone number by ID
    # Get a phone number by ID
    # @param phone_number_id [String] 
    # @return [PhoneNumberDto]
    def get_phone_number(phone_number_id : String)
      data, _status_code, _headers = get_phone_number_with_http_info(phone_number_id)
      data
    end

    # Get a phone number by ID
    # Get a phone number by ID
    # @param phone_number_id [String] 
    # @return [Array<(PhoneNumberDto, Integer, Hash)>] PhoneNumberDto data, response status code and response headers
    def get_phone_number_with_http_info(phone_number_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_phone_number ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.get_phone_number")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PhoneNumberDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_phone_number",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PhoneNumberDto.from_json(data), status_code, headers
    end

    # Get a phone number by name
    # Get a phone number by name
    # @return [PhoneNumberDto]
    def get_phone_number_by_name()
      data, _status_code, _headers = get_phone_number_by_name_with_http_info()
      data
    end

    # Get a phone number by name
    # Get a phone number by name
    # @return [Array<(PhoneNumberDto, Integer, Hash)>] PhoneNumberDto data, response status code and response headers
    def get_phone_number_by_name_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_phone_number_by_name ..."}
      end
      # resource path
      local_var_path = "/phone/numbers/by-name"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PhoneNumberDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_phone_number_by_name",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_phone_number_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PhoneNumberDto.from_json(data), status_code, headers
    end

    # Get a phone number by phone number
    # Get a phone number by phone number
    # @return [PhoneNumberDto]
    def get_phone_number_by_phone_number()
      data, _status_code, _headers = get_phone_number_by_phone_number_with_http_info()
      data
    end

    # Get a phone number by phone number
    # Get a phone number by phone number
    # @return [Array<(PhoneNumberDto, Integer, Hash)>] PhoneNumberDto data, response status code and response headers
    def get_phone_number_by_phone_number_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_phone_number_by_phone_number ..."}
      end
      # resource path
      local_var_path = "/phone/numbers/by-phone-number"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PhoneNumberDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_phone_number_by_phone_number",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_phone_number_by_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PhoneNumberDto.from_json(data), status_code, headers
    end

    # Get phone numbers
    # List phone numbers for account
    # @return [PagePhoneNumberProjection]
    def get_phone_numbers(phone_country : String?, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, search : String?, _include : Array(String)?, favourite : Bool?)
      data, _status_code, _headers = get_phone_numbers_with_http_info(phone_country, page, size, sort, since, before, search, _include, favourite)
      data
    end

    # Get phone numbers
    # List phone numbers for account
    # @return [Array<(PagePhoneNumberProjection, Integer, Hash)>] PagePhoneNumberProjection data, response status code and response headers
    def get_phone_numbers_with_http_info(phone_country : String?, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, search : String?, _include : Array(String)?, favourite : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_phone_numbers ..."}
      end
      allowable_values = ["US", "GB", "AU", "CA", "EE", "HK", "PL", "CH", "PT", "NL", "IL", "SE"]
      if @api_client.config.client_side_validation && phone_country && !allowable_values.includes?(phone_country)
        raise ArgumentError.new("invalid value for \"phone_country\", must be one of #{allowable_values}")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/phone/numbers"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"phoneCountry"] = phone_country
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before
      query_params[:"search"] = search
      query_params[:"include"] = @api_client.build_collection_param(_include, :multi)
      query_params[:"favourite"] = favourite

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PagePhoneNumberProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_phone_numbers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_phone_numbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PagePhoneNumberProjection.from_json(data), status_code, headers
    end

    # Get phone plans
    # Get phone number plans
    # @return [Array(PhonePlanDto)]
    def get_phone_plans()
      data, _status_code, _headers = get_phone_plans_with_http_info()
      data
    end

    # Get phone plans
    # Get phone number plans
    # @return [Array<(Array(PhonePlanDto), Integer, Hash)>] Array(PhonePlanDto) data, response status code and response headers
    def get_phone_plans_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_phone_plans ..."}
      end
      # resource path
      local_var_path = "/phone/plans"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(PhonePlanDto)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_phone_plans",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_phone_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(PhonePlanDto).from_json(data), status_code, headers
    end

    # Get phone plans availability
    # @return [PhonePlanAvailability]
    def get_phone_plans_availability()
      data, _status_code, _headers = get_phone_plans_availability_with_http_info()
      data
    end

    # Get phone plans availability
    # @return [Array<(PhonePlanAvailability, Integer, Hash)>] PhonePlanAvailability data, response status code and response headers
    def get_phone_plans_availability_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_phone_plans_availability ..."}
      end
      # resource path
      local_var_path = "/phone/plans/availability"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PhonePlanAvailability"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_phone_plans_availability",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_phone_plans_availability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PhonePlanAvailability.from_json(data), status_code, headers
    end

    # List sent TXT messages for a phone number
    # Get sent SMS messages for a phone number
    # @param phone_number_id [String] 
    # @return [PageSentSmsProjection]
    def get_sent_sms_by_phone_number(phone_number_id : String, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, search : String?)
      data, _status_code, _headers = get_sent_sms_by_phone_number_with_http_info(phone_number_id, page, size, sort, since, before, search)
      data
    end

    # List sent TXT messages for a phone number
    # Get sent SMS messages for a phone number
    # @param phone_number_id [String] 
    # @return [Array<(PageSentSmsProjection, Integer, Hash)>] PageSentSmsProjection data, response status code and response headers
    def get_sent_sms_by_phone_number_with_http_info(phone_number_id : String, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, search : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_sent_sms_by_phone_number ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.get_sent_sms_by_phone_number")
      end
      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling PhoneControllerApi.get_sent_sms_by_phone_number, must be smaller than or equal to 100.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}/sms-sent".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before
      query_params[:"search"] = search

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageSentSmsProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_sent_sms_by_phone_number",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_sent_sms_by_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageSentSmsProjection.from_json(data), status_code, headers
    end

    # List SMS messages for a phone number
    # Get SMS messages for a phone number
    # @param phone_number_id [String] 
    # @return [PageSmsProjection]
    def get_sms_by_phone_number(phone_number_id : String, page : Int32?, size : Int32?, sort : String?, unread_only : Bool?, since : Time?, before : Time?, search : String?, favourite : Bool?)
      data, _status_code, _headers = get_sms_by_phone_number_with_http_info(phone_number_id, page, size, sort, unread_only, since, before, search, favourite)
      data
    end

    # List SMS messages for a phone number
    # Get SMS messages for a phone number
    # @param phone_number_id [String] 
    # @return [Array<(PageSmsProjection, Integer, Hash)>] PageSmsProjection data, response status code and response headers
    def get_sms_by_phone_number_with_http_info(phone_number_id : String, page : Int32?, size : Int32?, sort : String?, unread_only : Bool?, since : Time?, before : Time?, search : String?, favourite : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_sms_by_phone_number ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.get_sms_by_phone_number")
      end
      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling PhoneControllerApi.get_sms_by_phone_number, must be smaller than or equal to 100.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}/sms".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"unreadOnly"] = unread_only
      query_params[:"since"] = since
      query_params[:"before"] = before
      query_params[:"search"] = search
      query_params[:"favourite"] = favourite

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageSmsProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_sms_by_phone_number",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_sms_by_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageSmsProjection.from_json(data), status_code, headers
    end

    # Send TXT message from a phone number
    # Send SMS from a phone number
    # @param phone_number_id [String] 
    # @param sms_send_options [SmsSendOptions] 
    # @return [SentSmsDto]
    def send_sms_from_phone_number(phone_number_id : String, sms_send_options : SmsSendOptions)
      data, _status_code, _headers = send_sms_from_phone_number_with_http_info(phone_number_id, sms_send_options)
      data
    end

    # Send TXT message from a phone number
    # Send SMS from a phone number
    # @param phone_number_id [String] 
    # @param sms_send_options [SmsSendOptions] 
    # @return [Array<(SentSmsDto, Integer, Hash)>] SentSmsDto data, response status code and response headers
    def send_sms_from_phone_number_with_http_info(phone_number_id : String, sms_send_options : SmsSendOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.send_sms_from_phone_number ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.send_sms_from_phone_number")
      end
      # verify the required parameter "sms_send_options" is set
      if @api_client.config.client_side_validation && sms_send_options.nil?
        raise ArgumentError.new("Missing the required parameter 'sms_send_options' when calling PhoneControllerApi.send_sms_from_phone_number")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}/sms".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = sms_send_options.to_json

      # return_type
      return_type = "SentSmsDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"PhoneControllerApi.send_sms_from_phone_number",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#send_sms_from_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SentSmsDto.from_json(data), status_code, headers
    end

    # Set consent status
    # Give or revoke consent for phone usage
    # @param agree [Bool] 
    # @return [ConsentStatusDto]
    def set_consent_status(agree : Bool)
      data, _status_code, _headers = set_consent_status_with_http_info(agree)
      data
    end

    # Set consent status
    # Give or revoke consent for phone usage
    # @param agree [Bool] 
    # @return [Array<(ConsentStatusDto, Integer, Hash)>] ConsentStatusDto data, response status code and response headers
    def set_consent_status_with_http_info(agree : Bool)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.set_consent_status ..."}
      end
      # verify the required parameter "agree" is set
      if @api_client.config.client_side_validation && agree.nil?
        raise ArgumentError.new("Missing the required parameter 'agree' when calling PhoneControllerApi.set_consent_status")
      end
      # resource path
      local_var_path = "/phone/consent"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"agree"] = agree

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ConsentStatusDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"PhoneControllerApi.set_consent_status",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#set_consent_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConsentStatusDto.from_json(data), status_code, headers
    end

    # Set phone favourited state
    # Set and return new favorite state for a phone
    # @param phone_number_id [String] ID of phone to set favourite state
    # @param set_phone_favourited_options [SetPhoneFavouritedOptions] 
    # @return [PhoneNumberDto]
    def set_phone_favourited(phone_number_id : String, set_phone_favourited_options : SetPhoneFavouritedOptions)
      data, _status_code, _headers = set_phone_favourited_with_http_info(phone_number_id, set_phone_favourited_options)
      data
    end

    # Set phone favourited state
    # Set and return new favorite state for a phone
    # @param phone_number_id [String] ID of phone to set favourite state
    # @param set_phone_favourited_options [SetPhoneFavouritedOptions] 
    # @return [Array<(PhoneNumberDto, Integer, Hash)>] PhoneNumberDto data, response status code and response headers
    def set_phone_favourited_with_http_info(phone_number_id : String, set_phone_favourited_options : SetPhoneFavouritedOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.set_phone_favourited ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.set_phone_favourited")
      end
      # verify the required parameter "set_phone_favourited_options" is set
      if @api_client.config.client_side_validation && set_phone_favourited_options.nil?
        raise ArgumentError.new("Missing the required parameter 'set_phone_favourited_options' when calling PhoneControllerApi.set_phone_favourited")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}/favourite".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = set_phone_favourited_options.to_json

      # return_type
      return_type = "PhoneNumberDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"PhoneControllerApi.set_phone_favourited",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#set_phone_favourited\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PhoneNumberDto.from_json(data), status_code, headers
    end

    # Test sending an SMS to a number
    # Test a phone number by sending an SMS to it
    # @param phone_number_id [String] 
    # @param test_phone_number_options [TestPhoneNumberOptions] 
    # @return [nil]
    def test_phone_number_send_sms(phone_number_id : String, test_phone_number_options : TestPhoneNumberOptions, x_test_id : String?)
      test_phone_number_send_sms_with_http_info(phone_number_id, test_phone_number_options, x_test_id)
      nil
    end

    # Test sending an SMS to a number
    # Test a phone number by sending an SMS to it
    # @param phone_number_id [String] 
    # @param test_phone_number_options [TestPhoneNumberOptions] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def test_phone_number_send_sms_with_http_info(phone_number_id : String, test_phone_number_options : TestPhoneNumberOptions, x_test_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.test_phone_number_send_sms ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.test_phone_number_send_sms")
      end
      # verify the required parameter "test_phone_number_options" is set
      if @api_client.config.client_side_validation && test_phone_number_options.nil?
        raise ArgumentError.new("Missing the required parameter 'test_phone_number_options' when calling PhoneControllerApi.test_phone_number_send_sms")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}/test".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])
      header_params["x-test-id"] = x_test_id

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = test_phone_number_options.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"PhoneControllerApi.test_phone_number_send_sms",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#test_phone_number_send_sms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update a phone number
    # Set field for phone number
    # @param phone_number_id [String] ID of phone to set favourite state
    # @param update_phone_number_options [UpdatePhoneNumberOptions] 
    # @return [PhoneNumberDto]
    def update_phone_number(phone_number_id : String, update_phone_number_options : UpdatePhoneNumberOptions)
      data, _status_code, _headers = update_phone_number_with_http_info(phone_number_id, update_phone_number_options)
      data
    end

    # Update a phone number
    # Set field for phone number
    # @param phone_number_id [String] ID of phone to set favourite state
    # @param update_phone_number_options [UpdatePhoneNumberOptions] 
    # @return [Array<(PhoneNumberDto, Integer, Hash)>] PhoneNumberDto data, response status code and response headers
    def update_phone_number_with_http_info(phone_number_id : String, update_phone_number_options : UpdatePhoneNumberOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.update_phone_number ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.update_phone_number")
      end
      # verify the required parameter "update_phone_number_options" is set
      if @api_client.config.client_side_validation && update_phone_number_options.nil?
        raise ArgumentError.new("Missing the required parameter 'update_phone_number_options' when calling PhoneControllerApi.update_phone_number")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = update_phone_number_options.to_json

      # return_type
      return_type = "PhoneNumberDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"PhoneControllerApi.update_phone_number",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#update_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PhoneNumberDto.from_json(data), status_code, headers
    end

    # Verify validity of a phone number
    # Validate a phone number
    # @param validate_phone_number_options [ValidatePhoneNumberOptions] 
    # @return [PhoneNumberValidationDto]
    def validate_phone_number(validate_phone_number_options : ValidatePhoneNumberOptions)
      data, _status_code, _headers = validate_phone_number_with_http_info(validate_phone_number_options)
      data
    end

    # Verify validity of a phone number
    # Validate a phone number
    # @param validate_phone_number_options [ValidatePhoneNumberOptions] 
    # @return [Array<(PhoneNumberValidationDto, Integer, Hash)>] PhoneNumberValidationDto data, response status code and response headers
    def validate_phone_number_with_http_info(validate_phone_number_options : ValidatePhoneNumberOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.validate_phone_number ..."}
      end
      # verify the required parameter "validate_phone_number_options" is set
      if @api_client.config.client_side_validation && validate_phone_number_options.nil?
        raise ArgumentError.new("Missing the required parameter 'validate_phone_number_options' when calling PhoneControllerApi.validate_phone_number")
      end
      # resource path
      local_var_path = "/phone/validate"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = validate_phone_number_options.to_json

      # return_type
      return_type = "PhoneNumberValidationDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"PhoneControllerApi.validate_phone_number",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#validate_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PhoneNumberValidationDto.from_json(data), status_code, headers
    end
  end
end
