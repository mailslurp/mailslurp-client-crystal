# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class PhoneControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param create_emergency_address_options [CreateEmergencyAddressOptions] 
    # @return [EmergencyAddress]
    def create_emergency_address(create_emergency_address_options : CreateEmergencyAddressOptions)
      data, _status_code, _headers = create_emergency_address_with_http_info(create_emergency_address_options)
      data
    end

    # @param create_emergency_address_options [CreateEmergencyAddressOptions] 
    # @return [Array<(EmergencyAddress, Integer, Hash)>] EmergencyAddress data, response status code and response headers
    def create_emergency_address_with_http_info(create_emergency_address_options : CreateEmergencyAddressOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.create_emergency_address ..."}
      end
      # verify the required parameter "create_emergency_address_options" is set
      if @api_client.config.client_side_validation && create_emergency_address_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_emergency_address_options' when calling PhoneControllerApi.create_emergency_address")
      end
      # resource path
      local_var_path = "/phone/emergency-addresses"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_emergency_address_options.to_json

      # return_type
      return_type = "EmergencyAddress"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"PhoneControllerApi.create_emergency_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#create_emergency_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmergencyAddress.from_json(data), status_code, headers
    end

    # @param address_id [String] 
    # @return [EmptyResponseDto]
    def delete_emergency_address(address_id : String)
      data, _status_code, _headers = delete_emergency_address_with_http_info(address_id)
      data
    end

    # @param address_id [String] 
    # @return [Array<(EmptyResponseDto, Integer, Hash)>] EmptyResponseDto data, response status code and response headers
    def delete_emergency_address_with_http_info(address_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.delete_emergency_address ..."}
      end
      # verify the required parameter "address_id" is set
      if @api_client.config.client_side_validation && address_id.nil?
        raise ArgumentError.new("Missing the required parameter 'address_id' when calling PhoneControllerApi.delete_emergency_address")
      end
      # resource path
      local_var_path = "/phone/emergency-addresses/{addressId}".sub("{" + "addressId" + "}", URI.encode(address_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "EmptyResponseDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"PhoneControllerApi.delete_emergency_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#delete_emergency_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmptyResponseDto.from_json(data), status_code, headers
    end

    # @param phone_number_id [String] 
    # @return [nil]
    def delete_phone_number(phone_number_id : String)
      delete_phone_number_with_http_info(phone_number_id)
      nil
    end

    # @param phone_number_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_phone_number_with_http_info(phone_number_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.delete_phone_number ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.delete_phone_number")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"PhoneControllerApi.delete_phone_number",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#delete_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # @param address_id [String] 
    # @return [EmergencyAddress]
    def get_emergency_address(address_id : String)
      data, _status_code, _headers = get_emergency_address_with_http_info(address_id)
      data
    end

    # @param address_id [String] 
    # @return [Array<(EmergencyAddress, Integer, Hash)>] EmergencyAddress data, response status code and response headers
    def get_emergency_address_with_http_info(address_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_emergency_address ..."}
      end
      # verify the required parameter "address_id" is set
      if @api_client.config.client_side_validation && address_id.nil?
        raise ArgumentError.new("Missing the required parameter 'address_id' when calling PhoneControllerApi.get_emergency_address")
      end
      # resource path
      local_var_path = "/phone/emergency-addresses/{addressId}".sub("{" + "addressId" + "}", URI.encode(address_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "EmergencyAddress"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_emergency_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_emergency_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmergencyAddress.from_json(data), status_code, headers
    end

    # @return [Array(EmergencyAddressDto)]
    def get_emergency_addresses()
      data, _status_code, _headers = get_emergency_addresses_with_http_info()
      data
    end

    # @return [Array<(Array(EmergencyAddressDto), Integer, Hash)>] Array(EmergencyAddressDto) data, response status code and response headers
    def get_emergency_addresses_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_emergency_addresses ..."}
      end
      # resource path
      local_var_path = "/phone/emergency-addresses"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(EmergencyAddressDto)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_emergency_addresses",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_emergency_addresses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(EmergencyAddressDto).from_json(data), status_code, headers
    end

    # @param phone_number_id [String] 
    # @return [PhoneNumberDto]
    def get_phone_number(phone_number_id : String)
      data, _status_code, _headers = get_phone_number_with_http_info(phone_number_id)
      data
    end

    # @param phone_number_id [String] 
    # @return [Array<(PhoneNumberDto, Integer, Hash)>] PhoneNumberDto data, response status code and response headers
    def get_phone_number_with_http_info(phone_number_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_phone_number ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling PhoneControllerApi.get_phone_number")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PhoneNumberDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_phone_number",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PhoneNumberDto.from_json(data), status_code, headers
    end

    # @return [PagePhoneNumberProjection]
    def get_phone_numbers(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_phone_numbers_with_http_info(page, size, sort, since, before)
      data
    end

    # @return [Array<(PagePhoneNumberProjection, Integer, Hash)>] PagePhoneNumberProjection data, response status code and response headers
    def get_phone_numbers_with_http_info(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_phone_numbers ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/phone/numbers"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PagePhoneNumberProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_phone_numbers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_phone_numbers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PagePhoneNumberProjection.from_json(data), status_code, headers
    end

    # @return [Array(PhonePlanDto)]
    def get_phone_plans()
      data, _status_code, _headers = get_phone_plans_with_http_info()
      data
    end

    # @return [Array<(Array(PhonePlanDto), Integer, Hash)>] Array(PhonePlanDto) data, response status code and response headers
    def get_phone_plans_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: PhoneControllerApi.get_phone_plans ..."}
      end
      # resource path
      local_var_path = "/phone/plans"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(PhonePlanDto)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"PhoneControllerApi.get_phone_plans",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: PhoneControllerApi#get_phone_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(PhonePlanDto).from_json(data), status_code, headers
    end
  end
end
