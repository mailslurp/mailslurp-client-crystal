# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class GuestPortalControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a portal page for your customers or clients to log into email accounts and view emails.
    # Create a guest login page for customers or clients to access assigned email addresses
    # @param create_portal_options [CreatePortalOptions] 
    # @return [GuestPortalDto]
    def create_guest_portal(create_portal_options : CreatePortalOptions)
      data, _status_code, _headers = create_guest_portal_with_http_info(create_portal_options)
      data
    end

    # Create a portal page for your customers or clients to log into email accounts and view emails.
    # Create a guest login page for customers or clients to access assigned email addresses
    # @param create_portal_options [CreatePortalOptions] 
    # @return [Array<(GuestPortalDto, Integer, Hash)>] GuestPortalDto data, response status code and response headers
    def create_guest_portal_with_http_info(create_portal_options : CreatePortalOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: GuestPortalControllerApi.create_guest_portal ..."}
      end
      # verify the required parameter "create_portal_options" is set
      if @api_client.config.client_side_validation && create_portal_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_portal_options' when calling GuestPortalControllerApi.create_guest_portal")
      end
      # resource path
      local_var_path = "/guest-portal"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_portal_options.to_json

      # return_type
      return_type = "GuestPortalDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"GuestPortalControllerApi.create_guest_portal",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GuestPortalControllerApi#create_guest_portal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GuestPortalDto.from_json(data), status_code, headers
    end

    # Create a portal guest user
    # Add customer to portal
    # @param portal_id [String] 
    # @param create_portal_user_options [CreatePortalUserOptions] 
    # @return [GuestPortalUserCreateDto]
    def create_guest_portal_user(portal_id : String, create_portal_user_options : CreatePortalUserOptions)
      data, _status_code, _headers = create_guest_portal_user_with_http_info(portal_id, create_portal_user_options)
      data
    end

    # Create a portal guest user
    # Add customer to portal
    # @param portal_id [String] 
    # @param create_portal_user_options [CreatePortalUserOptions] 
    # @return [Array<(GuestPortalUserCreateDto, Integer, Hash)>] GuestPortalUserCreateDto data, response status code and response headers
    def create_guest_portal_user_with_http_info(portal_id : String, create_portal_user_options : CreatePortalUserOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: GuestPortalControllerApi.create_guest_portal_user ..."}
      end
      # verify the required parameter "portal_id" is set
      if @api_client.config.client_side_validation && portal_id.nil?
        raise ArgumentError.new("Missing the required parameter 'portal_id' when calling GuestPortalControllerApi.create_guest_portal_user")
      end
      # verify the required parameter "create_portal_user_options" is set
      if @api_client.config.client_side_validation && create_portal_user_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_portal_user_options' when calling GuestPortalControllerApi.create_guest_portal_user")
      end
      # resource path
      local_var_path = "/guest-portal/{portalId}/user".sub("{" + "portalId" + "}", URI.encode(portal_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_portal_user_options.to_json

      # return_type
      return_type = "GuestPortalUserCreateDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"GuestPortalControllerApi.create_guest_portal_user",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GuestPortalControllerApi#create_guest_portal_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GuestPortalUserCreateDto.from_json(data), status_code, headers
    end

    # Get all guest users for portal
    # Get all customers for a portal
    # @return [PageGuestPortalUsers]
    def get_all_guest_portal_users(portal_id : String?, search : String?, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_all_guest_portal_users_with_http_info(portal_id, search, page, size, sort, since, before)
      data
    end

    # Get all guest users for portal
    # Get all customers for a portal
    # @return [Array<(PageGuestPortalUsers, Integer, Hash)>] PageGuestPortalUsers data, response status code and response headers
    def get_all_guest_portal_users_with_http_info(portal_id : String?, search : String?, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: GuestPortalControllerApi.get_all_guest_portal_users ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/guest-portal/user"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"portalId"] = portal_id
      query_params[:"search"] = search
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageGuestPortalUsers"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"GuestPortalControllerApi.get_all_guest_portal_users",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GuestPortalControllerApi#get_all_guest_portal_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageGuestPortalUsers.from_json(data), status_code, headers
    end

    # Get a client email portal
    # Fetch a customer guest portal
    # @param portal_id [String] 
    # @return [GuestPortalDto]
    def get_guest_portal(portal_id : String)
      data, _status_code, _headers = get_guest_portal_with_http_info(portal_id)
      data
    end

    # Get a client email portal
    # Fetch a customer guest portal
    # @param portal_id [String] 
    # @return [Array<(GuestPortalDto, Integer, Hash)>] GuestPortalDto data, response status code and response headers
    def get_guest_portal_with_http_info(portal_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: GuestPortalControllerApi.get_guest_portal ..."}
      end
      # verify the required parameter "portal_id" is set
      if @api_client.config.client_side_validation && portal_id.nil?
        raise ArgumentError.new("Missing the required parameter 'portal_id' when calling GuestPortalControllerApi.get_guest_portal")
      end
      # resource path
      local_var_path = "/guest-portal/{portalId}".sub("{" + "portalId" + "}", URI.encode(portal_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GuestPortalDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"GuestPortalControllerApi.get_guest_portal",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GuestPortalControllerApi#get_guest_portal\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GuestPortalDto.from_json(data), status_code, headers
    end

    # Get guest user for portal
    # Get customer for portal
    # @param portal_id [String] 
    # @param guest_id [String] 
    # @return [GuestPortalUserDto]
    def get_guest_portal_user(portal_id : String, guest_id : String)
      data, _status_code, _headers = get_guest_portal_user_with_http_info(portal_id, guest_id)
      data
    end

    # Get guest user for portal
    # Get customer for portal
    # @param portal_id [String] 
    # @param guest_id [String] 
    # @return [Array<(GuestPortalUserDto, Integer, Hash)>] GuestPortalUserDto data, response status code and response headers
    def get_guest_portal_user_with_http_info(portal_id : String, guest_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: GuestPortalControllerApi.get_guest_portal_user ..."}
      end
      # verify the required parameter "portal_id" is set
      if @api_client.config.client_side_validation && portal_id.nil?
        raise ArgumentError.new("Missing the required parameter 'portal_id' when calling GuestPortalControllerApi.get_guest_portal_user")
      end
      # verify the required parameter "guest_id" is set
      if @api_client.config.client_side_validation && guest_id.nil?
        raise ArgumentError.new("Missing the required parameter 'guest_id' when calling GuestPortalControllerApi.get_guest_portal_user")
      end
      # resource path
      local_var_path = "/guest-portal/{portalId}/user/{guestId}".sub("{" + "portalId" + "}", URI.encode(portal_id.to_s)).sub("{" + "guestId" + "}", URI.encode(guest_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GuestPortalUserDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"GuestPortalControllerApi.get_guest_portal_user",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GuestPortalControllerApi#get_guest_portal_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GuestPortalUserDto.from_json(data), status_code, headers
    end

    # Get guest user
    # Get customer by ID
    # @param guest_id [String] 
    # @return [GuestPortalUserDto]
    def get_guest_portal_user_by_id(guest_id : String)
      data, _status_code, _headers = get_guest_portal_user_by_id_with_http_info(guest_id)
      data
    end

    # Get guest user
    # Get customer by ID
    # @param guest_id [String] 
    # @return [Array<(GuestPortalUserDto, Integer, Hash)>] GuestPortalUserDto data, response status code and response headers
    def get_guest_portal_user_by_id_with_http_info(guest_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: GuestPortalControllerApi.get_guest_portal_user_by_id ..."}
      end
      # verify the required parameter "guest_id" is set
      if @api_client.config.client_side_validation && guest_id.nil?
        raise ArgumentError.new("Missing the required parameter 'guest_id' when calling GuestPortalControllerApi.get_guest_portal_user_by_id")
      end
      # resource path
      local_var_path = "/guest-portal/user/{guestId}".sub("{" + "guestId" + "}", URI.encode(guest_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GuestPortalUserDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"GuestPortalControllerApi.get_guest_portal_user_by_id",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GuestPortalControllerApi#get_guest_portal_user_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GuestPortalUserDto.from_json(data), status_code, headers
    end

    # Get all guest users for portal
    # Get customers for a portal
    # @param portal_id [String] 
    # @return [PageGuestPortalUsers]
    def get_guest_portal_users(portal_id : String, search : String?, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_guest_portal_users_with_http_info(portal_id, search, page, size, sort, since, before)
      data
    end

    # Get all guest users for portal
    # Get customers for a portal
    # @param portal_id [String] 
    # @return [Array<(PageGuestPortalUsers, Integer, Hash)>] PageGuestPortalUsers data, response status code and response headers
    def get_guest_portal_users_with_http_info(portal_id : String, search : String?, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: GuestPortalControllerApi.get_guest_portal_users ..."}
      end
      # verify the required parameter "portal_id" is set
      if @api_client.config.client_side_validation && portal_id.nil?
        raise ArgumentError.new("Missing the required parameter 'portal_id' when calling GuestPortalControllerApi.get_guest_portal_users")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/guest-portal/{portalId}/user".sub("{" + "portalId" + "}", URI.encode(portal_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"search"] = search
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageGuestPortalUsers"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"GuestPortalControllerApi.get_guest_portal_users",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GuestPortalControllerApi#get_guest_portal_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageGuestPortalUsers.from_json(data), status_code, headers
    end

    # Get guest portals
    # Get portals
    # @return [Array(GuestPortalDto)]
    def get_guest_portals()
      data, _status_code, _headers = get_guest_portals_with_http_info()
      data
    end

    # Get guest portals
    # Get portals
    # @return [Array<(Array(GuestPortalDto), Integer, Hash)>] Array(GuestPortalDto) data, response status code and response headers
    def get_guest_portals_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: GuestPortalControllerApi.get_guest_portals ..."}
      end
      # resource path
      local_var_path = "/guest-portal"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(GuestPortalDto)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"GuestPortalControllerApi.get_guest_portals",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: GuestPortalControllerApi#get_guest_portals\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(GuestPortalDto).from_json(data), status_code, headers
    end
  end
end
