# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
#
#The version of the OpenAPI document: 6.5.2
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class WaitForControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Wait for an email to match the provided filter conditions such as subject contains keyword.
    # Generic waitFor method that will wait until an inbox meets given conditions or return immediately if already met
    # @return [Array(EmailPreview)]
    def wait_for(wait_for_conditions : WaitForConditions?)
      data, _status_code, _headers = wait_for_with_http_info(wait_for_conditions)
      data
    end

    # Wait for an email to match the provided filter conditions such as subject contains keyword.
    # Generic waitFor method that will wait until an inbox meets given conditions or return immediately if already met
    # @return [Array<(Array(EmailPreview), Integer, Hash)>] Array(EmailPreview) data, response status code and response headers
    def wait_for_with_http_info(wait_for_conditions : WaitForConditions?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WaitForControllerApi.wait_for ..."}
      end
      # resource path
      local_var_path = "/waitFor"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = wait_for_conditions.to_json

      # return_type
      return_type = "Array(EmailPreview)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WaitForControllerApi.wait_for",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WaitForControllerApi#wait_for\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(EmailPreview).from_json(data), status_code, headers
    end

    # Wait for and return count number of emails. Hold connection until inbox count matches expected or timeout occurs
    # If inbox contains count or more emails at time of request then return count worth of emails. If not wait until the count is reached and return those or return an error if timeout is exceeded.
    # @return [Array(EmailPreview)]
    def wait_for_email_count(count : Int32?, delay : Int64?, inbox_id : String?, since : Time?, sort : String?, timeout : Int64?, unread_only : Bool?)
      data, _status_code, _headers = wait_for_email_count_with_http_info(count, delay, inbox_id, since, sort, timeout, unread_only)
      data
    end

    # Wait for and return count number of emails. Hold connection until inbox count matches expected or timeout occurs
    # If inbox contains count or more emails at time of request then return count worth of emails. If not wait until the count is reached and return those or return an error if timeout is exceeded.
    # @return [Array<(Array(EmailPreview), Integer, Hash)>] Array(EmailPreview) data, response status code and response headers
    def wait_for_email_count_with_http_info(count : Int32?, delay : Int64?, inbox_id : String?, since : Time?, sort : String?, timeout : Int64?, unread_only : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WaitForControllerApi.wait_for_email_count ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/waitForEmailCount"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"count"] = count
      query_params[:"delay"] = delay
      query_params[:"inboxId"] = inbox_id
      query_params[:"since"] = since
      query_params[:"sort"] = sort
      query_params[:"timeout"] = timeout
      query_params[:"unreadOnly"] = unread_only

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(EmailPreview)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WaitForControllerApi.wait_for_email_count",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WaitForControllerApi#wait_for_email_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(EmailPreview).from_json(data), status_code, headers
    end

    # Fetch inbox's latest email or if empty wait for an email to arrive
    # Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox set `unreadOnly=true` or see the other receive methods such as `waitForNthEmail` or `waitForEmailCount`.
    # @return [Email]
    def wait_for_latest_email(delay : Int64?, inbox_id : String?, since : Time?, sort : String?, timeout : Int64?, unread_only : Bool?)
      data, _status_code, _headers = wait_for_latest_email_with_http_info(delay, inbox_id, since, sort, timeout, unread_only)
      data
    end

    # Fetch inbox&#39;s latest email or if empty wait for an email to arrive
    # Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox set &#x60;unreadOnly&#x3D;true&#x60; or see the other receive methods such as &#x60;waitForNthEmail&#x60; or &#x60;waitForEmailCount&#x60;.
    # @return [Array<(Email, Integer, Hash)>] Email data, response status code and response headers
    def wait_for_latest_email_with_http_info(delay : Int64?, inbox_id : String?, since : Time?, sort : String?, timeout : Int64?, unread_only : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WaitForControllerApi.wait_for_latest_email ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/waitForLatestEmail"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"delay"] = delay
      query_params[:"inboxId"] = inbox_id
      query_params[:"since"] = since
      query_params[:"sort"] = sort
      query_params[:"timeout"] = timeout
      query_params[:"unreadOnly"] = unread_only

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Email"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WaitForControllerApi.wait_for_latest_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WaitForControllerApi#wait_for_latest_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Email.from_json(data), status_code, headers
    end

    # Wait or return list of emails that match simple matching patterns
    # Perform a search of emails in an inbox with the given patterns. If results match expected count then return or else retry the search until results are found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the `MatchOptions` object for options. An example payload is `{ matches: [{field: 'SUBJECT',should:'CONTAIN',value:'needle'}] }`. You can use an array of matches and they will be applied sequentially to filter out emails. If you want to perform matches and extractions of content using Regex patterns see the EmailController `getEmailContentMatch` method.
    # @param match_options [MatchOptions] matchOptions
    # @return [Array(EmailPreview)]
    def wait_for_matching_email(match_options : MatchOptions, count : Int32?, delay : Int64?, inbox_id : String?, since : Time?, sort : String?, timeout : Int64?, unread_only : Bool?)
      data, _status_code, _headers = wait_for_matching_email_with_http_info(match_options, count, delay, inbox_id, since, sort, timeout, unread_only)
      data
    end

    # Wait or return list of emails that match simple matching patterns
    # Perform a search of emails in an inbox with the given patterns. If results match expected count then return or else retry the search until results are found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the &#x60;MatchOptions&#x60; object for options. An example payload is &#x60;{ matches: [{field: &#39;SUBJECT&#39;,should:&#39;CONTAIN&#39;,value:&#39;needle&#39;}] }&#x60;. You can use an array of matches and they will be applied sequentially to filter out emails. If you want to perform matches and extractions of content using Regex patterns see the EmailController &#x60;getEmailContentMatch&#x60; method.
    # @param match_options [MatchOptions] matchOptions
    # @return [Array<(Array(EmailPreview), Integer, Hash)>] Array(EmailPreview) data, response status code and response headers
    def wait_for_matching_email_with_http_info(match_options : MatchOptions, count : Int32?, delay : Int64?, inbox_id : String?, since : Time?, sort : String?, timeout : Int64?, unread_only : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WaitForControllerApi.wait_for_matching_email ..."}
      end
      # verify the required parameter "match_options" is set
      if @api_client.config.client_side_validation && match_options.nil?
        raise ArgumentError.new("Missing the required parameter 'match_options' when calling WaitForControllerApi.wait_for_matching_email")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/waitForMatchingEmails"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"count"] = count
      query_params[:"delay"] = delay
      query_params[:"inboxId"] = inbox_id
      query_params[:"since"] = since
      query_params[:"sort"] = sort
      query_params[:"timeout"] = timeout
      query_params[:"unreadOnly"] = unread_only

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = match_options.to_json

      # return_type
      return_type = "Array(EmailPreview)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WaitForControllerApi.wait_for_matching_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WaitForControllerApi#wait_for_matching_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(EmailPreview).from_json(data), status_code, headers
    end

    # Wait for or return the first email that matches provided MatchOptions array
    # Perform a search of emails in an inbox with the given patterns. If a result if found then return or else retry the search until a result is found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the `MatchOptions` object for options. An example payload is `{ matches: [{field: 'SUBJECT',should:'CONTAIN',value:'needle'}] }`. You can use an array of matches and they will be applied sequentially to filter out emails. If you want to perform matches and extractions of content using Regex patterns see the EmailController `getEmailContentMatch` method.
    # @param match_options [MatchOptions] matchOptions
    # @return [Email]
    def wait_for_matching_first_email(match_options : MatchOptions, delay : Int64?, inbox_id : String?, since : Time?, sort : String?, timeout : Int64?, unread_only : Bool?)
      data, _status_code, _headers = wait_for_matching_first_email_with_http_info(match_options, delay, inbox_id, since, sort, timeout, unread_only)
      data
    end

    # Wait for or return the first email that matches provided MatchOptions array
    # Perform a search of emails in an inbox with the given patterns. If a result if found then return or else retry the search until a result is found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the &#x60;MatchOptions&#x60; object for options. An example payload is &#x60;{ matches: [{field: &#39;SUBJECT&#39;,should:&#39;CONTAIN&#39;,value:&#39;needle&#39;}] }&#x60;. You can use an array of matches and they will be applied sequentially to filter out emails. If you want to perform matches and extractions of content using Regex patterns see the EmailController &#x60;getEmailContentMatch&#x60; method.
    # @param match_options [MatchOptions] matchOptions
    # @return [Array<(Email, Integer, Hash)>] Email data, response status code and response headers
    def wait_for_matching_first_email_with_http_info(match_options : MatchOptions, delay : Int64?, inbox_id : String?, since : Time?, sort : String?, timeout : Int64?, unread_only : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WaitForControllerApi.wait_for_matching_first_email ..."}
      end
      # verify the required parameter "match_options" is set
      if @api_client.config.client_side_validation && match_options.nil?
        raise ArgumentError.new("Missing the required parameter 'match_options' when calling WaitForControllerApi.wait_for_matching_first_email")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/waitForMatchingFirstEmail"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"delay"] = delay
      query_params[:"inboxId"] = inbox_id
      query_params[:"since"] = since
      query_params[:"sort"] = sort
      query_params[:"timeout"] = timeout
      query_params[:"unreadOnly"] = unread_only

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = match_options.to_json

      # return_type
      return_type = "Email"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WaitForControllerApi.wait_for_matching_first_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WaitForControllerApi#wait_for_matching_first_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Email.from_json(data), status_code, headers
    end

    # Wait for or fetch the email with a given index in the inbox specified. If index doesn't exist waits for it to exist or timeout to occur.
    # If nth email is already present in inbox then return it. If not hold the connection open until timeout expires or the nth email is received and returned.
    # @return [Email]
    def wait_for_nth_email(delay : Int64?, inbox_id : String?, index : Int32?, since : Time?, sort : String?, timeout : Int64?, unread_only : Bool?)
      data, _status_code, _headers = wait_for_nth_email_with_http_info(delay, inbox_id, index, since, sort, timeout, unread_only)
      data
    end

    # Wait for or fetch the email with a given index in the inbox specified. If index doesn&#39;t exist waits for it to exist or timeout to occur.
    # If nth email is already present in inbox then return it. If not hold the connection open until timeout expires or the nth email is received and returned.
    # @return [Array<(Email, Integer, Hash)>] Email data, response status code and response headers
    def wait_for_nth_email_with_http_info(delay : Int64?, inbox_id : String?, index : Int32?, since : Time?, sort : String?, timeout : Int64?, unread_only : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WaitForControllerApi.wait_for_nth_email ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/waitForNthEmail"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"delay"] = delay
      query_params[:"inboxId"] = inbox_id
      query_params[:"index"] = index
      query_params[:"since"] = since
      query_params[:"sort"] = sort
      query_params[:"timeout"] = timeout
      query_params[:"unreadOnly"] = unread_only

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Email"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WaitForControllerApi.wait_for_nth_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WaitForControllerApi#wait_for_nth_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Email.from_json(data), status_code, headers
    end
  end
end
