# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class MailServerControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get DNS Mail Server records for a domain
    # @param describe_domain_options [DescribeDomainOptions] 
    # @return [DescribeMailServerDomainResult]
    def describe_mail_server_domain(describe_domain_options : DescribeDomainOptions)
      data, _status_code, _headers = describe_mail_server_domain_with_http_info(describe_domain_options)
      data
    end

    # Get DNS Mail Server records for a domain
    # @param describe_domain_options [DescribeDomainOptions] 
    # @return [Array<(DescribeMailServerDomainResult, Integer, Hash)>] DescribeMailServerDomainResult data, response status code and response headers
    def describe_mail_server_domain_with_http_info(describe_domain_options : DescribeDomainOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: MailServerControllerApi.describe_mail_server_domain ..."}
      end
      # verify the required parameter "describe_domain_options" is set
      if @api_client.config.client_side_validation && describe_domain_options.nil?
        raise ArgumentError.new("Missing the required parameter 'describe_domain_options' when calling MailServerControllerApi.describe_mail_server_domain")
      end
      # resource path
      local_var_path = "/mail-server/describe/domain"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = describe_domain_options.to_json

      # return_type
      return_type = "DescribeMailServerDomainResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"MailServerControllerApi.describe_mail_server_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: MailServerControllerApi#describe_mail_server_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DescribeMailServerDomainResult.from_json(data), status_code, headers
    end

    # Lookup DNS records for a domain
    # @param dns_lookup_options [DNSLookupOptions] 
    # @return [DNSLookupResults]
    def get_dns_lookup(dns_lookup_options : DNSLookupOptions)
      data, _status_code, _headers = get_dns_lookup_with_http_info(dns_lookup_options)
      data
    end

    # Lookup DNS records for a domain
    # @param dns_lookup_options [DNSLookupOptions] 
    # @return [Array<(DNSLookupResults, Integer, Hash)>] DNSLookupResults data, response status code and response headers
    def get_dns_lookup_with_http_info(dns_lookup_options : DNSLookupOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: MailServerControllerApi.get_dns_lookup ..."}
      end
      # verify the required parameter "dns_lookup_options" is set
      if @api_client.config.client_side_validation && dns_lookup_options.nil?
        raise ArgumentError.new("Missing the required parameter 'dns_lookup_options' when calling MailServerControllerApi.get_dns_lookup")
      end
      # resource path
      local_var_path = "/mail-server/describe/dns-lookup"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = dns_lookup_options.to_json

      # return_type
      return_type = "DNSLookupResults"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"MailServerControllerApi.get_dns_lookup",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: MailServerControllerApi#get_dns_lookup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DNSLookupResults.from_json(data), status_code, headers
    end

    # Lookup DNS records for multiple domains
    # @param dns_lookups_options [DNSLookupsOptions] 
    # @return [DNSLookupResults]
    def get_dns_lookups(dns_lookups_options : DNSLookupsOptions)
      data, _status_code, _headers = get_dns_lookups_with_http_info(dns_lookups_options)
      data
    end

    # Lookup DNS records for multiple domains
    # @param dns_lookups_options [DNSLookupsOptions] 
    # @return [Array<(DNSLookupResults, Integer, Hash)>] DNSLookupResults data, response status code and response headers
    def get_dns_lookups_with_http_info(dns_lookups_options : DNSLookupsOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: MailServerControllerApi.get_dns_lookups ..."}
      end
      # verify the required parameter "dns_lookups_options" is set
      if @api_client.config.client_side_validation && dns_lookups_options.nil?
        raise ArgumentError.new("Missing the required parameter 'dns_lookups_options' when calling MailServerControllerApi.get_dns_lookups")
      end
      # resource path
      local_var_path = "/mail-server/describe/dns-lookups"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = dns_lookups_options.to_json

      # return_type
      return_type = "DNSLookupResults"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"MailServerControllerApi.get_dns_lookups",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: MailServerControllerApi#get_dns_lookups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return DNSLookupResults.from_json(data), status_code, headers
    end

    # Get IP address for a domain
    # @param name [String] 
    # @return [IPAddressResult]
    def get_ip_address(name : String)
      data, _status_code, _headers = get_ip_address_with_http_info(name)
      data
    end

    # Get IP address for a domain
    # @param name [String] 
    # @return [Array<(IPAddressResult, Integer, Hash)>] IPAddressResult data, response status code and response headers
    def get_ip_address_with_http_info(name : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: MailServerControllerApi.get_ip_address ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling MailServerControllerApi.get_ip_address")
      end
      # resource path
      local_var_path = "/mail-server/describe/ip-address"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"name"] = name

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "IPAddressResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"MailServerControllerApi.get_ip_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: MailServerControllerApi#get_ip_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return IPAddressResult.from_json(data), status_code, headers
    end

    # Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server.
    # @param verify_email_address_options [VerifyEmailAddressOptions] 
    # @return [EmailVerificationResult]
    def verify_email_address(verify_email_address_options : VerifyEmailAddressOptions)
      data, _status_code, _headers = verify_email_address_with_http_info(verify_email_address_options)
      data
    end

    # Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server.
    # @param verify_email_address_options [VerifyEmailAddressOptions] 
    # @return [Array<(EmailVerificationResult, Integer, Hash)>] EmailVerificationResult data, response status code and response headers
    def verify_email_address_with_http_info(verify_email_address_options : VerifyEmailAddressOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: MailServerControllerApi.verify_email_address ..."}
      end
      # verify the required parameter "verify_email_address_options" is set
      if @api_client.config.client_side_validation && verify_email_address_options.nil?
        raise ArgumentError.new("Missing the required parameter 'verify_email_address_options' when calling MailServerControllerApi.verify_email_address")
      end
      # resource path
      local_var_path = "/mail-server/verify/email-address"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = verify_email_address_options.to_json

      # return_type
      return_type = "EmailVerificationResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"MailServerControllerApi.verify_email_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: MailServerControllerApi#verify_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmailVerificationResult.from_json(data), status_code, headers
    end
  end
end
