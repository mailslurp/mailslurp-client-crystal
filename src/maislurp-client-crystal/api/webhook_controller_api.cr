# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class WebhookControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Attach a WebHook URL to an inbox
    # Get notified of account level events such as bounce and bounce recipient.
    # @param create_webhook_options [CreateWebhookOptions] 
    # @return [WebhookDto]
    def create_account_webhook(create_webhook_options : CreateWebhookOptions)
      data, _status_code, _headers = create_account_webhook_with_http_info(create_webhook_options)
      data
    end

    # Attach a WebHook URL to an inbox
    # Get notified of account level events such as bounce and bounce recipient.
    # @param create_webhook_options [CreateWebhookOptions] 
    # @return [Array<(WebhookDto, Integer, Hash)>] WebhookDto data, response status code and response headers
    def create_account_webhook_with_http_info(create_webhook_options : CreateWebhookOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.create_account_webhook ..."}
      end
      # verify the required parameter "create_webhook_options" is set
      if @api_client.config.client_side_validation && create_webhook_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_webhook_options' when calling WebhookControllerApi.create_account_webhook")
      end
      # resource path
      local_var_path = "/webhooks"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_webhook_options.to_json

      # return_type
      return_type = "WebhookDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WebhookControllerApi.create_account_webhook",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#create_account_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookDto.from_json(data), status_code, headers
    end

    # Attach a WebHook URL to an inbox
    # Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
    # @param inbox_id [String] 
    # @param create_webhook_options [CreateWebhookOptions] 
    # @return [WebhookDto]
    def create_webhook(inbox_id : String, create_webhook_options : CreateWebhookOptions)
      data, _status_code, _headers = create_webhook_with_http_info(inbox_id, create_webhook_options)
      data
    end

    # Attach a WebHook URL to an inbox
    # Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
    # @param inbox_id [String] 
    # @param create_webhook_options [CreateWebhookOptions] 
    # @return [Array<(WebhookDto, Integer, Hash)>] WebhookDto data, response status code and response headers
    def create_webhook_with_http_info(inbox_id : String, create_webhook_options : CreateWebhookOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.create_webhook ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling WebhookControllerApi.create_webhook")
      end
      # verify the required parameter "create_webhook_options" is set
      if @api_client.config.client_side_validation && create_webhook_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_webhook_options' when calling WebhookControllerApi.create_webhook")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/webhooks".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_webhook_options.to_json

      # return_type
      return_type = "WebhookDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WebhookControllerApi.create_webhook",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#create_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookDto.from_json(data), status_code, headers
    end

    # Attach a WebHook URL to a phone number
    # Get notified whenever a phone number receives an SMS via a WebHook URL.
    # @param phone_number_id [String] 
    # @param create_webhook_options [CreateWebhookOptions] 
    # @return [WebhookDto]
    def create_webhook_for_phone_number(phone_number_id : String, create_webhook_options : CreateWebhookOptions)
      data, _status_code, _headers = create_webhook_for_phone_number_with_http_info(phone_number_id, create_webhook_options)
      data
    end

    # Attach a WebHook URL to a phone number
    # Get notified whenever a phone number receives an SMS via a WebHook URL.
    # @param phone_number_id [String] 
    # @param create_webhook_options [CreateWebhookOptions] 
    # @return [Array<(WebhookDto, Integer, Hash)>] WebhookDto data, response status code and response headers
    def create_webhook_for_phone_number_with_http_info(phone_number_id : String, create_webhook_options : CreateWebhookOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.create_webhook_for_phone_number ..."}
      end
      # verify the required parameter "phone_number_id" is set
      if @api_client.config.client_side_validation && phone_number_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_number_id' when calling WebhookControllerApi.create_webhook_for_phone_number")
      end
      # verify the required parameter "create_webhook_options" is set
      if @api_client.config.client_side_validation && create_webhook_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_webhook_options' when calling WebhookControllerApi.create_webhook_for_phone_number")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneNumberId}/webhooks".sub("{" + "phoneNumberId" + "}", URI.encode(phone_number_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_webhook_options.to_json

      # return_type
      return_type = "WebhookDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WebhookControllerApi.create_webhook_for_phone_number",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#create_webhook_for_phone_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookDto.from_json(data), status_code, headers
    end

    # Delete all webhooks
    # @return [nil]
    def delete_all_webhooks(before : Time?)
      delete_all_webhooks_with_http_info(before)
      nil
    end

    # Delete all webhooks
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_all_webhooks_with_http_info(before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.delete_all_webhooks ..."}
      end
      # resource path
      local_var_path = "/webhooks"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"WebhookControllerApi.delete_all_webhooks",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#delete_all_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete and disable a Webhook for an Inbox
    # @param inbox_id [String] 
    # @param webhook_id [String] 
    # @return [nil]
    def delete_webhook(inbox_id : String, webhook_id : String)
      delete_webhook_with_http_info(inbox_id, webhook_id)
      nil
    end

    # Delete and disable a Webhook for an Inbox
    # @param inbox_id [String] 
    # @param webhook_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_webhook_with_http_info(inbox_id : String, webhook_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.delete_webhook ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling WebhookControllerApi.delete_webhook")
      end
      # verify the required parameter "webhook_id" is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        raise ArgumentError.new("Missing the required parameter 'webhook_id' when calling WebhookControllerApi.delete_webhook")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/webhooks/{webhookId}".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s)).sub("{" + "webhookId" + "}", URI.encode(webhook_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"WebhookControllerApi.delete_webhook",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#delete_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete a webhook
    # @param webhook_id [String] 
    # @return [nil]
    def delete_webhook_by_id(webhook_id : String)
      delete_webhook_by_id_with_http_info(webhook_id)
      nil
    end

    # Delete a webhook
    # @param webhook_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_webhook_by_id_with_http_info(webhook_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.delete_webhook_by_id ..."}
      end
      # verify the required parameter "webhook_id" is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        raise ArgumentError.new("Missing the required parameter 'webhook_id' when calling WebhookControllerApi.delete_webhook_by_id")
      end
      # resource path
      local_var_path = "/webhooks/{webhookId}".sub("{" + "webhookId" + "}", URI.encode(webhook_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"WebhookControllerApi.delete_webhook_by_id",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#delete_webhook_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # List account webhooks Paginated
    # List account webhooks in paginated form. Allows for page index, page size, and sort direction.
    # @return [PageWebhookProjection]
    def get_all_account_webhooks(page : Int32?, size : Int32?, sort : String?, event_type : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_all_account_webhooks_with_http_info(page, size, sort, event_type, since, before)
      data
    end

    # List account webhooks Paginated
    # List account webhooks in paginated form. Allows for page index, page size, and sort direction.
    # @return [Array<(PageWebhookProjection, Integer, Hash)>] PageWebhookProjection data, response status code and response headers
    def get_all_account_webhooks_with_http_info(page : Int32?, size : Int32?, sort : String?, event_type : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_all_account_webhooks ..."}
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 9223372036854775807
        raise ArgumentError.new("invalid value for \"page\" when calling WebhookControllerApi.get_all_account_webhooks, must be smaller than or equal to 9223372036854775807.")
      end

      if @api_client.config.client_side_validation && !page.nil? && page < 0
        raise ArgumentError.new("invalid value for \"page\" when calling WebhookControllerApi.get_all_account_webhooks, must be greater than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling WebhookControllerApi.get_all_account_webhooks, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !size.nil? && size < 1
        raise ArgumentError.new("invalid value for \"size\" when calling WebhookControllerApi.get_all_account_webhooks, must be greater than or equal to 1.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      allowable_values = ["EMAIL_RECEIVED", "NEW_EMAIL", "NEW_CONTACT", "NEW_ATTACHMENT", "EMAIL_OPENED", "EMAIL_READ", "DELIVERY_STATUS", "BOUNCE", "BOUNCE_RECIPIENT", "NEW_SMS"]
      if @api_client.config.client_side_validation && event_type && !allowable_values.includes?(event_type)
        raise ArgumentError.new("invalid value for \"event_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/webhooks/account/paginated"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"eventType"] = event_type
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageWebhookProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_all_account_webhooks",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_all_account_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageWebhookProjection.from_json(data), status_code, headers
    end

    # Get results for all webhooks
    # @return [PageWebhookResult]
    def get_all_webhook_results(page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?, unseen_only : Bool?)
      data, _status_code, _headers = get_all_webhook_results_with_http_info(page, size, sort, search_filter, since, before, unseen_only)
      data
    end

    # Get results for all webhooks
    # @return [Array<(PageWebhookResult, Integer, Hash)>] PageWebhookResult data, response status code and response headers
    def get_all_webhook_results_with_http_info(page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?, unseen_only : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_all_webhook_results ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/webhooks/results"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before
      query_params[:"unseenOnly"] = unseen_only

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageWebhookResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_all_webhook_results",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_all_webhook_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageWebhookResult.from_json(data), status_code, headers
    end

    # List Webhooks Paginated
    # List webhooks in paginated form. Allows for page index, page size, and sort direction.
    # @return [PageWebhookProjection]
    def get_all_webhooks(page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, inbox_id : String?, phone_id : String?, before : Time?)
      data, _status_code, _headers = get_all_webhooks_with_http_info(page, size, sort, search_filter, since, inbox_id, phone_id, before)
      data
    end

    # List Webhooks Paginated
    # List webhooks in paginated form. Allows for page index, page size, and sort direction.
    # @return [Array<(PageWebhookProjection, Integer, Hash)>] PageWebhookProjection data, response status code and response headers
    def get_all_webhooks_with_http_info(page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, inbox_id : String?, phone_id : String?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_all_webhooks ..."}
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 9223372036854775807
        raise ArgumentError.new("invalid value for \"page\" when calling WebhookControllerApi.get_all_webhooks, must be smaller than or equal to 9223372036854775807.")
      end

      if @api_client.config.client_side_validation && !page.nil? && page < 0
        raise ArgumentError.new("invalid value for \"page\" when calling WebhookControllerApi.get_all_webhooks, must be greater than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling WebhookControllerApi.get_all_webhooks, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !size.nil? && size < 1
        raise ArgumentError.new("invalid value for \"size\" when calling WebhookControllerApi.get_all_webhooks, must be greater than or equal to 1.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/webhooks/paginated"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"inboxId"] = inbox_id
      query_params[:"phoneId"] = phone_id
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageWebhookProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_all_webhooks",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_all_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageWebhookProjection.from_json(data), status_code, headers
    end

    # Get paginated webhooks for an Inbox
    # @param inbox_id [String] 
    # @return [PageWebhookProjection]
    def get_inbox_webhooks_paginated(inbox_id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_inbox_webhooks_paginated_with_http_info(inbox_id, page, size, sort, search_filter, since, before)
      data
    end

    # Get paginated webhooks for an Inbox
    # @param inbox_id [String] 
    # @return [Array<(PageWebhookProjection, Integer, Hash)>] PageWebhookProjection data, response status code and response headers
    def get_inbox_webhooks_paginated_with_http_info(inbox_id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_inbox_webhooks_paginated ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling WebhookControllerApi.get_inbox_webhooks_paginated")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/webhooks/paginated".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageWebhookProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_inbox_webhooks_paginated",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_inbox_webhooks_paginated\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageWebhookProjection.from_json(data), status_code, headers
    end

    # Get JSON Schema definition for webhook payload by event
    # @param event [String] 
    # @return [JSONSchemaDto]
    def get_json_schema_for_webhook_event(event : String)
      data, _status_code, _headers = get_json_schema_for_webhook_event_with_http_info(event)
      data
    end

    # Get JSON Schema definition for webhook payload by event
    # @param event [String] 
    # @return [Array<(JSONSchemaDto, Integer, Hash)>] JSONSchemaDto data, response status code and response headers
    def get_json_schema_for_webhook_event_with_http_info(event : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_json_schema_for_webhook_event ..."}
      end
      # verify the required parameter "event" is set
      if @api_client.config.client_side_validation && event.nil?
        raise ArgumentError.new("Missing the required parameter 'event' when calling WebhookControllerApi.get_json_schema_for_webhook_event")
      end
      # verify enum value
      allowable_values = ["EMAIL_RECEIVED", "NEW_EMAIL", "NEW_CONTACT", "NEW_ATTACHMENT", "EMAIL_OPENED", "EMAIL_READ", "DELIVERY_STATUS", "BOUNCE", "BOUNCE_RECIPIENT", "NEW_SMS"]
      if @api_client.config.client_side_validation && !allowable_values.includes?(event)
        raise ArgumentError.new("invalid value for \"event\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/webhooks/schema"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"event"] = event

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JSONSchemaDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_json_schema_for_webhook_event",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_json_schema_for_webhook_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JSONSchemaDto.from_json(data), status_code, headers
    end

    # Get JSON Schema definition for webhook payload
    # @param webhook_id [String] 
    # @return [JSONSchemaDto]
    def get_json_schema_for_webhook_payload(webhook_id : String)
      data, _status_code, _headers = get_json_schema_for_webhook_payload_with_http_info(webhook_id)
      data
    end

    # Get JSON Schema definition for webhook payload
    # @param webhook_id [String] 
    # @return [Array<(JSONSchemaDto, Integer, Hash)>] JSONSchemaDto data, response status code and response headers
    def get_json_schema_for_webhook_payload_with_http_info(webhook_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_json_schema_for_webhook_payload ..."}
      end
      # verify the required parameter "webhook_id" is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        raise ArgumentError.new("Missing the required parameter 'webhook_id' when calling WebhookControllerApi.get_json_schema_for_webhook_payload")
      end
      # resource path
      local_var_path = "/webhooks/{webhookId}/schema".sub("{" + "webhookId" + "}", URI.encode(webhook_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "JSONSchemaDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_json_schema_for_webhook_payload",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_json_schema_for_webhook_payload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return JSONSchemaDto.from_json(data), status_code, headers
    end

    # Get paginated webhooks for a phone number
    # @param phone_id [String] 
    # @return [PageWebhookProjection]
    def get_phone_number_webhooks_paginated(phone_id : String, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_phone_number_webhooks_paginated_with_http_info(phone_id, page, size, sort, since, before)
      data
    end

    # Get paginated webhooks for a phone number
    # @param phone_id [String] 
    # @return [Array<(PageWebhookProjection, Integer, Hash)>] PageWebhookProjection data, response status code and response headers
    def get_phone_number_webhooks_paginated_with_http_info(phone_id : String, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_phone_number_webhooks_paginated ..."}
      end
      # verify the required parameter "phone_id" is set
      if @api_client.config.client_side_validation && phone_id.nil?
        raise ArgumentError.new("Missing the required parameter 'phone_id' when calling WebhookControllerApi.get_phone_number_webhooks_paginated")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/phone/numbers/{phoneId}/webhooks/paginated".sub("{" + "phoneId" + "}", URI.encode(phone_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageWebhookProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_phone_number_webhooks_paginated",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_phone_number_webhooks_paginated\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageWebhookProjection.from_json(data), status_code, headers
    end

    # Get test webhook payload example. Response content depends on eventName passed. Uses `EMAIL_RECEIVED` as default.
    # @return [AbstractWebhookPayload]
    def get_test_webhook_payload(event_name : String?)
      data, _status_code, _headers = get_test_webhook_payload_with_http_info(event_name)
      data
    end

    # Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
    # @return [Array<(AbstractWebhookPayload, Integer, Hash)>] AbstractWebhookPayload data, response status code and response headers
    def get_test_webhook_payload_with_http_info(event_name : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_test_webhook_payload ..."}
      end
      allowable_values = ["EMAIL_RECEIVED", "NEW_EMAIL", "NEW_CONTACT", "NEW_ATTACHMENT", "EMAIL_OPENED", "EMAIL_READ", "DELIVERY_STATUS", "BOUNCE", "BOUNCE_RECIPIENT", "NEW_SMS"]
      if @api_client.config.client_side_validation && event_name && !allowable_values.includes?(event_name)
        raise ArgumentError.new("invalid value for \"event_name\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/webhooks/test"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"eventName"] = event_name

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AbstractWebhookPayload"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_test_webhook_payload",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_test_webhook_payload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AbstractWebhookPayload.from_json(data), status_code, headers
    end

    # Get webhook test payload for bounce
    # @return [WebhookBouncePayload]
    def get_test_webhook_payload_bounce()
      data, _status_code, _headers = get_test_webhook_payload_bounce_with_http_info()
      data
    end

    # Get webhook test payload for bounce
    # @return [Array<(WebhookBouncePayload, Integer, Hash)>] WebhookBouncePayload data, response status code and response headers
    def get_test_webhook_payload_bounce_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_test_webhook_payload_bounce ..."}
      end
      # resource path
      local_var_path = "/webhooks/test/email-bounce-payload"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookBouncePayload"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_test_webhook_payload_bounce",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_test_webhook_payload_bounce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookBouncePayload.from_json(data), status_code, headers
    end

    # Get webhook test payload for bounce recipient
    # @return [WebhookBounceRecipientPayload]
    def get_test_webhook_payload_bounce_recipient()
      data, _status_code, _headers = get_test_webhook_payload_bounce_recipient_with_http_info()
      data
    end

    # Get webhook test payload for bounce recipient
    # @return [Array<(WebhookBounceRecipientPayload, Integer, Hash)>] WebhookBounceRecipientPayload data, response status code and response headers
    def get_test_webhook_payload_bounce_recipient_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_test_webhook_payload_bounce_recipient ..."}
      end
      # resource path
      local_var_path = "/webhooks/test/email-bounce-recipient-payload"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookBounceRecipientPayload"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_test_webhook_payload_bounce_recipient",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_test_webhook_payload_bounce_recipient\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookBounceRecipientPayload.from_json(data), status_code, headers
    end

    # Get webhook test payload for delivery status event
    # @return [WebhookDeliveryStatusPayload]
    def get_test_webhook_payload_delivery_status()
      data, _status_code, _headers = get_test_webhook_payload_delivery_status_with_http_info()
      data
    end

    # Get webhook test payload for delivery status event
    # @return [Array<(WebhookDeliveryStatusPayload, Integer, Hash)>] WebhookDeliveryStatusPayload data, response status code and response headers
    def get_test_webhook_payload_delivery_status_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_test_webhook_payload_delivery_status ..."}
      end
      # resource path
      local_var_path = "/webhooks/test/delivery-status-payload"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookDeliveryStatusPayload"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_test_webhook_payload_delivery_status",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_test_webhook_payload_delivery_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookDeliveryStatusPayload.from_json(data), status_code, headers
    end

    # Get webhook test payload for email opened event
    # @return [WebhookEmailOpenedPayload]
    def get_test_webhook_payload_email_opened()
      data, _status_code, _headers = get_test_webhook_payload_email_opened_with_http_info()
      data
    end

    # Get webhook test payload for email opened event
    # @return [Array<(WebhookEmailOpenedPayload, Integer, Hash)>] WebhookEmailOpenedPayload data, response status code and response headers
    def get_test_webhook_payload_email_opened_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_test_webhook_payload_email_opened ..."}
      end
      # resource path
      local_var_path = "/webhooks/test/email-opened-payload"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookEmailOpenedPayload"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_test_webhook_payload_email_opened",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_test_webhook_payload_email_opened\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookEmailOpenedPayload.from_json(data), status_code, headers
    end

    # Get webhook test payload for email opened event
    # @return [WebhookEmailReadPayload]
    def get_test_webhook_payload_email_read()
      data, _status_code, _headers = get_test_webhook_payload_email_read_with_http_info()
      data
    end

    # Get webhook test payload for email opened event
    # @return [Array<(WebhookEmailReadPayload, Integer, Hash)>] WebhookEmailReadPayload data, response status code and response headers
    def get_test_webhook_payload_email_read_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_test_webhook_payload_email_read ..."}
      end
      # resource path
      local_var_path = "/webhooks/test/email-read-payload"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookEmailReadPayload"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_test_webhook_payload_email_read",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_test_webhook_payload_email_read\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookEmailReadPayload.from_json(data), status_code, headers
    end

    # Get example payload for webhook
    # @param webhook_id [String] 
    # @return [AbstractWebhookPayload]
    def get_test_webhook_payload_for_webhook(webhook_id : String)
      data, _status_code, _headers = get_test_webhook_payload_for_webhook_with_http_info(webhook_id)
      data
    end

    # Get example payload for webhook
    # @param webhook_id [String] 
    # @return [Array<(AbstractWebhookPayload, Integer, Hash)>] AbstractWebhookPayload data, response status code and response headers
    def get_test_webhook_payload_for_webhook_with_http_info(webhook_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_test_webhook_payload_for_webhook ..."}
      end
      # verify the required parameter "webhook_id" is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        raise ArgumentError.new("Missing the required parameter 'webhook_id' when calling WebhookControllerApi.get_test_webhook_payload_for_webhook")
      end
      # resource path
      local_var_path = "/webhooks/{webhookId}/example".sub("{" + "webhookId" + "}", URI.encode(webhook_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AbstractWebhookPayload"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_test_webhook_payload_for_webhook",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_test_webhook_payload_for_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AbstractWebhookPayload.from_json(data), status_code, headers
    end

    # Get webhook test payload for new attachment event
    # @return [WebhookNewAttachmentPayload]
    def get_test_webhook_payload_new_attachment()
      data, _status_code, _headers = get_test_webhook_payload_new_attachment_with_http_info()
      data
    end

    # Get webhook test payload for new attachment event
    # @return [Array<(WebhookNewAttachmentPayload, Integer, Hash)>] WebhookNewAttachmentPayload data, response status code and response headers
    def get_test_webhook_payload_new_attachment_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_test_webhook_payload_new_attachment ..."}
      end
      # resource path
      local_var_path = "/webhooks/test/new-attachment-payload"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookNewAttachmentPayload"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_test_webhook_payload_new_attachment",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_test_webhook_payload_new_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookNewAttachmentPayload.from_json(data), status_code, headers
    end

    # Get webhook test payload for new contact event
    # @return [WebhookNewContactPayload]
    def get_test_webhook_payload_new_contact()
      data, _status_code, _headers = get_test_webhook_payload_new_contact_with_http_info()
      data
    end

    # Get webhook test payload for new contact event
    # @return [Array<(WebhookNewContactPayload, Integer, Hash)>] WebhookNewContactPayload data, response status code and response headers
    def get_test_webhook_payload_new_contact_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_test_webhook_payload_new_contact ..."}
      end
      # resource path
      local_var_path = "/webhooks/test/new-contact-payload"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookNewContactPayload"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_test_webhook_payload_new_contact",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_test_webhook_payload_new_contact\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookNewContactPayload.from_json(data), status_code, headers
    end

    # Get webhook test payload for new email event
    # @return [WebhookNewEmailPayload]
    def get_test_webhook_payload_new_email()
      data, _status_code, _headers = get_test_webhook_payload_new_email_with_http_info()
      data
    end

    # Get webhook test payload for new email event
    # @return [Array<(WebhookNewEmailPayload, Integer, Hash)>] WebhookNewEmailPayload data, response status code and response headers
    def get_test_webhook_payload_new_email_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_test_webhook_payload_new_email ..."}
      end
      # resource path
      local_var_path = "/webhooks/test/new-email-payload"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookNewEmailPayload"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_test_webhook_payload_new_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_test_webhook_payload_new_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookNewEmailPayload.from_json(data), status_code, headers
    end

    # Get webhook test payload for new sms event
    # @return [WebhookNewSmsPayload]
    def get_test_webhook_payload_new_sms()
      data, _status_code, _headers = get_test_webhook_payload_new_sms_with_http_info()
      data
    end

    # Get webhook test payload for new sms event
    # @return [Array<(WebhookNewSmsPayload, Integer, Hash)>] WebhookNewSmsPayload data, response status code and response headers
    def get_test_webhook_payload_new_sms_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_test_webhook_payload_new_sms ..."}
      end
      # resource path
      local_var_path = "/webhooks/test/new-sms-payload"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookNewSmsPayload"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_test_webhook_payload_new_sms",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_test_webhook_payload_new_sms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookNewSmsPayload.from_json(data), status_code, headers
    end

    # Get a webhook
    # @param webhook_id [String] 
    # @return [WebhookDto]
    def get_webhook(webhook_id : String)
      data, _status_code, _headers = get_webhook_with_http_info(webhook_id)
      data
    end

    # Get a webhook
    # @param webhook_id [String] 
    # @return [Array<(WebhookDto, Integer, Hash)>] WebhookDto data, response status code and response headers
    def get_webhook_with_http_info(webhook_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_webhook ..."}
      end
      # verify the required parameter "webhook_id" is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        raise ArgumentError.new("Missing the required parameter 'webhook_id' when calling WebhookControllerApi.get_webhook")
      end
      # resource path
      local_var_path = "/webhooks/{webhookId}".sub("{" + "webhookId" + "}", URI.encode(webhook_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_webhook",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookDto.from_json(data), status_code, headers
    end

    # Get a webhook result for a webhook
    # @param webhook_result_id [String] Webhook Result ID
    # @return [WebhookResultDto]
    def get_webhook_result(webhook_result_id : String)
      data, _status_code, _headers = get_webhook_result_with_http_info(webhook_result_id)
      data
    end

    # Get a webhook result for a webhook
    # @param webhook_result_id [String] Webhook Result ID
    # @return [Array<(WebhookResultDto, Integer, Hash)>] WebhookResultDto data, response status code and response headers
    def get_webhook_result_with_http_info(webhook_result_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_webhook_result ..."}
      end
      # verify the required parameter "webhook_result_id" is set
      if @api_client.config.client_side_validation && webhook_result_id.nil?
        raise ArgumentError.new("Missing the required parameter 'webhook_result_id' when calling WebhookControllerApi.get_webhook_result")
      end
      # resource path
      local_var_path = "/webhooks/results/{webhookResultId}".sub("{" + "webhookResultId" + "}", URI.encode(webhook_result_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookResultDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_webhook_result",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_webhook_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookResultDto.from_json(data), status_code, headers
    end

    # Get a webhook results for a webhook
    # @param webhook_id [String] ID of webhook to get results for
    # @return [PageWebhookResult]
    def get_webhook_results(webhook_id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?, unseen_only : Bool?)
      data, _status_code, _headers = get_webhook_results_with_http_info(webhook_id, page, size, sort, search_filter, since, before, unseen_only)
      data
    end

    # Get a webhook results for a webhook
    # @param webhook_id [String] ID of webhook to get results for
    # @return [Array<(PageWebhookResult, Integer, Hash)>] PageWebhookResult data, response status code and response headers
    def get_webhook_results_with_http_info(webhook_id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?, unseen_only : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_webhook_results ..."}
      end
      # verify the required parameter "webhook_id" is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        raise ArgumentError.new("Missing the required parameter 'webhook_id' when calling WebhookControllerApi.get_webhook_results")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/webhooks/{webhookId}/results".sub("{" + "webhookId" + "}", URI.encode(webhook_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before
      query_params[:"unseenOnly"] = unseen_only

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageWebhookResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_webhook_results",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_webhook_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageWebhookResult.from_json(data), status_code, headers
    end

    # Get count of unseen webhook results with error status
    # @return [UnseenErrorCountDto]
    def get_webhook_results_unseen_error_count()
      data, _status_code, _headers = get_webhook_results_unseen_error_count_with_http_info()
      data
    end

    # Get count of unseen webhook results with error status
    # @return [Array<(UnseenErrorCountDto, Integer, Hash)>] UnseenErrorCountDto data, response status code and response headers
    def get_webhook_results_unseen_error_count_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_webhook_results_unseen_error_count ..."}
      end
      # resource path
      local_var_path = "/webhooks/results/unseen-count"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "UnseenErrorCountDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_webhook_results_unseen_error_count",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_webhook_results_unseen_error_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return UnseenErrorCountDto.from_json(data), status_code, headers
    end

    # Get all webhooks for an Inbox
    # @param inbox_id [String] 
    # @return [Array(WebhookDto)]
    def get_webhooks(inbox_id : String)
      data, _status_code, _headers = get_webhooks_with_http_info(inbox_id)
      data
    end

    # Get all webhooks for an Inbox
    # @param inbox_id [String] 
    # @return [Array<(Array(WebhookDto), Integer, Hash)>] Array(WebhookDto) data, response status code and response headers
    def get_webhooks_with_http_info(inbox_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.get_webhooks ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling WebhookControllerApi.get_webhooks")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/webhooks".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(WebhookDto)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.get_webhooks",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#get_webhooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(WebhookDto).from_json(data), status_code, headers
    end

    # Get a webhook result and try to resend the original webhook payload
    # Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
    # @param webhook_result_id [String] Webhook Result ID
    # @return [WebhookRedriveResult]
    def redrive_webhook_result(webhook_result_id : String)
      data, _status_code, _headers = redrive_webhook_result_with_http_info(webhook_result_id)
      data
    end

    # Get a webhook result and try to resend the original webhook payload
    # Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
    # @param webhook_result_id [String] Webhook Result ID
    # @return [Array<(WebhookRedriveResult, Integer, Hash)>] WebhookRedriveResult data, response status code and response headers
    def redrive_webhook_result_with_http_info(webhook_result_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.redrive_webhook_result ..."}
      end
      # verify the required parameter "webhook_result_id" is set
      if @api_client.config.client_side_validation && webhook_result_id.nil?
        raise ArgumentError.new("Missing the required parameter 'webhook_result_id' when calling WebhookControllerApi.redrive_webhook_result")
      end
      # resource path
      local_var_path = "/webhooks/results/{webhookResultId}/redrive".sub("{" + "webhookResultId" + "}", URI.encode(webhook_result_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookRedriveResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WebhookControllerApi.redrive_webhook_result",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#redrive_webhook_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookRedriveResult.from_json(data), status_code, headers
    end

    # Send webhook test data
    # @param webhook_id [String] 
    # @return [WebhookTestResult]
    def send_test_data(webhook_id : String)
      data, _status_code, _headers = send_test_data_with_http_info(webhook_id)
      data
    end

    # Send webhook test data
    # @param webhook_id [String] 
    # @return [Array<(WebhookTestResult, Integer, Hash)>] WebhookTestResult data, response status code and response headers
    def send_test_data_with_http_info(webhook_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.send_test_data ..."}
      end
      # verify the required parameter "webhook_id" is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        raise ArgumentError.new("Missing the required parameter 'webhook_id' when calling WebhookControllerApi.send_test_data")
      end
      # resource path
      local_var_path = "/webhooks/{webhookId}/test".sub("{" + "webhookId" + "}", URI.encode(webhook_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "WebhookTestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WebhookControllerApi.send_test_data",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#send_test_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookTestResult.from_json(data), status_code, headers
    end

    # Update a webhook request headers
    # @param webhook_id [String] 
    # @param webhook_headers [WebhookHeaders] 
    # @return [WebhookDto]
    def update_webhook_headers(webhook_id : String, webhook_headers : WebhookHeaders)
      data, _status_code, _headers = update_webhook_headers_with_http_info(webhook_id, webhook_headers)
      data
    end

    # Update a webhook request headers
    # @param webhook_id [String] 
    # @param webhook_headers [WebhookHeaders] 
    # @return [Array<(WebhookDto, Integer, Hash)>] WebhookDto data, response status code and response headers
    def update_webhook_headers_with_http_info(webhook_id : String, webhook_headers : WebhookHeaders)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.update_webhook_headers ..."}
      end
      # verify the required parameter "webhook_id" is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        raise ArgumentError.new("Missing the required parameter 'webhook_id' when calling WebhookControllerApi.update_webhook_headers")
      end
      # verify the required parameter "webhook_headers" is set
      if @api_client.config.client_side_validation && webhook_headers.nil?
        raise ArgumentError.new("Missing the required parameter 'webhook_headers' when calling WebhookControllerApi.update_webhook_headers")
      end
      # resource path
      local_var_path = "/webhooks/{webhookId}/headers".sub("{" + "webhookId" + "}", URI.encode(webhook_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = webhook_headers.to_json

      # return_type
      return_type = "WebhookDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"WebhookControllerApi.update_webhook_headers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#update_webhook_headers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return WebhookDto.from_json(data), status_code, headers
    end

    # Verify a webhook payload signature
    # Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
    # @param verify_webhook_signature_options [VerifyWebhookSignatureOptions] 
    # @return [VerifyWebhookSignatureResults]
    def verify_webhook_signature(verify_webhook_signature_options : VerifyWebhookSignatureOptions)
      data, _status_code, _headers = verify_webhook_signature_with_http_info(verify_webhook_signature_options)
      data
    end

    # Verify a webhook payload signature
    # Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
    # @param verify_webhook_signature_options [VerifyWebhookSignatureOptions] 
    # @return [Array<(VerifyWebhookSignatureResults, Integer, Hash)>] VerifyWebhookSignatureResults data, response status code and response headers
    def verify_webhook_signature_with_http_info(verify_webhook_signature_options : VerifyWebhookSignatureOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.verify_webhook_signature ..."}
      end
      # verify the required parameter "verify_webhook_signature_options" is set
      if @api_client.config.client_side_validation && verify_webhook_signature_options.nil?
        raise ArgumentError.new("Missing the required parameter 'verify_webhook_signature_options' when calling WebhookControllerApi.verify_webhook_signature")
      end
      # resource path
      local_var_path = "/webhooks/verify"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = verify_webhook_signature_options.to_json

      # return_type
      return_type = "VerifyWebhookSignatureResults"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"WebhookControllerApi.verify_webhook_signature",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#verify_webhook_signature\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return VerifyWebhookSignatureResults.from_json(data), status_code, headers
    end

    # Wait for webhook results for a webhook
    # @param webhook_id [String] ID of webhook to get results for
    # @param expected_count [Int32] Expected result count
    # @param timeout [Int32] Max time to wait in milliseconds
    # @return [Array(WebhookResultDto)]
    def wait_for_webhook_results(webhook_id : String, expected_count : Int32, timeout : Int32)
      data, _status_code, _headers = wait_for_webhook_results_with_http_info(webhook_id, expected_count, timeout)
      data
    end

    # Wait for webhook results for a webhook
    # @param webhook_id [String] ID of webhook to get results for
    # @param expected_count [Int32] Expected result count
    # @param timeout [Int32] Max time to wait in milliseconds
    # @return [Array<(Array(WebhookResultDto), Integer, Hash)>] Array(WebhookResultDto) data, response status code and response headers
    def wait_for_webhook_results_with_http_info(webhook_id : String, expected_count : Int32, timeout : Int32)
      if @api_client.config.debugging
        Log.debug {"Calling API: WebhookControllerApi.wait_for_webhook_results ..."}
      end
      # verify the required parameter "webhook_id" is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        raise ArgumentError.new("Missing the required parameter 'webhook_id' when calling WebhookControllerApi.wait_for_webhook_results")
      end
      # verify the required parameter "expected_count" is set
      if @api_client.config.client_side_validation && expected_count.nil?
        raise ArgumentError.new("Missing the required parameter 'expected_count' when calling WebhookControllerApi.wait_for_webhook_results")
      end
      if @api_client.config.client_side_validation && expected_count > 100
        raise ArgumentError.new("invalid value for \"expected_count\" when calling WebhookControllerApi.wait_for_webhook_results, must be smaller than or equal to 100.")
      end

      # verify the required parameter "timeout" is set
      if @api_client.config.client_side_validation && timeout.nil?
        raise ArgumentError.new("Missing the required parameter 'timeout' when calling WebhookControllerApi.wait_for_webhook_results")
      end
      if @api_client.config.client_side_validation && timeout > 300000
        raise ArgumentError.new("invalid value for \"timeout\" when calling WebhookControllerApi.wait_for_webhook_results, must be smaller than or equal to 300000.")
      end

      if @api_client.config.client_side_validation && timeout < 1000
        raise ArgumentError.new("invalid value for \"timeout\" when calling WebhookControllerApi.wait_for_webhook_results, must be greater than or equal to 1000.")
      end

      # resource path
      local_var_path = "/webhooks/{webhookId}/wait".sub("{" + "webhookId" + "}", URI.encode(webhook_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"expectedCount"] = expected_count
      query_params[:"timeout"] = timeout

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(WebhookResultDto)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"WebhookControllerApi.wait_for_webhook_results",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: WebhookControllerApi#wait_for_webhook_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(WebhookResultDto).from_json(data), status_code, headers
    end
  end
end
