# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class SentEmailsControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete all sent email receipts
    # @return [nil]
    def delete_all_sent_emails()
      delete_all_sent_emails_with_http_info()
      nil
    end

    # Delete all sent email receipts
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_all_sent_emails_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: SentEmailsControllerApi.delete_all_sent_emails ..."}
      end
      # resource path
      local_var_path = "/sent"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"SentEmailsControllerApi.delete_all_sent_emails",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SentEmailsControllerApi#delete_all_sent_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete sent email receipt
    # @param id [String] 
    # @return [nil]
    def delete_sent_email(id : String)
      delete_sent_email_with_http_info(id)
      nil
    end

    # Delete sent email receipt
    # @param id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_sent_email_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: SentEmailsControllerApi.delete_sent_email ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling SentEmailsControllerApi.delete_sent_email")
      end
      # resource path
      local_var_path = "/sent/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"SentEmailsControllerApi.delete_sent_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SentEmailsControllerApi#delete_sent_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get all sent email tracking pixels in paginated form
    # @return [PageTrackingPixelProjection]
    def get_all_sent_tracking_pixels(page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_all_sent_tracking_pixels_with_http_info(page, size, sort, search_filter, since, before)
      data
    end

    # Get all sent email tracking pixels in paginated form
    # @return [Array<(PageTrackingPixelProjection, Integer, Hash)>] PageTrackingPixelProjection data, response status code and response headers
    def get_all_sent_tracking_pixels_with_http_info(page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SentEmailsControllerApi.get_all_sent_tracking_pixels ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/sent/tracking-pixels"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageTrackingPixelProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SentEmailsControllerApi.get_all_sent_tracking_pixels",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SentEmailsControllerApi#get_all_sent_tracking_pixels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageTrackingPixelProjection.from_json(data), status_code, headers
    end

    # Get raw sent email string. Returns unparsed raw SMTP message with headers and body.
    # Returns a raw, unparsed, and unprocessed sent email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawSentEmailJson endpoint
    # @param email_id [String] ID of email
    # @return [String]
    def get_raw_sent_email_contents(email_id : String)
      data, _status_code, _headers = get_raw_sent_email_contents_with_http_info(email_id)
      data
    end

    # Get raw sent email string. Returns unparsed raw SMTP message with headers and body.
    # Returns a raw, unparsed, and unprocessed sent email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawSentEmailJson endpoint
    # @param email_id [String] ID of email
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_raw_sent_email_contents_with_http_info(email_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: SentEmailsControllerApi.get_raw_sent_email_contents ..."}
      end
      # verify the required parameter "email_id" is set
      if @api_client.config.client_side_validation && email_id.nil?
        raise ArgumentError.new("Missing the required parameter 'email_id' when calling SentEmailsControllerApi.get_raw_sent_email_contents")
      end
      # resource path
      local_var_path = "/sent/{emailId}/raw".sub("{" + "emailId" + "}", URI.encode(email_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["text/plain"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SentEmailsControllerApi.get_raw_sent_email_contents",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SentEmailsControllerApi#get_raw_sent_email_contents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Get raw sent email in JSON. Unparsed SMTP message in JSON wrapper format.
    # Returns a raw, unparsed, and unprocessed sent email wrapped in a JSON response object for easier handling when compared with the getRawSentEmail text/plain response
    # @param email_id [String] ID of email
    # @return [RawEmailJson]
    def get_raw_sent_email_json(email_id : String)
      data, _status_code, _headers = get_raw_sent_email_json_with_http_info(email_id)
      data
    end

    # Get raw sent email in JSON. Unparsed SMTP message in JSON wrapper format.
    # Returns a raw, unparsed, and unprocessed sent email wrapped in a JSON response object for easier handling when compared with the getRawSentEmail text/plain response
    # @param email_id [String] ID of email
    # @return [Array<(RawEmailJson, Integer, Hash)>] RawEmailJson data, response status code and response headers
    def get_raw_sent_email_json_with_http_info(email_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: SentEmailsControllerApi.get_raw_sent_email_json ..."}
      end
      # verify the required parameter "email_id" is set
      if @api_client.config.client_side_validation && email_id.nil?
        raise ArgumentError.new("Missing the required parameter 'email_id' when calling SentEmailsControllerApi.get_raw_sent_email_json")
      end
      # resource path
      local_var_path = "/sent/{emailId}/raw/json".sub("{" + "emailId" + "}", URI.encode(email_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "RawEmailJson"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SentEmailsControllerApi.get_raw_sent_email_json",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SentEmailsControllerApi#get_raw_sent_email_json\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RawEmailJson.from_json(data), status_code, headers
    end

    # Get sent email receipt
    # @param id [String] 
    # @return [SentEmailDto]
    def get_sent_email(id : String)
      data, _status_code, _headers = get_sent_email_with_http_info(id)
      data
    end

    # Get sent email receipt
    # @param id [String] 
    # @return [Array<(SentEmailDto, Integer, Hash)>] SentEmailDto data, response status code and response headers
    def get_sent_email_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: SentEmailsControllerApi.get_sent_email ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling SentEmailsControllerApi.get_sent_email")
      end
      # resource path
      local_var_path = "/sent/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "SentEmailDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SentEmailsControllerApi.get_sent_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SentEmailsControllerApi#get_sent_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SentEmailDto.from_json(data), status_code, headers
    end

    # Get sent email HTML content
    # @param id [String] 
    # @return [String]
    def get_sent_email_html_content(id : String)
      data, _status_code, _headers = get_sent_email_html_content_with_http_info(id)
      data
    end

    # Get sent email HTML content
    # @param id [String] 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_sent_email_html_content_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: SentEmailsControllerApi.get_sent_email_html_content ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling SentEmailsControllerApi.get_sent_email_html_content")
      end
      # resource path
      local_var_path = "/sent/{id}/html".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["text/html"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SentEmailsControllerApi.get_sent_email_html_content",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SentEmailsControllerApi#get_sent_email_html_content\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Get sent email URL for viewing in browser or downloading
    # Get a list of URLs for sent email content as text/html or raw SMTP message for viewing the message in a browser.
    # @param id [String] 
    # @return [EmailPreviewUrls]
    def get_sent_email_preview_urls(id : String)
      data, _status_code, _headers = get_sent_email_preview_urls_with_http_info(id)
      data
    end

    # Get sent email URL for viewing in browser or downloading
    # Get a list of URLs for sent email content as text/html or raw SMTP message for viewing the message in a browser.
    # @param id [String] 
    # @return [Array<(EmailPreviewUrls, Integer, Hash)>] EmailPreviewUrls data, response status code and response headers
    def get_sent_email_preview_urls_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: SentEmailsControllerApi.get_sent_email_preview_urls ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling SentEmailsControllerApi.get_sent_email_preview_urls")
      end
      # resource path
      local_var_path = "/sent/{id}/urls".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "EmailPreviewUrls"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SentEmailsControllerApi.get_sent_email_preview_urls",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SentEmailsControllerApi#get_sent_email_preview_urls\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return EmailPreviewUrls.from_json(data), status_code, headers
    end

    # Get all tracking pixels for a sent email in paginated form
    # @param id [String] 
    # @return [PageTrackingPixelProjection]
    def get_sent_email_tracking_pixels(id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_sent_email_tracking_pixels_with_http_info(id, page, size, sort, search_filter, since, before)
      data
    end

    # Get all tracking pixels for a sent email in paginated form
    # @param id [String] 
    # @return [Array<(PageTrackingPixelProjection, Integer, Hash)>] PageTrackingPixelProjection data, response status code and response headers
    def get_sent_email_tracking_pixels_with_http_info(id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SentEmailsControllerApi.get_sent_email_tracking_pixels ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling SentEmailsControllerApi.get_sent_email_tracking_pixels")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/sent/{id}/tracking-pixels".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageTrackingPixelProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SentEmailsControllerApi.get_sent_email_tracking_pixels",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SentEmailsControllerApi#get_sent_email_tracking_pixels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageTrackingPixelProjection.from_json(data), status_code, headers
    end

    # Get all sent emails in paginated form
    # @return [PageSentEmailProjection]
    def get_sent_emails(inbox_id : String?, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_sent_emails_with_http_info(inbox_id, page, size, sort, search_filter, since, before)
      data
    end

    # Get all sent emails in paginated form
    # @return [Array<(PageSentEmailProjection, Integer, Hash)>] PageSentEmailProjection data, response status code and response headers
    def get_sent_emails_with_http_info(inbox_id : String?, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SentEmailsControllerApi.get_sent_emails ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/sent"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageSentEmailProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SentEmailsControllerApi.get_sent_emails",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SentEmailsControllerApi#get_sent_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageSentEmailProjection.from_json(data), status_code, headers
    end

    # Get all sent organization emails in paginated form
    # @return [PageSentEmailProjection]
    def get_sent_organization_emails(inbox_id : String?, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_sent_organization_emails_with_http_info(inbox_id, page, size, sort, search_filter, since, before)
      data
    end

    # Get all sent organization emails in paginated form
    # @return [Array<(PageSentEmailProjection, Integer, Hash)>] PageSentEmailProjection data, response status code and response headers
    def get_sent_organization_emails_with_http_info(inbox_id : String?, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: SentEmailsControllerApi.get_sent_organization_emails ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/sent/organization"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageSentEmailProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"SentEmailsControllerApi.get_sent_organization_emails",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: SentEmailsControllerApi#get_sent_organization_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageSentEmailProjection.from_json(data), status_code, headers
    end
  end
end
