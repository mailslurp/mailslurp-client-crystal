# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class InboxControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either `SMTP` or `HTTP` inboxes.
    # Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
    # @return [InboxDto]
    def create_inbox(email_address : String?, tags : Array(String)?, name : String?, description : String?, use_domain_pool : Bool?, favourite : Bool?, expires_at : Time?, expires_in : Int64?, allow_team_access : Bool?, inbox_type : String?, virtual_inbox : Bool?)
      data, _status_code, _headers = create_inbox_with_http_info(email_address, tags, name, description, use_domain_pool, favourite, expires_at, expires_in, allow_team_access, inbox_type, virtual_inbox)
      data
    end

    # Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either &#x60;SMTP&#x60; or &#x60;HTTP&#x60; inboxes.
    # Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
    # @return [Array<(InboxDto, Integer, Hash)>] InboxDto data, response status code and response headers
    def create_inbox_with_http_info(email_address : String?, tags : Array(String)?, name : String?, description : String?, use_domain_pool : Bool?, favourite : Bool?, expires_at : Time?, expires_in : Int64?, allow_team_access : Bool?, inbox_type : String?, virtual_inbox : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.create_inbox ..."}
      end
      allowable_values = ["HTTP_INBOX", "SMTP_INBOX"]
      if @api_client.config.client_side_validation && inbox_type && !allowable_values.includes?(inbox_type)
        raise ArgumentError.new("invalid value for \"inbox_type\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"emailAddress"] = email_address
      query_params[:"tags"] = @api_client.build_collection_param(tags, :multi)
      query_params[:"name"] = name
      query_params[:"description"] = description
      query_params[:"useDomainPool"] = use_domain_pool
      query_params[:"favourite"] = favourite
      query_params[:"expiresAt"] = expires_at
      query_params[:"expiresIn"] = expires_in
      query_params[:"allowTeamAccess"] = allow_team_access
      query_params[:"inboxType"] = inbox_type
      query_params[:"virtualInbox"] = virtual_inbox

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "InboxDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.create_inbox",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#create_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxDto.from_json(data), status_code, headers
    end

    # Create an inbox ruleset
    # Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
    # @param inbox_id [String] inboxId
    # @param create_inbox_ruleset_options [CreateInboxRulesetOptions] 
    # @return [InboxRulesetDto]
    def create_inbox_ruleset(inbox_id : String, create_inbox_ruleset_options : CreateInboxRulesetOptions)
      data, _status_code, _headers = create_inbox_ruleset_with_http_info(inbox_id, create_inbox_ruleset_options)
      data
    end

    # Create an inbox ruleset
    # Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
    # @param inbox_id [String] inboxId
    # @param create_inbox_ruleset_options [CreateInboxRulesetOptions] 
    # @return [Array<(InboxRulesetDto, Integer, Hash)>] InboxRulesetDto data, response status code and response headers
    def create_inbox_ruleset_with_http_info(inbox_id : String, create_inbox_ruleset_options : CreateInboxRulesetOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.create_inbox_ruleset ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.create_inbox_ruleset")
      end
      # verify the required parameter "create_inbox_ruleset_options" is set
      if @api_client.config.client_side_validation && create_inbox_ruleset_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_inbox_ruleset_options' when calling InboxControllerApi.create_inbox_ruleset")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/rulesets".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_inbox_ruleset_options.to_json

      # return_type
      return_type = "InboxRulesetDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.create_inbox_ruleset",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#create_inbox_ruleset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxRulesetDto.from_json(data), status_code, headers
    end

    # Create an inbox with default options. Uses MailSlurp domain pool address and is private.
    # @return [InboxDto]
    def create_inbox_with_defaults()
      data, _status_code, _headers = create_inbox_with_defaults_with_http_info()
      data
    end

    # Create an inbox with default options. Uses MailSlurp domain pool address and is private.
    # @return [Array<(InboxDto, Integer, Hash)>] InboxDto data, response status code and response headers
    def create_inbox_with_defaults_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.create_inbox_with_defaults ..."}
      end
      # resource path
      local_var_path = "/inboxes/withDefaults"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "InboxDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.create_inbox_with_defaults",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#create_inbox_with_defaults\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxDto.from_json(data), status_code, headers
    end

    # Create an inbox with options. Extended options for inbox creation.
    # Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
    # @param create_inbox_dto [CreateInboxDto] 
    # @return [InboxDto]
    def create_inbox_with_options(create_inbox_dto : CreateInboxDto)
      data, _status_code, _headers = create_inbox_with_options_with_http_info(create_inbox_dto)
      data
    end

    # Create an inbox with options. Extended options for inbox creation.
    # Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
    # @param create_inbox_dto [CreateInboxDto] 
    # @return [Array<(InboxDto, Integer, Hash)>] InboxDto data, response status code and response headers
    def create_inbox_with_options_with_http_info(create_inbox_dto : CreateInboxDto)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.create_inbox_with_options ..."}
      end
      # verify the required parameter "create_inbox_dto" is set
      if @api_client.config.client_side_validation && create_inbox_dto.nil?
        raise ArgumentError.new("Missing the required parameter 'create_inbox_dto' when calling InboxControllerApi.create_inbox_with_options")
      end
      # resource path
      local_var_path = "/inboxes/withOptions"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_inbox_dto.to_json

      # return_type
      return_type = "InboxDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.create_inbox_with_options",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#create_inbox_with_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxDto.from_json(data), status_code, headers
    end

    # Delete all emails in a given inboxes.
    # Deletes all emails in an inbox. Be careful as emails cannot be recovered
    # @param inbox_id [String] 
    # @return [nil]
    def delete_all_inbox_emails(inbox_id : String)
      delete_all_inbox_emails_with_http_info(inbox_id)
      nil
    end

    # Delete all emails in a given inboxes.
    # Deletes all emails in an inbox. Be careful as emails cannot be recovered
    # @param inbox_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_all_inbox_emails_with_http_info(inbox_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.delete_all_inbox_emails ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.delete_all_inbox_emails")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/deleteAllInboxEmails".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"InboxControllerApi.delete_all_inbox_emails",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#delete_all_inbox_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete all inboxes
    # Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
    # @return [nil]
    def delete_all_inboxes()
      delete_all_inboxes_with_http_info()
      nil
    end

    # Delete all inboxes
    # Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_all_inboxes_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.delete_all_inboxes ..."}
      end
      # resource path
      local_var_path = "/inboxes"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"InboxControllerApi.delete_all_inboxes",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#delete_all_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete inbox
    # Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
    # @param inbox_id [String] 
    # @return [nil]
    def delete_inbox(inbox_id : String)
      delete_inbox_with_http_info(inbox_id)
      nil
    end

    # Delete inbox
    # Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
    # @param inbox_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_inbox_with_http_info(inbox_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.delete_inbox ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.delete_inbox")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"InboxControllerApi.delete_inbox",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#delete_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Does inbox exist
    # Check if inboxes exist by email address. Useful if you are sending emails to mailslurp addresses
    # @param email_address [String] Email address
    # @return [InboxExistsDto]
    def does_inbox_exist(email_address : String)
      data, _status_code, _headers = does_inbox_exist_with_http_info(email_address)
      data
    end

    # Does inbox exist
    # Check if inboxes exist by email address. Useful if you are sending emails to mailslurp addresses
    # @param email_address [String] Email address
    # @return [Array<(InboxExistsDto, Integer, Hash)>] InboxExistsDto data, response status code and response headers
    def does_inbox_exist_with_http_info(email_address : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.does_inbox_exist ..."}
      end
      # verify the required parameter "email_address" is set
      if @api_client.config.client_side_validation && email_address.nil?
        raise ArgumentError.new("Missing the required parameter 'email_address' when calling InboxControllerApi.does_inbox_exist")
      end
      # resource path
      local_var_path = "/inboxes/exists"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"emailAddress"] = email_address

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "InboxExistsDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.does_inbox_exist",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#does_inbox_exist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxExistsDto.from_json(data), status_code, headers
    end

    # Remove expired inboxes
    # Remove any expired inboxes for your account (instead of waiting for scheduled removal on server)
    # @return [FlushExpiredInboxesResult]
    def flush_expired(before : Time?)
      data, _status_code, _headers = flush_expired_with_http_info(before)
      data
    end

    # Remove expired inboxes
    # Remove any expired inboxes for your account (instead of waiting for scheduled removal on server)
    # @return [Array<(FlushExpiredInboxesResult, Integer, Hash)>] FlushExpiredInboxesResult data, response status code and response headers
    def flush_expired_with_http_info(before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.flush_expired ..."}
      end
      # resource path
      local_var_path = "/inboxes/expired"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "FlushExpiredInboxesResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"InboxControllerApi.flush_expired",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#flush_expired\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return FlushExpiredInboxesResult.from_json(data), status_code, headers
    end

    # List All Inboxes Paginated
    # List inboxes in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
    # @return [PageInboxProjection]
    def get_all_inboxes(page : Int32?, size : Int32?, sort : String?, favourite : Bool?, search : String?, tag : String?, team_access : Bool?, since : Time?, before : Time?)
      data, _status_code, _headers = get_all_inboxes_with_http_info(page, size, sort, favourite, search, tag, team_access, since, before)
      data
    end

    # List All Inboxes Paginated
    # List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
    # @return [Array<(PageInboxProjection, Integer, Hash)>] PageInboxProjection data, response status code and response headers
    def get_all_inboxes_with_http_info(page : Int32?, size : Int32?, sort : String?, favourite : Bool?, search : String?, tag : String?, team_access : Bool?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_all_inboxes ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/paginated"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"favourite"] = favourite
      query_params[:"search"] = search
      query_params[:"tag"] = tag
      query_params[:"teamAccess"] = team_access
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageInboxProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_all_inboxes",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_all_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageInboxProjection.from_json(data), status_code, headers
    end

    # Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
    # List emails that an inbox has received. Only emails that are sent to the inbox's email address will appear in the inbox. It may take several seconds for any email you send to an inbox's email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the `minCount` parameter. The server will retry the inbox database until the `minCount` is satisfied or the `retryTimeout` is reached
    # @param inbox_id [String] Id of inbox that emails belongs to
    # @return [Array(EmailPreview)]
    def get_emails(inbox_id : String, size : Int32?, limit : Int32?, sort : String?, retry_timeout : Int64?, delay_timeout : Int64?, min_count : Int64?, unread_only : Bool?, before : Time?, since : Time?)
      data, _status_code, _headers = get_emails_with_http_info(inbox_id, size, limit, sort, retry_timeout, delay_timeout, min_count, unread_only, before, since)
      data
    end

    # Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
    # List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
    # @param inbox_id [String] Id of inbox that emails belongs to
    # @return [Array<(Array(EmailPreview), Integer, Hash)>] Array(EmailPreview) data, response status code and response headers
    def get_emails_with_http_info(inbox_id : String, size : Int32?, limit : Int32?, sort : String?, retry_timeout : Int64?, delay_timeout : Int64?, min_count : Int64?, unread_only : Bool?, before : Time?, since : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_emails ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.get_emails")
      end
      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling InboxControllerApi.get_emails, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit > 100
        raise ArgumentError.new("invalid value for \"limit\" when calling InboxControllerApi.get_emails, must be smaller than or equal to 100.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/emails".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"size"] = size
      query_params[:"limit"] = limit
      query_params[:"sort"] = sort
      query_params[:"retryTimeout"] = retry_timeout
      query_params[:"delayTimeout"] = delay_timeout
      query_params[:"minCount"] = min_count
      query_params[:"unreadOnly"] = unread_only
      query_params[:"before"] = before
      query_params[:"since"] = since

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(EmailPreview)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_emails",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(EmailPreview).from_json(data), status_code, headers
    end

    # Get IMAP and SMTP access usernames and passwords
    # @return [ImapSmtpAccessDetails]
    def get_imap_smtp_access(inbox_id : String?)
      data, _status_code, _headers = get_imap_smtp_access_with_http_info(inbox_id)
      data
    end

    # Get IMAP and SMTP access usernames and passwords
    # @return [Array<(ImapSmtpAccessDetails, Integer, Hash)>] ImapSmtpAccessDetails data, response status code and response headers
    def get_imap_smtp_access_with_http_info(inbox_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_imap_smtp_access ..."}
      end
      # resource path
      local_var_path = "/inboxes/imap-smtp-access"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ImapSmtpAccessDetails"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_imap_smtp_access",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_imap_smtp_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ImapSmtpAccessDetails.from_json(data), status_code, headers
    end

    # Get Inbox. Returns properties of an inbox.
    # Returns an inbox's properties, including its email address and ID.
    # @param inbox_id [String] 
    # @return [InboxDto]
    def get_inbox(inbox_id : String)
      data, _status_code, _headers = get_inbox_with_http_info(inbox_id)
      data
    end

    # Get Inbox. Returns properties of an inbox.
    # Returns an inbox&#39;s properties, including its email address and ID.
    # @param inbox_id [String] 
    # @return [Array<(InboxDto, Integer, Hash)>] InboxDto data, response status code and response headers
    def get_inbox_with_http_info(inbox_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.get_inbox")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "InboxDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxDto.from_json(data), status_code, headers
    end

    # Search for an inbox with the provided email address
    # Get a inbox result by email address
    # @param email_address [String] 
    # @return [InboxByEmailAddressResult]
    def get_inbox_by_email_address(email_address : String)
      data, _status_code, _headers = get_inbox_by_email_address_with_http_info(email_address)
      data
    end

    # Search for an inbox with the provided email address
    # Get a inbox result by email address
    # @param email_address [String] 
    # @return [Array<(InboxByEmailAddressResult, Integer, Hash)>] InboxByEmailAddressResult data, response status code and response headers
    def get_inbox_by_email_address_with_http_info(email_address : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_by_email_address ..."}
      end
      # verify the required parameter "email_address" is set
      if @api_client.config.client_side_validation && email_address.nil?
        raise ArgumentError.new("Missing the required parameter 'email_address' when calling InboxControllerApi.get_inbox_by_email_address")
      end
      # resource path
      local_var_path = "/inboxes/byEmailAddress"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"emailAddress"] = email_address

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "InboxByEmailAddressResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_by_email_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_by_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxByEmailAddressResult.from_json(data), status_code, headers
    end

    # Search for an inbox with the given name
    # Get a inbox result by name
    # @param name [String] 
    # @return [InboxByNameResult]
    def get_inbox_by_name(name : String)
      data, _status_code, _headers = get_inbox_by_name_with_http_info(name)
      data
    end

    # Search for an inbox with the given name
    # Get a inbox result by name
    # @param name [String] 
    # @return [Array<(InboxByNameResult, Integer, Hash)>] InboxByNameResult data, response status code and response headers
    def get_inbox_by_name_with_http_info(name : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_by_name ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling InboxControllerApi.get_inbox_by_name")
      end
      # resource path
      local_var_path = "/inboxes/byName"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"name"] = name

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "InboxByNameResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_by_name",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_by_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxByNameResult.from_json(data), status_code, headers
    end

    # Get total inbox count
    # @return [CountDto]
    def get_inbox_count()
      data, _status_code, _headers = get_inbox_count_with_http_info()
      data
    end

    # Get total inbox count
    # @return [Array<(CountDto, Integer, Hash)>] CountDto data, response status code and response headers
    def get_inbox_count_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_count ..."}
      end
      # resource path
      local_var_path = "/inboxes/count"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "CountDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_count",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CountDto.from_json(data), status_code, headers
    end

    # Get email count in inbox
    # @param inbox_id [String] Id of inbox that emails belongs to
    # @return [CountDto]
    def get_inbox_email_count(inbox_id : String)
      data, _status_code, _headers = get_inbox_email_count_with_http_info(inbox_id)
      data
    end

    # Get email count in inbox
    # @param inbox_id [String] Id of inbox that emails belongs to
    # @return [Array<(CountDto, Integer, Hash)>] CountDto data, response status code and response headers
    def get_inbox_email_count_with_http_info(inbox_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_email_count ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.get_inbox_email_count")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/emails/count".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "CountDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_email_count",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_email_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CountDto.from_json(data), status_code, headers
    end

    # Get inbox emails paginated
    # Get a paginated list of emails in an inbox. Does not hold connections open.
    # @param inbox_id [String] Id of inbox that emails belongs to
    # @return [PageEmailPreview]
    def get_inbox_emails_paginated(inbox_id : String, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_inbox_emails_paginated_with_http_info(inbox_id, page, size, sort, since, before)
      data
    end

    # Get inbox emails paginated
    # Get a paginated list of emails in an inbox. Does not hold connections open.
    # @param inbox_id [String] Id of inbox that emails belongs to
    # @return [Array<(PageEmailPreview, Integer, Hash)>] PageEmailPreview data, response status code and response headers
    def get_inbox_emails_paginated_with_http_info(inbox_id : String, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_emails_paginated ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.get_inbox_emails_paginated")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/emails/paginated".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageEmailPreview"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_emails_paginated",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_emails_paginated\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageEmailPreview.from_json(data), status_code, headers
    end

    # Get all inbox IDs
    # Get list of inbox IDs
    # @return [InboxIdsResult]
    def get_inbox_ids()
      data, _status_code, _headers = get_inbox_ids_with_http_info()
      data
    end

    # Get all inbox IDs
    # Get list of inbox IDs
    # @return [Array<(InboxIdsResult, Integer, Hash)>] InboxIdsResult data, response status code and response headers
    def get_inbox_ids_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_ids ..."}
      end
      # resource path
      local_var_path = "/inboxes/ids"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "InboxIdsResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_ids",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_ids\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxIdsResult.from_json(data), status_code, headers
    end

    # Get Inbox Sent Emails
    # Returns an inbox's sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
    # @param inbox_id [String] 
    # @return [PageSentEmailProjection]
    def get_inbox_sent_emails(inbox_id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_inbox_sent_emails_with_http_info(inbox_id, page, size, sort, search_filter, since, before)
      data
    end

    # Get Inbox Sent Emails
    # Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
    # @param inbox_id [String] 
    # @return [Array<(PageSentEmailProjection, Integer, Hash)>] PageSentEmailProjection data, response status code and response headers
    def get_inbox_sent_emails_with_http_info(inbox_id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_sent_emails ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.get_inbox_sent_emails")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/sent".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageSentEmailProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_sent_emails",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_sent_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageSentEmailProjection.from_json(data), status_code, headers
    end

    # Get inbox tags
    # Get all inbox tags
    # @return [Array(String)]
    def get_inbox_tags()
      data, _status_code, _headers = get_inbox_tags_with_http_info()
      data
    end

    # Get inbox tags
    # Get all inbox tags
    # @return [Array<(Array(String), Integer, Hash)>] Array(String) data, response status code and response headers
    def get_inbox_tags_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_tags ..."}
      end
      # resource path
      local_var_path = "/inboxes/tags"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(String)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_tags",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(String).from_json(data), status_code, headers
    end

    # List Inboxes and email addresses
    # List the inboxes you have created. Note use of the more advanced `getAllEmails` is recommended and allows paginated access using a limit and sort parameter.
    # @return [Array(InboxDto)]
    def get_inboxes(size : Int32?, sort : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_inboxes_with_http_info(size, sort, since, before)
      data
    end

    # List Inboxes and email addresses
    # List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended and allows paginated access using a limit and sort parameter.
    # @return [Array<(Array(InboxDto), Integer, Hash)>] Array(InboxDto) data, response status code and response headers
    def get_inboxes_with_http_info(size : Int32?, sort : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inboxes ..."}
      end
      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling InboxControllerApi.get_inboxes, must be smaller than or equal to 100.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(InboxDto)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inboxes",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(InboxDto).from_json(data), status_code, headers
    end

    # Get latest email in an inbox. Use `WaitForController` to get emails that may not have arrived yet.
    # Get the newest email in an inbox or wait for one to arrive
    # @param inbox_id [String] ID of the inbox you want to get the latest email from
    # @param timeout_millis [Int64] Timeout milliseconds to wait for latest email
    # @return [Email]
    def get_latest_email_in_inbox(inbox_id : String, timeout_millis : Int64)
      data, _status_code, _headers = get_latest_email_in_inbox_with_http_info(inbox_id, timeout_millis)
      data
    end

    # Get latest email in an inbox. Use &#x60;WaitForController&#x60; to get emails that may not have arrived yet.
    # Get the newest email in an inbox or wait for one to arrive
    # @param inbox_id [String] ID of the inbox you want to get the latest email from
    # @param timeout_millis [Int64] Timeout milliseconds to wait for latest email
    # @return [Array<(Email, Integer, Hash)>] Email data, response status code and response headers
    def get_latest_email_in_inbox_with_http_info(inbox_id : String, timeout_millis : Int64)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_latest_email_in_inbox ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.get_latest_email_in_inbox")
      end
      # verify the required parameter "timeout_millis" is set
      if @api_client.config.client_side_validation && timeout_millis.nil?
        raise ArgumentError.new("Missing the required parameter 'timeout_millis' when calling InboxControllerApi.get_latest_email_in_inbox")
      end
      # resource path
      local_var_path = "/inboxes/getLatestEmail"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id
      query_params[:"timeoutMillis"] = timeout_millis

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Email"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_latest_email_in_inbox",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_latest_email_in_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Email.from_json(data), status_code, headers
    end

    # List Organization Inboxes Paginated
    # List organization inboxes in paginated form. These are inboxes created with `allowTeamAccess` flag enabled. Organization inboxes are `readOnly` for non-admin users. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
    # @return [PageOrganizationInboxProjection]
    def get_organization_inboxes(page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_organization_inboxes_with_http_info(page, size, sort, search_filter, since, before)
      data
    end

    # List Organization Inboxes Paginated
    # List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
    # @return [Array<(PageOrganizationInboxProjection, Integer, Hash)>] PageOrganizationInboxProjection data, response status code and response headers
    def get_organization_inboxes_with_http_info(page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_organization_inboxes ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/organization"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageOrganizationInboxProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_organization_inboxes",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_organization_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageOrganizationInboxProjection.from_json(data), status_code, headers
    end

    # List inbox rulesets
    # List all rulesets attached to an inbox
    # @param inbox_id [String] 
    # @return [PageInboxRulesetDto]
    def list_inbox_rulesets(inbox_id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = list_inbox_rulesets_with_http_info(inbox_id, page, size, sort, search_filter, since, before)
      data
    end

    # List inbox rulesets
    # List all rulesets attached to an inbox
    # @param inbox_id [String] 
    # @return [Array<(PageInboxRulesetDto, Integer, Hash)>] PageInboxRulesetDto data, response status code and response headers
    def list_inbox_rulesets_with_http_info(inbox_id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.list_inbox_rulesets ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.list_inbox_rulesets")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/rulesets".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageInboxRulesetDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.list_inbox_rulesets",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#list_inbox_rulesets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageInboxRulesetDto.from_json(data), status_code, headers
    end

    # List inbox tracking pixels
    # List all tracking pixels sent from an inbox
    # @param inbox_id [String] 
    # @return [PageTrackingPixelProjection]
    def list_inbox_tracking_pixels(inbox_id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = list_inbox_tracking_pixels_with_http_info(inbox_id, page, size, sort, search_filter, since, before)
      data
    end

    # List inbox tracking pixels
    # List all tracking pixels sent from an inbox
    # @param inbox_id [String] 
    # @return [Array<(PageTrackingPixelProjection, Integer, Hash)>] PageTrackingPixelProjection data, response status code and response headers
    def list_inbox_tracking_pixels_with_http_info(inbox_id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.list_inbox_tracking_pixels ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.list_inbox_tracking_pixels")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/tracking-pixels".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageTrackingPixelProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.list_inbox_tracking_pixels",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#list_inbox_tracking_pixels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageTrackingPixelProjection.from_json(data), status_code, headers
    end

    # Send Email
    # Send an email from an inbox's email address.  The request body should contain the `SendEmailOptions` that include recipients, attachments, body etc. See `SendEmailOptions` for all available properties. Note the `inboxId` refers to the inbox's id not the inbox's email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method `sendEmailAndConfirm`.
    # @param inbox_id [String] ID of the inbox you want to send the email from
    # @param send_email_options [SendEmailOptions] 
    # @return [nil]
    def send_email(inbox_id : String, send_email_options : SendEmailOptions)
      send_email_with_http_info(inbox_id, send_email_options)
      nil
    end

    # Send Email
    # Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
    # @param inbox_id [String] ID of the inbox you want to send the email from
    # @param send_email_options [SendEmailOptions] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_email_with_http_info(inbox_id : String, send_email_options : SendEmailOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.send_email ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.send_email")
      end
      # verify the required parameter "send_email_options" is set
      if @api_client.config.client_side_validation && send_email_options.nil?
        raise ArgumentError.new("Missing the required parameter 'send_email_options' when calling InboxControllerApi.send_email")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = send_email_options.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.send_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#send_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Send email and return sent confirmation
    # Sister method for standard `sendEmail` method with the benefit of returning a `SentEmail` entity confirming the successful sending of the email with a link to the sent object created for it.
    # @param inbox_id [String] ID of the inbox you want to send the email from
    # @param send_email_options [SendEmailOptions] 
    # @return [SentEmailDto]
    def send_email_and_confirm(inbox_id : String, send_email_options : SendEmailOptions)
      data, _status_code, _headers = send_email_and_confirm_with_http_info(inbox_id, send_email_options)
      data
    end

    # Send email and return sent confirmation
    # Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
    # @param inbox_id [String] ID of the inbox you want to send the email from
    # @param send_email_options [SendEmailOptions] 
    # @return [Array<(SentEmailDto, Integer, Hash)>] SentEmailDto data, response status code and response headers
    def send_email_and_confirm_with_http_info(inbox_id : String, send_email_options : SendEmailOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.send_email_and_confirm ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.send_email_and_confirm")
      end
      # verify the required parameter "send_email_options" is set
      if @api_client.config.client_side_validation && send_email_options.nil?
        raise ArgumentError.new("Missing the required parameter 'send_email_options' when calling InboxControllerApi.send_email_and_confirm")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/confirm".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = send_email_options.to_json

      # return_type
      return_type = "SentEmailDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.send_email_and_confirm",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#send_email_and_confirm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SentEmailDto.from_json(data), status_code, headers
    end

    # Send email with queue
    # Send an email using a queue. Will place the email onto a queue that will then be processed and sent. Use this queue method to enable any failed email sending to be recovered. This will prevent lost emails when sending if your account encounters a block or payment issue.
    # @param inbox_id [String] ID of the inbox you want to send the email from
    # @param validate_before_enqueue [Bool] Validate before adding to queue
    # @param send_email_options [SendEmailOptions] 
    # @return [nil]
    def send_email_with_queue(inbox_id : String, validate_before_enqueue : Bool, send_email_options : SendEmailOptions)
      send_email_with_queue_with_http_info(inbox_id, validate_before_enqueue, send_email_options)
      nil
    end

    # Send email with queue
    # Send an email using a queue. Will place the email onto a queue that will then be processed and sent. Use this queue method to enable any failed email sending to be recovered. This will prevent lost emails when sending if your account encounters a block or payment issue.
    # @param inbox_id [String] ID of the inbox you want to send the email from
    # @param validate_before_enqueue [Bool] Validate before adding to queue
    # @param send_email_options [SendEmailOptions] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_email_with_queue_with_http_info(inbox_id : String, validate_before_enqueue : Bool, send_email_options : SendEmailOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.send_email_with_queue ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.send_email_with_queue")
      end
      # verify the required parameter "validate_before_enqueue" is set
      if @api_client.config.client_side_validation && validate_before_enqueue.nil?
        raise ArgumentError.new("Missing the required parameter 'validate_before_enqueue' when calling InboxControllerApi.send_email_with_queue")
      end
      # verify the required parameter "send_email_options" is set
      if @api_client.config.client_side_validation && send_email_options.nil?
        raise ArgumentError.new("Missing the required parameter 'send_email_options' when calling InboxControllerApi.send_email_with_queue")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/with-queue".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"validateBeforeEnqueue"] = validate_before_enqueue

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = send_email_options.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.send_email_with_queue",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#send_email_with_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Send email using an SMTP mail envelope and message body and return sent confirmation
    # Send email using an SMTP envelope containing RCPT TO, MAIL FROM, and a SMTP BODY.
    # @param inbox_id [String] ID of the inbox you want to send the email from
    # @param send_smtp_envelope_options [SendSMTPEnvelopeOptions] 
    # @return [SentEmailDto]
    def send_smtp_envelope(inbox_id : String, send_smtp_envelope_options : SendSMTPEnvelopeOptions)
      data, _status_code, _headers = send_smtp_envelope_with_http_info(inbox_id, send_smtp_envelope_options)
      data
    end

    # Send email using an SMTP mail envelope and message body and return sent confirmation
    # Send email using an SMTP envelope containing RCPT TO, MAIL FROM, and a SMTP BODY.
    # @param inbox_id [String] ID of the inbox you want to send the email from
    # @param send_smtp_envelope_options [SendSMTPEnvelopeOptions] 
    # @return [Array<(SentEmailDto, Integer, Hash)>] SentEmailDto data, response status code and response headers
    def send_smtp_envelope_with_http_info(inbox_id : String, send_smtp_envelope_options : SendSMTPEnvelopeOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.send_smtp_envelope ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.send_smtp_envelope")
      end
      # verify the required parameter "send_smtp_envelope_options" is set
      if @api_client.config.client_side_validation && send_smtp_envelope_options.nil?
        raise ArgumentError.new("Missing the required parameter 'send_smtp_envelope_options' when calling InboxControllerApi.send_smtp_envelope")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/smtp-envelope".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = send_smtp_envelope_options.to_json

      # return_type
      return_type = "SentEmailDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.send_smtp_envelope",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#send_smtp_envelope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SentEmailDto.from_json(data), status_code, headers
    end

    # Send a test email to inbox
    # Send an inbox a test email to test email receiving is working
    # @param inbox_id [String] 
    # @return [nil]
    def send_test_email(inbox_id : String)
      send_test_email_with_http_info(inbox_id)
      nil
    end

    # Send a test email to inbox
    # Send an inbox a test email to test email receiving is working
    # @param inbox_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_test_email_with_http_info(inbox_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.send_test_email ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.send_test_email")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/send-test-email".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.send_test_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#send_test_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Set inbox favourited state
    # Set and return new favourite state for an inbox
    # @param inbox_id [String] ID of inbox to set favourite state
    # @param set_inbox_favourited_options [SetInboxFavouritedOptions] 
    # @return [InboxDto]
    def set_inbox_favourited(inbox_id : String, set_inbox_favourited_options : SetInboxFavouritedOptions)
      data, _status_code, _headers = set_inbox_favourited_with_http_info(inbox_id, set_inbox_favourited_options)
      data
    end

    # Set inbox favourited state
    # Set and return new favourite state for an inbox
    # @param inbox_id [String] ID of inbox to set favourite state
    # @param set_inbox_favourited_options [SetInboxFavouritedOptions] 
    # @return [Array<(InboxDto, Integer, Hash)>] InboxDto data, response status code and response headers
    def set_inbox_favourited_with_http_info(inbox_id : String, set_inbox_favourited_options : SetInboxFavouritedOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.set_inbox_favourited ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.set_inbox_favourited")
      end
      # verify the required parameter "set_inbox_favourited_options" is set
      if @api_client.config.client_side_validation && set_inbox_favourited_options.nil?
        raise ArgumentError.new("Missing the required parameter 'set_inbox_favourited_options' when calling InboxControllerApi.set_inbox_favourited")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/favourite".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = set_inbox_favourited_options.to_json

      # return_type
      return_type = "InboxDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"InboxControllerApi.set_inbox_favourited",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#set_inbox_favourited\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxDto.from_json(data), status_code, headers
    end

    # Update Inbox. Change name and description. Email address is not editable.
    # Update editable fields on an inbox
    # @param inbox_id [String] 
    # @param update_inbox_options [UpdateInboxOptions] 
    # @return [InboxDto]
    def update_inbox(inbox_id : String, update_inbox_options : UpdateInboxOptions)
      data, _status_code, _headers = update_inbox_with_http_info(inbox_id, update_inbox_options)
      data
    end

    # Update Inbox. Change name and description. Email address is not editable.
    # Update editable fields on an inbox
    # @param inbox_id [String] 
    # @param update_inbox_options [UpdateInboxOptions] 
    # @return [Array<(InboxDto, Integer, Hash)>] InboxDto data, response status code and response headers
    def update_inbox_with_http_info(inbox_id : String, update_inbox_options : UpdateInboxOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.update_inbox ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.update_inbox")
      end
      # verify the required parameter "update_inbox_options" is set
      if @api_client.config.client_side_validation && update_inbox_options.nil?
        raise ArgumentError.new("Missing the required parameter 'update_inbox_options' when calling InboxControllerApi.update_inbox")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = update_inbox_options.to_json

      # return_type
      return_type = "InboxDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"InboxControllerApi.update_inbox",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#update_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxDto.from_json(data), status_code, headers
    end
  end
end
