# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class InboxControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either `SMTP` or `HTTP` inboxes.
    # Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
    # @return [InboxDto]
    def create_inbox(a_custom_email_address_to_use_with_the_inbox__defaults_to_null__when_null_mail_slurp_will_assign_a_random_email_address_to_the_inbox_such_as_123mailslurp_com__if_you_use_the_use_domain_pool_option_when_the_email_address_is_null_it_will_generate_an_email_address_with_a_more_varied_domain_ending_such_as_123mailslurp_info_or_123mailslurp_biz__when_a_custom_email_address_is_provided_the_address_is_split_into_a_domain_and_the_domain_is_queried_against_your_user__if_you_have_created_the_domain_in_the_mail_slurp_dashboard_and_verified_it_you_can_use_any_email_address_that_ends_with_the_domain__note_domain_types_must_match_the_inbox_type___so_smtp_inboxes_will_only_work_with_smtp_type_domains__avoid_smtp_inboxes_if_you_need_to_send_emails_as_they_can_only_receive__send_an_email_to_this_address_and_the_inbox_will_receive_and_store_it_for_you__to_retrieve_the_email_use_the_inbox_and_email_controller_endpoints_with_the_inbox_id_ : String?, tags_that_inbox_has_been_tagged_with__tags_can_be_added_to_inboxes_to_group_different_inboxes_within_an_account__you_can_also_search_for_inboxes_by_tag_in_the_dashboard_ui_ : Array(String)?, optional_name_of_the_inbox__displayed_in_the_dashboard_for_easier_search_and_used_as_the_sender_name_when_sending_emails_ : String?, optional_description_of_the_inbox_for_labelling_purposes__is_shown_in_the_dashboard_and_can_be_used_with : String?, use_the_mail_slurp_domain_name_pool_with_this_inbox_when_creating_the_email_address__defaults_to_null__if_enabled_the_inbox_will_be_an_email_address_with_a_domain_randomly_chosen_from_a_list_of_the_mail_slurp_domains__this_is_useful_when_the_default_mailslurp_com_email_addresses_used_with_inboxes_are_blocked_or_considered_spam_by_a_provider_or_receiving_service__when_domain_pool_is_enabled_an_email_address_will_be_generated_ending_in_mailslurp_worldinfoxyz______this_means_a_tld_is_randomly_selecting_from_a_list_of__biz__info__xyz_etc_to_add_variance_to_the_generated_email_addresses__when_null_or_false_mail_slurp_uses_the_default_behavior_of_mailslurp_com_or_custom_email_address_provided_by_the_email_address_field__note_this_feature_is_only_available_for_http_inbox_types_ : Bool?, is_the_inbox_a_favorite__marking_an_inbox_as_a_favorite_is_typically_done_in_the_dashboard_for_quick_access_or_filtering : Bool?, optional_inbox_expiration_date__if_null_then_this_inbox_is_permanent_and_the_emails_in_it_wont_be_deleted__if_an_expiration_date_is_provided_or_is_required_by_your_plan_the_inbox_will_be_closed_when_the_expiration_time_is_reached__expired_inboxes_still_contain_their_emails_but_can_no_longer_send_or_receive_emails__an_expired_inbox_record_is_created_when_an_inbox_and_the_email_address_and_inbox_id_are_recorded__the_expires_at_property_is_a_timestamp_string_in_iso_date_time_format_yyyy_mm_dd_th_hmmss_sssxxx_ : Time?, number_of_milliseconds_that_inbox_should_exist_for : Int64?, deprecated__team_access_is_always_true__grant_team_access_to_this_inbox_and_the_emails_that_belong_to_it_for_team_members_of_your_organization_ : Bool?, http__default_or_smtp_inbox_type__http_inboxes_are_default_and_best_solution_for_most_cases__smtp_inboxes_are_more_reliable_for_public_inbound_email_consumption__but_do_not_support_sending_emails__when_using_custom_domains_the_domain_type_must_match_the_inbox_type__http_inboxes_are_processed_by_aws_ses_while_smtp_inboxes_use_a_custom_mail_server_running_at_mx_mailslurp_com_ : String?)
      data, _status_code, _headers = create_inbox_with_http_info(a_custom_email_address_to_use_with_the_inbox__defaults_to_null__when_null_mail_slurp_will_assign_a_random_email_address_to_the_inbox_such_as_123mailslurp_com__if_you_use_the_use_domain_pool_option_when_the_email_address_is_null_it_will_generate_an_email_address_with_a_more_varied_domain_ending_such_as_123mailslurp_info_or_123mailslurp_biz__when_a_custom_email_address_is_provided_the_address_is_split_into_a_domain_and_the_domain_is_queried_against_your_user__if_you_have_created_the_domain_in_the_mail_slurp_dashboard_and_verified_it_you_can_use_any_email_address_that_ends_with_the_domain__note_domain_types_must_match_the_inbox_type___so_smtp_inboxes_will_only_work_with_smtp_type_domains__avoid_smtp_inboxes_if_you_need_to_send_emails_as_they_can_only_receive__send_an_email_to_this_address_and_the_inbox_will_receive_and_store_it_for_you__to_retrieve_the_email_use_the_inbox_and_email_controller_endpoints_with_the_inbox_id_, tags_that_inbox_has_been_tagged_with__tags_can_be_added_to_inboxes_to_group_different_inboxes_within_an_account__you_can_also_search_for_inboxes_by_tag_in_the_dashboard_ui_, optional_name_of_the_inbox__displayed_in_the_dashboard_for_easier_search_and_used_as_the_sender_name_when_sending_emails_, optional_description_of_the_inbox_for_labelling_purposes__is_shown_in_the_dashboard_and_can_be_used_with, use_the_mail_slurp_domain_name_pool_with_this_inbox_when_creating_the_email_address__defaults_to_null__if_enabled_the_inbox_will_be_an_email_address_with_a_domain_randomly_chosen_from_a_list_of_the_mail_slurp_domains__this_is_useful_when_the_default_mailslurp_com_email_addresses_used_with_inboxes_are_blocked_or_considered_spam_by_a_provider_or_receiving_service__when_domain_pool_is_enabled_an_email_address_will_be_generated_ending_in_mailslurp_worldinfoxyz______this_means_a_tld_is_randomly_selecting_from_a_list_of__biz__info__xyz_etc_to_add_variance_to_the_generated_email_addresses__when_null_or_false_mail_slurp_uses_the_default_behavior_of_mailslurp_com_or_custom_email_address_provided_by_the_email_address_field__note_this_feature_is_only_available_for_http_inbox_types_, is_the_inbox_a_favorite__marking_an_inbox_as_a_favorite_is_typically_done_in_the_dashboard_for_quick_access_or_filtering, optional_inbox_expiration_date__if_null_then_this_inbox_is_permanent_and_the_emails_in_it_wont_be_deleted__if_an_expiration_date_is_provided_or_is_required_by_your_plan_the_inbox_will_be_closed_when_the_expiration_time_is_reached__expired_inboxes_still_contain_their_emails_but_can_no_longer_send_or_receive_emails__an_expired_inbox_record_is_created_when_an_inbox_and_the_email_address_and_inbox_id_are_recorded__the_expires_at_property_is_a_timestamp_string_in_iso_date_time_format_yyyy_mm_dd_th_hmmss_sssxxx_, number_of_milliseconds_that_inbox_should_exist_for, deprecated__team_access_is_always_true__grant_team_access_to_this_inbox_and_the_emails_that_belong_to_it_for_team_members_of_your_organization_, http__default_or_smtp_inbox_type__http_inboxes_are_default_and_best_solution_for_most_cases__smtp_inboxes_are_more_reliable_for_public_inbound_email_consumption__but_do_not_support_sending_emails__when_using_custom_domains_the_domain_type_must_match_the_inbox_type__http_inboxes_are_processed_by_aws_ses_while_smtp_inboxes_use_a_custom_mail_server_running_at_mx_mailslurp_com_)
      data
    end

    # Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either &#x60;SMTP&#x60; or &#x60;HTTP&#x60; inboxes.
    # Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
    # @return [Array<(InboxDto, Integer, Hash)>] InboxDto data, response status code and response headers
    def create_inbox_with_http_info(a_custom_email_address_to_use_with_the_inbox__defaults_to_null__when_null_mail_slurp_will_assign_a_random_email_address_to_the_inbox_such_as_123mailslurp_com__if_you_use_the_use_domain_pool_option_when_the_email_address_is_null_it_will_generate_an_email_address_with_a_more_varied_domain_ending_such_as_123mailslurp_info_or_123mailslurp_biz__when_a_custom_email_address_is_provided_the_address_is_split_into_a_domain_and_the_domain_is_queried_against_your_user__if_you_have_created_the_domain_in_the_mail_slurp_dashboard_and_verified_it_you_can_use_any_email_address_that_ends_with_the_domain__note_domain_types_must_match_the_inbox_type___so_smtp_inboxes_will_only_work_with_smtp_type_domains__avoid_smtp_inboxes_if_you_need_to_send_emails_as_they_can_only_receive__send_an_email_to_this_address_and_the_inbox_will_receive_and_store_it_for_you__to_retrieve_the_email_use_the_inbox_and_email_controller_endpoints_with_the_inbox_id_ : String?, tags_that_inbox_has_been_tagged_with__tags_can_be_added_to_inboxes_to_group_different_inboxes_within_an_account__you_can_also_search_for_inboxes_by_tag_in_the_dashboard_ui_ : Array(String)?, optional_name_of_the_inbox__displayed_in_the_dashboard_for_easier_search_and_used_as_the_sender_name_when_sending_emails_ : String?, optional_description_of_the_inbox_for_labelling_purposes__is_shown_in_the_dashboard_and_can_be_used_with : String?, use_the_mail_slurp_domain_name_pool_with_this_inbox_when_creating_the_email_address__defaults_to_null__if_enabled_the_inbox_will_be_an_email_address_with_a_domain_randomly_chosen_from_a_list_of_the_mail_slurp_domains__this_is_useful_when_the_default_mailslurp_com_email_addresses_used_with_inboxes_are_blocked_or_considered_spam_by_a_provider_or_receiving_service__when_domain_pool_is_enabled_an_email_address_will_be_generated_ending_in_mailslurp_worldinfoxyz______this_means_a_tld_is_randomly_selecting_from_a_list_of__biz__info__xyz_etc_to_add_variance_to_the_generated_email_addresses__when_null_or_false_mail_slurp_uses_the_default_behavior_of_mailslurp_com_or_custom_email_address_provided_by_the_email_address_field__note_this_feature_is_only_available_for_http_inbox_types_ : Bool?, is_the_inbox_a_favorite__marking_an_inbox_as_a_favorite_is_typically_done_in_the_dashboard_for_quick_access_or_filtering : Bool?, optional_inbox_expiration_date__if_null_then_this_inbox_is_permanent_and_the_emails_in_it_wont_be_deleted__if_an_expiration_date_is_provided_or_is_required_by_your_plan_the_inbox_will_be_closed_when_the_expiration_time_is_reached__expired_inboxes_still_contain_their_emails_but_can_no_longer_send_or_receive_emails__an_expired_inbox_record_is_created_when_an_inbox_and_the_email_address_and_inbox_id_are_recorded__the_expires_at_property_is_a_timestamp_string_in_iso_date_time_format_yyyy_mm_dd_th_hmmss_sssxxx_ : Time?, number_of_milliseconds_that_inbox_should_exist_for : Int64?, deprecated__team_access_is_always_true__grant_team_access_to_this_inbox_and_the_emails_that_belong_to_it_for_team_members_of_your_organization_ : Bool?, http__default_or_smtp_inbox_type__http_inboxes_are_default_and_best_solution_for_most_cases__smtp_inboxes_are_more_reliable_for_public_inbound_email_consumption__but_do_not_support_sending_emails__when_using_custom_domains_the_domain_type_must_match_the_inbox_type__http_inboxes_are_processed_by_aws_ses_while_smtp_inboxes_use_a_custom_mail_server_running_at_mx_mailslurp_com_ : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.create_inbox ..."}
      end
      allowable_values = ["HTTP_INBOX", "SMTP_INBOX"]
      if @api_client.config.client_side_validation && http__default_or_smtp_inbox_type__http_inboxes_are_default_and_best_solution_for_most_cases__smtp_inboxes_are_more_reliable_for_public_inbound_email_consumption__but_do_not_support_sending_emails__when_using_custom_domains_the_domain_type_must_match_the_inbox_type__http_inboxes_are_processed_by_aws_ses_while_smtp_inboxes_use_a_custom_mail_server_running_at_mx_mailslurp_com_ && !allowable_values.includes?(http__default_or_smtp_inbox_type__http_inboxes_are_default_and_best_solution_for_most_cases__smtp_inboxes_are_more_reliable_for_public_inbound_email_consumption__but_do_not_support_sending_emails__when_using_custom_domains_the_domain_type_must_match_the_inbox_type__http_inboxes_are_processed_by_aws_ses_while_smtp_inboxes_use_a_custom_mail_server_running_at_mx_mailslurp_com_)
        raise ArgumentError.new("invalid value for \"http__default_or_smtp_inbox_type__http_inboxes_are_default_and_best_solution_for_most_cases__smtp_inboxes_are_more_reliable_for_public_inbound_email_consumption__but_do_not_support_sending_emails__when_using_custom_domains_the_domain_type_must_match_the_inbox_type__http_inboxes_are_processed_by_aws_ses_while_smtp_inboxes_use_a_custom_mail_server_running_at_mx_mailslurp_com_\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as `123@mailslurp.com`. If you use the `useDomainPool` option when the email address is null it will generate an email address with a more varied domain ending such as `123@mailslurp.info` or `123@mailslurp.biz`. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Note domain types must match the inbox type - so `SMTP` inboxes will only work with `SMTP` type domains. Avoid `SMTP` inboxes if you need to send emails as they can only receive. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID."] = a_custom_email_address_to_use_with_the_inbox__defaults_to_null__when_null_mail_slurp_will_assign_a_random_email_address_to_the_inbox_such_as_123mailslurp_com__if_you_use_the_use_domain_pool_option_when_the_email_address_is_null_it_will_generate_an_email_address_with_a_more_varied_domain_ending_such_as_123mailslurp_info_or_123mailslurp_biz__when_a_custom_email_address_is_provided_the_address_is_split_into_a_domain_and_the_domain_is_queried_against_your_user__if_you_have_created_the_domain_in_the_mail_slurp_dashboard_and_verified_it_you_can_use_any_email_address_that_ends_with_the_domain__note_domain_types_must_match_the_inbox_type___so_smtp_inboxes_will_only_work_with_smtp_type_domains__avoid_smtp_inboxes_if_you_need_to_send_emails_as_they_can_only_receive__send_an_email_to_this_address_and_the_inbox_will_receive_and_store_it_for_you__to_retrieve_the_email_use_the_inbox_and_email_controller_endpoints_with_the_inbox_id_
      query_params[:"Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI."] = @api_client.build_collection_param(tags_that_inbox_has_been_tagged_with__tags_can_be_added_to_inboxes_to_group_different_inboxes_within_an_account__you_can_also_search_for_inboxes_by_tag_in_the_dashboard_ui_, :multi)
      query_params[:"Optional name of the inbox. Displayed in the dashboard for easier search and used as the sender name when sending emails."] = optional_name_of_the_inbox__displayed_in_the_dashboard_for_easier_search_and_used_as_the_sender_name_when_sending_emails_
      query_params[:"Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with"] = optional_description_of_the_inbox_for_labelling_purposes__is_shown_in_the_dashboard_and_can_be_used_with
      query_params[:"Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default `@mailslurp.com` email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in `@mailslurp.{world,info,xyz,...}` . This means a TLD is randomly selecting from a list of `.biz`, `.info`, `.xyz` etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of `@mailslurp.com` or custom email address provided by the emailAddress field. Note this feature is only available for `HTTP` inbox types."] = use_the_mail_slurp_domain_name_pool_with_this_inbox_when_creating_the_email_address__defaults_to_null__if_enabled_the_inbox_will_be_an_email_address_with_a_domain_randomly_chosen_from_a_list_of_the_mail_slurp_domains__this_is_useful_when_the_default_mailslurp_com_email_addresses_used_with_inboxes_are_blocked_or_considered_spam_by_a_provider_or_receiving_service__when_domain_pool_is_enabled_an_email_address_will_be_generated_ending_in_mailslurp_worldinfoxyz______this_means_a_tld_is_randomly_selecting_from_a_list_of__biz__info__xyz_etc_to_add_variance_to_the_generated_email_addresses__when_null_or_false_mail_slurp_uses_the_default_behavior_of_mailslurp_com_or_custom_email_address_provided_by_the_email_address_field__note_this_feature_is_only_available_for_http_inbox_types_
      query_params[:"Is the inbox a favorite. Marking an inbox as a favorite is typically done in the dashboard for quick access or filtering"] = is_the_inbox_a_favorite__marking_an_inbox_as_a_favorite_is_typically_done_in_the_dashboard_for_quick_access_or_filtering
      query_params[:"Optional inbox expiration date. If null then this inbox is permanent and the emails in it won't be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd'T'HH:mm:ss.SSSXXX."] = optional_inbox_expiration_date__if_null_then_this_inbox_is_permanent_and_the_emails_in_it_wont_be_deleted__if_an_expiration_date_is_provided_or_is_required_by_your_plan_the_inbox_will_be_closed_when_the_expiration_time_is_reached__expired_inboxes_still_contain_their_emails_but_can_no_longer_send_or_receive_emails__an_expired_inbox_record_is_created_when_an_inbox_and_the_email_address_and_inbox_id_are_recorded__the_expires_at_property_is_a_timestamp_string_in_iso_date_time_format_yyyy_mm_dd_th_hmmss_sssxxx_
      query_params[:"Number of milliseconds that inbox should exist for"] = number_of_milliseconds_that_inbox_should_exist_for
      query_params[:"DEPRECATED (team access is always true). Grant team access to this inbox and the emails that belong to it for team members of your organization."] = deprecated__team_access_is_always_true__grant_team_access_to_this_inbox_and_the_emails_that_belong_to_it_for_team_members_of_your_organization_
      query_params[:"HTTP (default) or SMTP inbox type. HTTP inboxes are default and best solution for most cases. SMTP inboxes are more reliable for public inbound email consumption (but do not support sending emails). When using custom domains the domain type must match the inbox type. HTTP inboxes are processed by AWS SES while SMTP inboxes use a custom mail server running at `mx.mailslurp.com`."] = http__default_or_smtp_inbox_type__http_inboxes_are_default_and_best_solution_for_most_cases__smtp_inboxes_are_more_reliable_for_public_inbound_email_consumption__but_do_not_support_sending_emails__when_using_custom_domains_the_domain_type_must_match_the_inbox_type__http_inboxes_are_processed_by_aws_ses_while_smtp_inboxes_use_a_custom_mail_server_running_at_mx_mailslurp_com_

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "InboxDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.create_inbox",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#create_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxDto.from_json(data), status_code, headers
    end

    # Create an inbox ruleset
    # Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
    # @param inbox_id [String] 
    # @param create_inbox_ruleset_options [CreateInboxRulesetOptions] 
    # @return [InboxRulesetDto]
    def create_inbox_ruleset(inbox_id : String, create_inbox_ruleset_options : CreateInboxRulesetOptions)
      data, _status_code, _headers = create_inbox_ruleset_with_http_info(inbox_id, create_inbox_ruleset_options)
      data
    end

    # Create an inbox ruleset
    # Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
    # @param inbox_id [String] 
    # @param create_inbox_ruleset_options [CreateInboxRulesetOptions] 
    # @return [Array<(InboxRulesetDto, Integer, Hash)>] InboxRulesetDto data, response status code and response headers
    def create_inbox_ruleset_with_http_info(inbox_id : String, create_inbox_ruleset_options : CreateInboxRulesetOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.create_inbox_ruleset ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.create_inbox_ruleset")
      end
      # verify the required parameter "create_inbox_ruleset_options" is set
      if @api_client.config.client_side_validation && create_inbox_ruleset_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_inbox_ruleset_options' when calling InboxControllerApi.create_inbox_ruleset")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/rulesets".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_inbox_ruleset_options.to_json

      # return_type
      return_type = "InboxRulesetDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.create_inbox_ruleset",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#create_inbox_ruleset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxRulesetDto.from_json(data), status_code, headers
    end

    # Create an inbox with default options. Uses MailSlurp domain pool address and is private.
    # @return [InboxDto]
    def create_inbox_with_defaults()
      data, _status_code, _headers = create_inbox_with_defaults_with_http_info()
      data
    end

    # Create an inbox with default options. Uses MailSlurp domain pool address and is private.
    # @return [Array<(InboxDto, Integer, Hash)>] InboxDto data, response status code and response headers
    def create_inbox_with_defaults_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.create_inbox_with_defaults ..."}
      end
      # resource path
      local_var_path = "/inboxes/withDefaults"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "InboxDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.create_inbox_with_defaults",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#create_inbox_with_defaults\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxDto.from_json(data), status_code, headers
    end

    # Create an inbox with options. Extended options for inbox creation.
    # Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
    # @param create_inbox_dto [CreateInboxDto] 
    # @return [InboxDto]
    def create_inbox_with_options(create_inbox_dto : CreateInboxDto)
      data, _status_code, _headers = create_inbox_with_options_with_http_info(create_inbox_dto)
      data
    end

    # Create an inbox with options. Extended options for inbox creation.
    # Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
    # @param create_inbox_dto [CreateInboxDto] 
    # @return [Array<(InboxDto, Integer, Hash)>] InboxDto data, response status code and response headers
    def create_inbox_with_options_with_http_info(create_inbox_dto : CreateInboxDto)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.create_inbox_with_options ..."}
      end
      # verify the required parameter "create_inbox_dto" is set
      if @api_client.config.client_side_validation && create_inbox_dto.nil?
        raise ArgumentError.new("Missing the required parameter 'create_inbox_dto' when calling InboxControllerApi.create_inbox_with_options")
      end
      # resource path
      local_var_path = "/inboxes/withOptions"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_inbox_dto.to_json

      # return_type
      return_type = "InboxDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.create_inbox_with_options",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#create_inbox_with_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxDto.from_json(data), status_code, headers
    end

    # Delete all inboxes
    # Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
    # @return [nil]
    def delete_all_inboxes()
      delete_all_inboxes_with_http_info()
      nil
    end

    # Delete all inboxes
    # Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_all_inboxes_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.delete_all_inboxes ..."}
      end
      # resource path
      local_var_path = "/inboxes"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"InboxControllerApi.delete_all_inboxes",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#delete_all_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete inbox
    # Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
    # @param inbox_id [String] 
    # @return [nil]
    def delete_inbox(inbox_id : String)
      delete_inbox_with_http_info(inbox_id)
      nil
    end

    # Delete inbox
    # Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
    # @param inbox_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_inbox_with_http_info(inbox_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.delete_inbox ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.delete_inbox")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"InboxControllerApi.delete_inbox",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#delete_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Does inbox exist
    # Check if inboxes exist by email address. Useful if you are sending emails to mailslurp addresses
    # @param email_address [String] Email address
    # @return [InboxExistsDto]
    def does_inbox_exist(email_address : String)
      data, _status_code, _headers = does_inbox_exist_with_http_info(email_address)
      data
    end

    # Does inbox exist
    # Check if inboxes exist by email address. Useful if you are sending emails to mailslurp addresses
    # @param email_address [String] Email address
    # @return [Array<(InboxExistsDto, Integer, Hash)>] InboxExistsDto data, response status code and response headers
    def does_inbox_exist_with_http_info(email_address : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.does_inbox_exist ..."}
      end
      # verify the required parameter "email_address" is set
      if @api_client.config.client_side_validation && email_address.nil?
        raise ArgumentError.new("Missing the required parameter 'email_address' when calling InboxControllerApi.does_inbox_exist")
      end
      # resource path
      local_var_path = "/inboxes/exists"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"emailAddress"] = email_address

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "InboxExistsDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.does_inbox_exist",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#does_inbox_exist\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxExistsDto.from_json(data), status_code, headers
    end

    # Remove expired inboxes
    # Remove any expired inboxes for your account (instead of waiting for scheduled removal on server)
    # @return [FlushExpiredInboxesResult]
    def flush_expired(before : Time?)
      data, _status_code, _headers = flush_expired_with_http_info(before)
      data
    end

    # Remove expired inboxes
    # Remove any expired inboxes for your account (instead of waiting for scheduled removal on server)
    # @return [Array<(FlushExpiredInboxesResult, Integer, Hash)>] FlushExpiredInboxesResult data, response status code and response headers
    def flush_expired_with_http_info(before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.flush_expired ..."}
      end
      # resource path
      local_var_path = "/inboxes/expired"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "FlushExpiredInboxesResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"InboxControllerApi.flush_expired",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#flush_expired\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return FlushExpiredInboxesResult.from_json(data), status_code, headers
    end

    # List All Inboxes Paginated
    # List inboxes in paginated form. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative `getInboxes` method returns a full list of inboxes but is limited to 100 results.
    # @return [PageInboxProjection]
    def get_all_inboxes(page : Int32?, size : Int32?, sort : String?, favourite : Bool?, search : String?, tag : String?, deprecated__optionally_filter_by_team_access_ : Bool?, since : Time?, before : Time?)
      data, _status_code, _headers = get_all_inboxes_with_http_info(page, size, sort, favourite, search, tag, deprecated__optionally_filter_by_team_access_, since, before)
      data
    end

    # List All Inboxes Paginated
    # List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
    # @return [Array<(PageInboxProjection, Integer, Hash)>] PageInboxProjection data, response status code and response headers
    def get_all_inboxes_with_http_info(page : Int32?, size : Int32?, sort : String?, favourite : Bool?, search : String?, tag : String?, deprecated__optionally_filter_by_team_access_ : Bool?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_all_inboxes ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/paginated"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"favourite"] = favourite
      query_params[:"search"] = search
      query_params[:"tag"] = tag
      query_params[:"DEPRECATED. Optionally filter by team access."] = deprecated__optionally_filter_by_team_access_
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageInboxProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_all_inboxes",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_all_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageInboxProjection.from_json(data), status_code, headers
    end

    # Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
    # List emails that an inbox has received. Only emails that are sent to the inbox's email address will appear in the inbox. It may take several seconds for any email you send to an inbox's email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the `minCount` parameter. The server will retry the inbox database until the `minCount` is satisfied or the `retryTimeout` is reached
    # @param id_of_inbox_that_emails_belongs_to [String] 
    # @return [Array(EmailPreview)]
    def get_emails(id_of_inbox_that_emails_belongs_to : String, alias_for_limit__assessed_first_before_assessing_any_passed_limit_ : Int32?, limit : Int32?, sort_the_results_by_received_date_and_direction_asc_or_desc : String?, retry_timeout : Int64?, delay_timeout : Int64?, min_count : Int64?, unread_only : Bool?, exclude_emails_received_after_this_iso_8601_date_time : Time?, exclude_emails_received_before_this_iso_8601_date_time : Time?)
      data, _status_code, _headers = get_emails_with_http_info(id_of_inbox_that_emails_belongs_to, alias_for_limit__assessed_first_before_assessing_any_passed_limit_, limit, sort_the_results_by_received_date_and_direction_asc_or_desc, retry_timeout, delay_timeout, min_count, unread_only, exclude_emails_received_after_this_iso_8601_date_time, exclude_emails_received_before_this_iso_8601_date_time)
      data
    end

    # Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
    # List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
    # @param id_of_inbox_that_emails_belongs_to [String] 
    # @return [Array<(Array(EmailPreview), Integer, Hash)>] Array(EmailPreview) data, response status code and response headers
    def get_emails_with_http_info(id_of_inbox_that_emails_belongs_to : String, alias_for_limit__assessed_first_before_assessing_any_passed_limit_ : Int32?, limit : Int32?, sort_the_results_by_received_date_and_direction_asc_or_desc : String?, retry_timeout : Int64?, delay_timeout : Int64?, min_count : Int64?, unread_only : Bool?, exclude_emails_received_after_this_iso_8601_date_time : Time?, exclude_emails_received_before_this_iso_8601_date_time : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_emails ..."}
      end
      # verify the required parameter "id_of_inbox_that_emails_belongs_to" is set
      if @api_client.config.client_side_validation && id_of_inbox_that_emails_belongs_to.nil?
        raise ArgumentError.new("Missing the required parameter 'id_of_inbox_that_emails_belongs_to' when calling InboxControllerApi.get_emails")
      end
      if @api_client.config.client_side_validation && !alias_for_limit__assessed_first_before_assessing_any_passed_limit_.nil? && alias_for_limit__assessed_first_before_assessing_any_passed_limit_ > 100
        raise ArgumentError.new("invalid value for \"alias_for_limit__assessed_first_before_assessing_any_passed_limit_\" when calling InboxControllerApi.get_emails, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !limit.nil? && limit > 100
        raise ArgumentError.new("invalid value for \"limit\" when calling InboxControllerApi.get_emails, must be smaller than or equal to 100.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort_the_results_by_received_date_and_direction_asc_or_desc && !allowable_values.includes?(sort_the_results_by_received_date_and_direction_asc_or_desc)
        raise ArgumentError.new("invalid value for \"sort_the_results_by_received_date_and_direction_asc_or_desc\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/emails".sub("{" + "Id of inbox that emails belongs to" + "}", URI.encode(id_of_inbox_that_emails_belongs_to.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"Alias for limit. Assessed first before assessing any passed limit."] = alias_for_limit__assessed_first_before_assessing_any_passed_limit_
      query_params[:"limit"] = limit
      query_params[:"Sort the results by received date and direction ASC or DESC"] = sort_the_results_by_received_date_and_direction_asc_or_desc
      query_params[:"retryTimeout"] = retry_timeout
      query_params[:"delayTimeout"] = delay_timeout
      query_params[:"minCount"] = min_count
      query_params[:"unreadOnly"] = unread_only
      query_params[:"Exclude emails received after this ISO 8601 date time"] = exclude_emails_received_after_this_iso_8601_date_time
      query_params[:"Exclude emails received before this ISO 8601 date time"] = exclude_emails_received_before_this_iso_8601_date_time

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(EmailPreview)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_emails",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(EmailPreview).from_json(data), status_code, headers
    end

    # Get Inbox. Returns properties of an inbox.
    # Returns an inbox's properties, including its email address and ID.
    # @param inbox_id [String] 
    # @return [InboxDto]
    def get_inbox(inbox_id : String)
      data, _status_code, _headers = get_inbox_with_http_info(inbox_id)
      data
    end

    # Get Inbox. Returns properties of an inbox.
    # Returns an inbox&#39;s properties, including its email address and ID.
    # @param inbox_id [String] 
    # @return [Array<(InboxDto, Integer, Hash)>] InboxDto data, response status code and response headers
    def get_inbox_with_http_info(inbox_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.get_inbox")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "InboxDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxDto.from_json(data), status_code, headers
    end

    # Get total inbox count
    # @return [CountDto]
    def get_inbox_count()
      data, _status_code, _headers = get_inbox_count_with_http_info()
      data
    end

    # Get total inbox count
    # @return [Array<(CountDto, Integer, Hash)>] CountDto data, response status code and response headers
    def get_inbox_count_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_count ..."}
      end
      # resource path
      local_var_path = "/inboxes/count"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "CountDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_count",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CountDto.from_json(data), status_code, headers
    end

    # Get email count in inbox
    # @param id_of_inbox_that_emails_belongs_to [String] 
    # @return [CountDto]
    def get_inbox_email_count(id_of_inbox_that_emails_belongs_to : String)
      data, _status_code, _headers = get_inbox_email_count_with_http_info(id_of_inbox_that_emails_belongs_to)
      data
    end

    # Get email count in inbox
    # @param id_of_inbox_that_emails_belongs_to [String] 
    # @return [Array<(CountDto, Integer, Hash)>] CountDto data, response status code and response headers
    def get_inbox_email_count_with_http_info(id_of_inbox_that_emails_belongs_to : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_email_count ..."}
      end
      # verify the required parameter "id_of_inbox_that_emails_belongs_to" is set
      if @api_client.config.client_side_validation && id_of_inbox_that_emails_belongs_to.nil?
        raise ArgumentError.new("Missing the required parameter 'id_of_inbox_that_emails_belongs_to' when calling InboxControllerApi.get_inbox_email_count")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/emails/count".sub("{" + "Id of inbox that emails belongs to" + "}", URI.encode(id_of_inbox_that_emails_belongs_to.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "CountDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_email_count",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_email_count\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CountDto.from_json(data), status_code, headers
    end

    # Get inbox emails paginated
    # Get a paginated list of emails in an inbox. Does not hold connections open.
    # @param id_of_inbox_that_emails_belongs_to [String] 
    # @return [PageEmailPreview]
    def get_inbox_emails_paginated(id_of_inbox_that_emails_belongs_to : String, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_inbox_emails_paginated_with_http_info(id_of_inbox_that_emails_belongs_to, page, size, sort, since, before)
      data
    end

    # Get inbox emails paginated
    # Get a paginated list of emails in an inbox. Does not hold connections open.
    # @param id_of_inbox_that_emails_belongs_to [String] 
    # @return [Array<(PageEmailPreview, Integer, Hash)>] PageEmailPreview data, response status code and response headers
    def get_inbox_emails_paginated_with_http_info(id_of_inbox_that_emails_belongs_to : String, page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_emails_paginated ..."}
      end
      # verify the required parameter "id_of_inbox_that_emails_belongs_to" is set
      if @api_client.config.client_side_validation && id_of_inbox_that_emails_belongs_to.nil?
        raise ArgumentError.new("Missing the required parameter 'id_of_inbox_that_emails_belongs_to' when calling InboxControllerApi.get_inbox_emails_paginated")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/emails/paginated".sub("{" + "Id of inbox that emails belongs to" + "}", URI.encode(id_of_inbox_that_emails_belongs_to.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageEmailPreview"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_emails_paginated",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_emails_paginated\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageEmailPreview.from_json(data), status_code, headers
    end

    # Get Inbox Sent Emails
    # Returns an inbox's sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
    # @param inbox_id [String] 
    # @return [PageSentEmailProjection]
    def get_inbox_sent_emails(inbox_id : String, page : Int32?, optional_page_size_in_inbox_sent_email_list_pagination : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_inbox_sent_emails_with_http_info(inbox_id, page, optional_page_size_in_inbox_sent_email_list_pagination, sort, search_filter, since, before)
      data
    end

    # Get Inbox Sent Emails
    # Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
    # @param inbox_id [String] 
    # @return [Array<(PageSentEmailProjection, Integer, Hash)>] PageSentEmailProjection data, response status code and response headers
    def get_inbox_sent_emails_with_http_info(inbox_id : String, page : Int32?, optional_page_size_in_inbox_sent_email_list_pagination : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_sent_emails ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.get_inbox_sent_emails")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/sent".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"Optional page size in inbox sent email list pagination"] = optional_page_size_in_inbox_sent_email_list_pagination
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageSentEmailProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_sent_emails",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_sent_emails\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageSentEmailProjection.from_json(data), status_code, headers
    end

    # Get inbox tags
    # Get all inbox tags
    # @return [Set(String)]
    def get_inbox_tags()
      data, _status_code, _headers = get_inbox_tags_with_http_info()
      data
    end

    # Get inbox tags
    # Get all inbox tags
    # @return [Array<(Set(String), Integer, Hash)>] Set(String) data, response status code and response headers
    def get_inbox_tags_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inbox_tags ..."}
      end
      # resource path
      local_var_path = "/inboxes/tags"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Set(String)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inbox_tags",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inbox_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Set(String).from_json(data), status_code, headers
    end

    # List Inboxes and email addresses
    # List the inboxes you have created. Note use of the more advanced `getAllEmails` is recommended and allows paginated access using a limit and sort parameter.
    # @return [Array(InboxDto)]
    def get_inboxes(size : Int32?, sort : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_inboxes_with_http_info(size, sort, since, before)
      data
    end

    # List Inboxes and email addresses
    # List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended and allows paginated access using a limit and sort parameter.
    # @return [Array<(Array(InboxDto), Integer, Hash)>] Array(InboxDto) data, response status code and response headers
    def get_inboxes_with_http_info(size : Int32?, sort : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_inboxes ..."}
      end
      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling InboxControllerApi.get_inboxes, must be smaller than or equal to 100.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(InboxDto)"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_inboxes",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(InboxDto).from_json(data), status_code, headers
    end

    # List Organization Inboxes Paginated
    # List organization inboxes in paginated form. These are inboxes created with `allowTeamAccess` flag enabled. Organization inboxes are `readOnly` for non-admin users. The results are available on the `content` property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
    # @return [PageOrganizationInboxProjection]
    def get_organization_inboxes(page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_organization_inboxes_with_http_info(page, size, sort, search_filter, since, before)
      data
    end

    # List Organization Inboxes Paginated
    # List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
    # @return [Array<(PageOrganizationInboxProjection, Integer, Hash)>] PageOrganizationInboxProjection data, response status code and response headers
    def get_organization_inboxes_with_http_info(page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.get_organization_inboxes ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/organization"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageOrganizationInboxProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.get_organization_inboxes",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#get_organization_inboxes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageOrganizationInboxProjection.from_json(data), status_code, headers
    end

    # List inbox rulesets
    # List all rulesets attached to an inbox
    # @param inbox_id [String] 
    # @return [PageInboxRulesetDto]
    def list_inbox_rulesets(inbox_id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = list_inbox_rulesets_with_http_info(inbox_id, page, size, sort, search_filter, since, before)
      data
    end

    # List inbox rulesets
    # List all rulesets attached to an inbox
    # @param inbox_id [String] 
    # @return [Array<(PageInboxRulesetDto, Integer, Hash)>] PageInboxRulesetDto data, response status code and response headers
    def list_inbox_rulesets_with_http_info(inbox_id : String, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.list_inbox_rulesets ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.list_inbox_rulesets")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/rulesets".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageInboxRulesetDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.list_inbox_rulesets",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#list_inbox_rulesets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageInboxRulesetDto.from_json(data), status_code, headers
    end

    # List inbox tracking pixels
    # List all tracking pixels sent from an inbox
    # @param inbox_id [String] 
    # @return [PageTrackingPixelProjection]
    def list_inbox_tracking_pixels(inbox_id : String, page : Int32?, optional_page_size_in_inbox_tracking_pixel_list_pagination : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = list_inbox_tracking_pixels_with_http_info(inbox_id, page, optional_page_size_in_inbox_tracking_pixel_list_pagination, sort, search_filter, since, before)
      data
    end

    # List inbox tracking pixels
    # List all tracking pixels sent from an inbox
    # @param inbox_id [String] 
    # @return [Array<(PageTrackingPixelProjection, Integer, Hash)>] PageTrackingPixelProjection data, response status code and response headers
    def list_inbox_tracking_pixels_with_http_info(inbox_id : String, page : Int32?, optional_page_size_in_inbox_tracking_pixel_list_pagination : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.list_inbox_tracking_pixels ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.list_inbox_tracking_pixels")
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/tracking-pixels".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"Optional page size in inbox tracking pixel list pagination"] = optional_page_size_in_inbox_tracking_pixel_list_pagination
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageTrackingPixelProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"InboxControllerApi.list_inbox_tracking_pixels",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#list_inbox_tracking_pixels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageTrackingPixelProjection.from_json(data), status_code, headers
    end

    # Send Email
    # Send an email from an inbox's email address.  The request body should contain the `SendEmailOptions` that include recipients, attachments, body etc. See `SendEmailOptions` for all available properties. Note the `inboxId` refers to the inbox's id not the inbox's email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method `sendEmailAndConfirm`.
    # @param id_of_the_inbox_you_want_to_send_the_email_from [String] 
    # @param send_email_options [SendEmailOptions] 
    # @return [nil]
    def send_email(id_of_the_inbox_you_want_to_send_the_email_from : String, send_email_options : SendEmailOptions)
      send_email_with_http_info(id_of_the_inbox_you_want_to_send_the_email_from, send_email_options)
      nil
    end

    # Send Email
    # Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
    # @param id_of_the_inbox_you_want_to_send_the_email_from [String] 
    # @param send_email_options [SendEmailOptions] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_email_with_http_info(id_of_the_inbox_you_want_to_send_the_email_from : String, send_email_options : SendEmailOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.send_email ..."}
      end
      # verify the required parameter "id_of_the_inbox_you_want_to_send_the_email_from" is set
      if @api_client.config.client_side_validation && id_of_the_inbox_you_want_to_send_the_email_from.nil?
        raise ArgumentError.new("Missing the required parameter 'id_of_the_inbox_you_want_to_send_the_email_from' when calling InboxControllerApi.send_email")
      end
      # verify the required parameter "send_email_options" is set
      if @api_client.config.client_side_validation && send_email_options.nil?
        raise ArgumentError.new("Missing the required parameter 'send_email_options' when calling InboxControllerApi.send_email")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}".sub("{" + "ID of the inbox you want to send the email from" + "}", URI.encode(id_of_the_inbox_you_want_to_send_the_email_from.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = send_email_options.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.send_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#send_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Send email and return sent confirmation
    # Sister method for standard `sendEmail` method with the benefit of returning a `SentEmail` entity confirming the successful sending of the email with a link to the sent object created for it.
    # @param id_of_the_inbox_you_want_to_send_the_email_from [String] 
    # @param send_email_options [SendEmailOptions] 
    # @return [SentEmailDto]
    def send_email_and_confirm(id_of_the_inbox_you_want_to_send_the_email_from : String, send_email_options : SendEmailOptions)
      data, _status_code, _headers = send_email_and_confirm_with_http_info(id_of_the_inbox_you_want_to_send_the_email_from, send_email_options)
      data
    end

    # Send email and return sent confirmation
    # Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
    # @param id_of_the_inbox_you_want_to_send_the_email_from [String] 
    # @param send_email_options [SendEmailOptions] 
    # @return [Array<(SentEmailDto, Integer, Hash)>] SentEmailDto data, response status code and response headers
    def send_email_and_confirm_with_http_info(id_of_the_inbox_you_want_to_send_the_email_from : String, send_email_options : SendEmailOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.send_email_and_confirm ..."}
      end
      # verify the required parameter "id_of_the_inbox_you_want_to_send_the_email_from" is set
      if @api_client.config.client_side_validation && id_of_the_inbox_you_want_to_send_the_email_from.nil?
        raise ArgumentError.new("Missing the required parameter 'id_of_the_inbox_you_want_to_send_the_email_from' when calling InboxControllerApi.send_email_and_confirm")
      end
      # verify the required parameter "send_email_options" is set
      if @api_client.config.client_side_validation && send_email_options.nil?
        raise ArgumentError.new("Missing the required parameter 'send_email_options' when calling InboxControllerApi.send_email_and_confirm")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/confirm".sub("{" + "ID of the inbox you want to send the email from" + "}", URI.encode(id_of_the_inbox_you_want_to_send_the_email_from.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = send_email_options.to_json

      # return_type
      return_type = "SentEmailDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.send_email_and_confirm",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#send_email_and_confirm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return SentEmailDto.from_json(data), status_code, headers
    end

    # Send a test email to inbox
    # Send an inbox a test email to test email receiving is working
    # @param inbox_id [String] 
    # @return [nil]
    def send_test_email(inbox_id : String)
      send_test_email_with_http_info(inbox_id)
      nil
    end

    # Send a test email to inbox
    # Send an inbox a test email to test email receiving is working
    # @param inbox_id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def send_test_email_with_http_info(inbox_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.send_test_email ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.send_test_email")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/send-test-email".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"InboxControllerApi.send_test_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#send_test_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Set inbox favourited state
    # Set and return new favourite state for an inbox
    # @param inbox_id [String] 
    # @param set_inbox_favourited_options [SetInboxFavouritedOptions] 
    # @return [InboxDto]
    def set_inbox_favourited(inbox_id : String, set_inbox_favourited_options : SetInboxFavouritedOptions)
      data, _status_code, _headers = set_inbox_favourited_with_http_info(inbox_id, set_inbox_favourited_options)
      data
    end

    # Set inbox favourited state
    # Set and return new favourite state for an inbox
    # @param inbox_id [String] 
    # @param set_inbox_favourited_options [SetInboxFavouritedOptions] 
    # @return [Array<(InboxDto, Integer, Hash)>] InboxDto data, response status code and response headers
    def set_inbox_favourited_with_http_info(inbox_id : String, set_inbox_favourited_options : SetInboxFavouritedOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.set_inbox_favourited ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.set_inbox_favourited")
      end
      # verify the required parameter "set_inbox_favourited_options" is set
      if @api_client.config.client_side_validation && set_inbox_favourited_options.nil?
        raise ArgumentError.new("Missing the required parameter 'set_inbox_favourited_options' when calling InboxControllerApi.set_inbox_favourited")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}/favourite".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = set_inbox_favourited_options.to_json

      # return_type
      return_type = "InboxDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"InboxControllerApi.set_inbox_favourited",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#set_inbox_favourited\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxDto.from_json(data), status_code, headers
    end

    # Update Inbox. Change name and description. Email address is not editable.
    # Update editable fields on an inbox
    # @param inbox_id [String] 
    # @param update_inbox_options [UpdateInboxOptions] 
    # @return [InboxDto]
    def update_inbox(inbox_id : String, update_inbox_options : UpdateInboxOptions)
      data, _status_code, _headers = update_inbox_with_http_info(inbox_id, update_inbox_options)
      data
    end

    # Update Inbox. Change name and description. Email address is not editable.
    # Update editable fields on an inbox
    # @param inbox_id [String] 
    # @param update_inbox_options [UpdateInboxOptions] 
    # @return [Array<(InboxDto, Integer, Hash)>] InboxDto data, response status code and response headers
    def update_inbox_with_http_info(inbox_id : String, update_inbox_options : UpdateInboxOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: InboxControllerApi.update_inbox ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling InboxControllerApi.update_inbox")
      end
      # verify the required parameter "update_inbox_options" is set
      if @api_client.config.client_side_validation && update_inbox_options.nil?
        raise ArgumentError.new("Missing the required parameter 'update_inbox_options' when calling InboxControllerApi.update_inbox")
      end
      # resource path
      local_var_path = "/inboxes/{inboxId}".sub("{" + "inboxId" + "}", URI.encode(inbox_id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = update_inbox_options.to_json

      # return_type
      return_type = "InboxDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"InboxControllerApi.update_inbox",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: InboxControllerApi#update_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxDto.from_json(data), status_code, headers
    end
  end
end
