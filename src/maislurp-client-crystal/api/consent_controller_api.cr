# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class ConsentControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param email_address [String] Email address to check consent for
    # @return [OptInSendingConsentDto]
    def check_sending_consent_for_email_address(email_address : String)
      data, _status_code, _headers = check_sending_consent_for_email_address_with_http_info(email_address)
      data
    end

    # @param email_address [String] Email address to check consent for
    # @return [Array<(OptInSendingConsentDto, Integer, Hash)>] OptInSendingConsentDto data, response status code and response headers
    def check_sending_consent_for_email_address_with_http_info(email_address : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConsentControllerApi.check_sending_consent_for_email_address ..."}
      end
      # verify the required parameter "email_address" is set
      if @api_client.config.client_side_validation && email_address.nil?
        raise ArgumentError.new("Missing the required parameter 'email_address' when calling ConsentControllerApi.check_sending_consent_for_email_address")
      end
      # resource path
      local_var_path = "/consent/opt-in/sending-consent"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"emailAddress"] = email_address

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OptInSendingConsentDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConsentControllerApi.check_sending_consent_for_email_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConsentControllerApi#check_sending_consent_for_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OptInSendingConsentDto.from_json(data), status_code, headers
    end

    # @return [PageOptInIdentityProjection]
    def get_opt_in_identities(page : Int32?, size : Int32?, sort : String?)
      data, _status_code, _headers = get_opt_in_identities_with_http_info(page, size, sort)
      data
    end

    # @return [Array<(PageOptInIdentityProjection, Integer, Hash)>] PageOptInIdentityProjection data, response status code and response headers
    def get_opt_in_identities_with_http_info(page : Int32?, size : Int32?, sort : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConsentControllerApi.get_opt_in_identities ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/consent/opt-in"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageOptInIdentityProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"ConsentControllerApi.get_opt_in_identities",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConsentControllerApi#get_opt_in_identities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageOptInIdentityProjection.from_json(data), status_code, headers
    end

    # @param email_address [String] Email address to revoke consent for
    # @return [OptInSendingConsentDto]
    def revoke_opt_in_consent_for_email_address(email_address : String)
      data, _status_code, _headers = revoke_opt_in_consent_for_email_address_with_http_info(email_address)
      data
    end

    # @param email_address [String] Email address to revoke consent for
    # @return [Array<(OptInSendingConsentDto, Integer, Hash)>] OptInSendingConsentDto data, response status code and response headers
    def revoke_opt_in_consent_for_email_address_with_http_info(email_address : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConsentControllerApi.revoke_opt_in_consent_for_email_address ..."}
      end
      # verify the required parameter "email_address" is set
      if @api_client.config.client_side_validation && email_address.nil?
        raise ArgumentError.new("Missing the required parameter 'email_address' when calling ConsentControllerApi.revoke_opt_in_consent_for_email_address")
      end
      # resource path
      local_var_path = "/consent/opt-in"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"emailAddress"] = email_address

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "OptInSendingConsentDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"ConsentControllerApi.revoke_opt_in_consent_for_email_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConsentControllerApi#revoke_opt_in_consent_for_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OptInSendingConsentDto.from_json(data), status_code, headers
    end

    # Send a verification code to a user once they have explicitly submitted their email address
    # Send double-opt in consent for an email address
    # @param opt_in_consent_options [OptInConsentOptions] 
    # @return [OptInConsentSendResult]
    def send_opt_in_consent_for_email_address(opt_in_consent_options : OptInConsentOptions)
      data, _status_code, _headers = send_opt_in_consent_for_email_address_with_http_info(opt_in_consent_options)
      data
    end

    # Send a verification code to a user once they have explicitly submitted their email address
    # Send double-opt in consent for an email address
    # @param opt_in_consent_options [OptInConsentOptions] 
    # @return [Array<(OptInConsentSendResult, Integer, Hash)>] OptInConsentSendResult data, response status code and response headers
    def send_opt_in_consent_for_email_address_with_http_info(opt_in_consent_options : OptInConsentOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ConsentControllerApi.send_opt_in_consent_for_email_address ..."}
      end
      # verify the required parameter "opt_in_consent_options" is set
      if @api_client.config.client_side_validation && opt_in_consent_options.nil?
        raise ArgumentError.new("Missing the required parameter 'opt_in_consent_options' when calling ConsentControllerApi.send_opt_in_consent_for_email_address")
      end
      # resource path
      local_var_path = "/consent/opt-in/send"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = opt_in_consent_options.to_json

      # return_type
      return_type = "OptInConsentSendResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ConsentControllerApi.send_opt_in_consent_for_email_address",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ConsentControllerApi#send_opt_in_consent_for_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return OptInConsentSendResult.from_json(data), status_code, headers
    end
  end
end
