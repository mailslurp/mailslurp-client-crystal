# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class EmailVerificationControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete all validation requests
    # Remove validation requests
    # @return [nil]
    def delete_all_validation_requests()
      delete_all_validation_requests_with_http_info()
      nil
    end

    # Delete all validation requests
    # Remove validation requests
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_all_validation_requests_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: EmailVerificationControllerApi.delete_all_validation_requests ..."}
      end
      # resource path
      local_var_path = "/email-verification"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"EmailVerificationControllerApi.delete_all_validation_requests",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: EmailVerificationControllerApi#delete_all_validation_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete a validation record
    # Delete a validation record
    # @param id [String] 
    # @return [nil]
    def delete_validation_request(id : String)
      delete_validation_request_with_http_info(id)
      nil
    end

    # Delete a validation record
    # Delete a validation record
    # @param id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_validation_request_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: EmailVerificationControllerApi.delete_validation_request ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling EmailVerificationControllerApi.delete_validation_request")
      end
      # resource path
      local_var_path = "/email-verification/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"EmailVerificationControllerApi.delete_validation_request",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: EmailVerificationControllerApi#delete_validation_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Validate a list of email addresses. Per unit billing. See your plan for pricing.
    # List email verification requests
    # @return [PageEmailValidationRequest]
    def get_validation_requests(page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?, is_valid : Bool?)
      data, _status_code, _headers = get_validation_requests_with_http_info(page, size, sort, search_filter, since, before, is_valid)
      data
    end

    # Validate a list of email addresses. Per unit billing. See your plan for pricing.
    # List email verification requests
    # @return [Array<(PageEmailValidationRequest, Integer, Hash)>] PageEmailValidationRequest data, response status code and response headers
    def get_validation_requests_with_http_info(page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?, is_valid : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: EmailVerificationControllerApi.get_validation_requests ..."}
      end
      if @api_client.config.client_side_validation && !page.nil? && page > 9223372036854775807
        raise ArgumentError.new("invalid value for \"page\" when calling EmailVerificationControllerApi.get_validation_requests, must be smaller than or equal to 9223372036854775807.")
      end

      if @api_client.config.client_side_validation && !page.nil? && page < 0
        raise ArgumentError.new("invalid value for \"page\" when calling EmailVerificationControllerApi.get_validation_requests, must be greater than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling EmailVerificationControllerApi.get_validation_requests, must be smaller than or equal to 100.")
      end

      if @api_client.config.client_side_validation && !size.nil? && size < 1
        raise ArgumentError.new("invalid value for \"size\" when calling EmailVerificationControllerApi.get_validation_requests, must be greater than or equal to 1.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/email-verification/validation-requests"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before
      query_params[:"isValid"] = is_valid

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageEmailValidationRequest"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"EmailVerificationControllerApi.get_validation_requests",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: EmailVerificationControllerApi#get_validation_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageEmailValidationRequest.from_json(data), status_code, headers
    end

    # Validate a list of email addresses. Per unit billing. See your plan for pricing.
    # Verify a list of email addresses is valid and can be contacted.
    # @param validate_email_address_list_options [ValidateEmailAddressListOptions] 
    # @return [ValidateEmailAddressListResult]
    def validate_email_address_list(validate_email_address_list_options : ValidateEmailAddressListOptions)
      data, _status_code, _headers = validate_email_address_list_with_http_info(validate_email_address_list_options)
      data
    end

    # Validate a list of email addresses. Per unit billing. See your plan for pricing.
    # Verify a list of email addresses is valid and can be contacted.
    # @param validate_email_address_list_options [ValidateEmailAddressListOptions] 
    # @return [Array<(ValidateEmailAddressListResult, Integer, Hash)>] ValidateEmailAddressListResult data, response status code and response headers
    def validate_email_address_list_with_http_info(validate_email_address_list_options : ValidateEmailAddressListOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: EmailVerificationControllerApi.validate_email_address_list ..."}
      end
      # verify the required parameter "validate_email_address_list_options" is set
      if @api_client.config.client_side_validation && validate_email_address_list_options.nil?
        raise ArgumentError.new("Missing the required parameter 'validate_email_address_list_options' when calling EmailVerificationControllerApi.validate_email_address_list")
      end
      # resource path
      local_var_path = "/email-verification/email-address-list"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = validate_email_address_list_options.to_json

      # return_type
      return_type = "ValidateEmailAddressListResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"EmailVerificationControllerApi.validate_email_address_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: EmailVerificationControllerApi#validate_email_address_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ValidateEmailAddressListResult.from_json(data), status_code, headers
    end
  end
end
