# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class UserControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @return [PageEntityAutomationItems]
    def get_entity_automations(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, inbox_id : String?, phone_id : String?, filter : String?)
      data, _status_code, _headers = get_entity_automations_with_http_info(page, size, sort, since, before, inbox_id, phone_id, filter)
      data
    end

    # @return [Array<(PageEntityAutomationItems, Integer, Hash)>] PageEntityAutomationItems data, response status code and response headers
    def get_entity_automations_with_http_info(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, inbox_id : String?, phone_id : String?, filter : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UserControllerApi.get_entity_automations ..."}
      end
      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling UserControllerApi.get_entity_automations, must be smaller than or equal to 100.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      allowable_values = ["INBOX_FORWARDER", "INBOX_REPLIER", "INBOX_RULESET"]
      if @api_client.config.client_side_validation && filter && !allowable_values.includes?(filter)
        raise ArgumentError.new("invalid value for \"filter\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/user/automations"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before
      query_params[:"inboxId"] = inbox_id
      query_params[:"phoneId"] = phone_id
      query_params[:"filter"] = filter

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageEntityAutomationItems"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"UserControllerApi.get_entity_automations",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UserControllerApi#get_entity_automations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageEntityAutomationItems.from_json(data), status_code, headers
    end

    # @return [PageEntityEventItems]
    def get_entity_events(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, inbox_id : String?, email_id : String?, phone_id : String?, sms_id : String?, attachment_id : String?, filter : String?)
      data, _status_code, _headers = get_entity_events_with_http_info(page, size, sort, since, before, inbox_id, email_id, phone_id, sms_id, attachment_id, filter)
      data
    end

    # @return [Array<(PageEntityEventItems, Integer, Hash)>] PageEntityEventItems data, response status code and response headers
    def get_entity_events_with_http_info(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, inbox_id : String?, email_id : String?, phone_id : String?, sms_id : String?, attachment_id : String?, filter : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UserControllerApi.get_entity_events ..."}
      end
      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling UserControllerApi.get_entity_events, must be smaller than or equal to 100.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      allowable_values = ["WEBHOOK_EVENT", "INBOX_FORWARDER_EVENT", "INBOX_REPLIER_EVENT", "INBOX_RULESET_EVENT", "ALIAS_EVENT"]
      if @api_client.config.client_side_validation && filter && !allowable_values.includes?(filter)
        raise ArgumentError.new("invalid value for \"filter\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/user/events"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before
      query_params[:"inboxId"] = inbox_id
      query_params[:"emailId"] = email_id
      query_params[:"phoneId"] = phone_id
      query_params[:"smsId"] = sms_id
      query_params[:"attachmentId"] = attachment_id
      query_params[:"filter"] = filter

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageEntityEventItems"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"UserControllerApi.get_entity_events",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UserControllerApi#get_entity_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageEntityEventItems.from_json(data), status_code, headers
    end

    # @return [PageEntityFavouriteItems]
    def get_entity_favorites(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, filter : String?)
      data, _status_code, _headers = get_entity_favorites_with_http_info(page, size, sort, since, before, filter)
      data
    end

    # @return [Array<(PageEntityFavouriteItems, Integer, Hash)>] PageEntityFavouriteItems data, response status code and response headers
    def get_entity_favorites_with_http_info(page : Int32?, size : Int32?, sort : String?, since : Time?, before : Time?, filter : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: UserControllerApi.get_entity_favorites ..."}
      end
      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling UserControllerApi.get_entity_favorites, must be smaller than or equal to 100.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      allowable_values = ["INBOX", "EMAIL", "ATTACHMENT", "PHONE", "SMS"]
      if @api_client.config.client_side_validation && filter && !allowable_values.includes?(filter)
        raise ArgumentError.new("invalid value for \"filter\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/user/favorites"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"since"] = since
      query_params[:"before"] = before
      query_params[:"filter"] = filter

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageEntityFavouriteItems"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"UserControllerApi.get_entity_favorites",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UserControllerApi#get_entity_favorites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageEntityFavouriteItems.from_json(data), status_code, headers
    end

    # Utility function to extract properties from JSON objects in language where this is cumbersome.
    # @param property [String] JSON property name or dot separated path selector such as &#x60;a.b.c&#x60;
    # @param body [Object] 
    # @return [String]
    def get_json_property_as_string(property : String, body : Object)
      data, _status_code, _headers = get_json_property_as_string_with_http_info(property, body)
      data
    end

    # Utility function to extract properties from JSON objects in language where this is cumbersome.
    # @param property [String] JSON property name or dot separated path selector such as &#x60;a.b.c&#x60;
    # @param body [Object] 
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_json_property_as_string_with_http_info(property : String, body : Object)
      if @api_client.config.debugging
        Log.debug {"Calling API: UserControllerApi.get_json_property_as_string ..."}
      end
      # verify the required parameter "property" is set
      if @api_client.config.client_side_validation && property.nil?
        raise ArgumentError.new("Missing the required parameter 'property' when calling UserControllerApi.get_json_property_as_string")
      end
      # resource path
      local_var_path = "/user/json/pluck"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"property"] = property

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = body.to_json

      # return_type
      return_type = "String"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"UserControllerApi.get_json_property_as_string",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UserControllerApi#get_json_property_as_string\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Get account information for your user
    # @return [UserInfoDto]
    def get_user_info()
      data, _status_code, _headers = get_user_info_with_http_info()
      data
    end

    # Get account information for your user
    # @return [Array<(UserInfoDto, Integer, Hash)>] UserInfoDto data, response status code and response headers
    def get_user_info_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: UserControllerApi.get_user_info ..."}
      end
      # resource path
      local_var_path = "/user/info"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "UserInfoDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"UserControllerApi.get_user_info",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: UserControllerApi#get_user_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return UserInfoDto.from_json(data), status_code, headers
    end
  end
end
