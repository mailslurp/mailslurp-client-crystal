# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class AIControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Generate structured content for an email
    # Use output schemas to extract data from an email using AI
    # @param generate_structured_content_email_options [GenerateStructuredContentEmailOptions] 
    # @return [StructuredContentResult]
    def generate_structured_content_from_email(generate_structured_content_email_options : GenerateStructuredContentEmailOptions)
      data, _status_code, _headers = generate_structured_content_from_email_with_http_info(generate_structured_content_email_options)
      data
    end

    # Generate structured content for an email
    # Use output schemas to extract data from an email using AI
    # @param generate_structured_content_email_options [GenerateStructuredContentEmailOptions] 
    # @return [Array<(StructuredContentResult, Integer, Hash)>] StructuredContentResult data, response status code and response headers
    def generate_structured_content_from_email_with_http_info(generate_structured_content_email_options : GenerateStructuredContentEmailOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.generate_structured_content_from_email ..."}
      end
      # verify the required parameter "generate_structured_content_email_options" is set
      if @api_client.config.client_side_validation && generate_structured_content_email_options.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_structured_content_email_options' when calling AIControllerApi.generate_structured_content_from_email")
      end
      # resource path
      local_var_path = "/ai/structured-content/email"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = generate_structured_content_email_options.to_json

      # return_type
      return_type = "StructuredContentResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AIControllerApi.generate_structured_content_from_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#generate_structured_content_from_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return StructuredContentResult.from_json(data), status_code, headers
    end

    # Validate structured content schema
    # Check if a schema is valid and can be used to extract data using AI
    # @param structured_output_schema [StructuredOutputSchema] 
    # @return [StructuredOutputSchemaValidation]
    def validate_structured_output_schema(structured_output_schema : StructuredOutputSchema)
      data, _status_code, _headers = validate_structured_output_schema_with_http_info(structured_output_schema)
      data
    end

    # Validate structured content schema
    # Check if a schema is valid and can be used to extract data using AI
    # @param structured_output_schema [StructuredOutputSchema] 
    # @return [Array<(StructuredOutputSchemaValidation, Integer, Hash)>] StructuredOutputSchemaValidation data, response status code and response headers
    def validate_structured_output_schema_with_http_info(structured_output_schema : StructuredOutputSchema)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.validate_structured_output_schema ..."}
      end
      # verify the required parameter "structured_output_schema" is set
      if @api_client.config.client_side_validation && structured_output_schema.nil?
        raise ArgumentError.new("Missing the required parameter 'structured_output_schema' when calling AIControllerApi.validate_structured_output_schema")
      end
      # resource path
      local_var_path = "/ai/structured-content/validate"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = structured_output_schema.to_json

      # return_type
      return_type = "StructuredOutputSchemaValidation"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AIControllerApi.validate_structured_output_schema",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#validate_structured_output_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return StructuredOutputSchemaValidation.from_json(data), status_code, headers
    end
  end
end
