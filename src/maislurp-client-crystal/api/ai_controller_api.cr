# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class AIControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a transformer for reuse in automations
    # Save an AI transform instructions and schema for use with webhooks and automations
    # @param ai_transform_create_options [AITransformCreateOptions] 
    # @return [AITransformDto]
    def create_transformer(ai_transform_create_options : AITransformCreateOptions)
      data, _status_code, _headers = create_transformer_with_http_info(ai_transform_create_options)
      data
    end

    # Create a transformer for reuse in automations
    # Save an AI transform instructions and schema for use with webhooks and automations
    # @param ai_transform_create_options [AITransformCreateOptions] 
    # @return [Array<(AITransformDto, Integer, Hash)>] AITransformDto data, response status code and response headers
    def create_transformer_with_http_info(ai_transform_create_options : AITransformCreateOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.create_transformer ..."}
      end
      # verify the required parameter "ai_transform_create_options" is set
      if @api_client.config.client_side_validation && ai_transform_create_options.nil?
        raise ArgumentError.new("Missing the required parameter 'ai_transform_create_options' when calling AIControllerApi.create_transformer")
      end
      # resource path
      local_var_path = "/ai/transformer"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = ai_transform_create_options.to_json

      # return_type
      return_type = "AITransformDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AIControllerApi.create_transformer",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#create_transformer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AITransformDto.from_json(data), status_code, headers
    end

    # Create transformer mapping
    # Create AI transformer mappings to other entities
    # @param create_ai_transformer_mapping_options [CreateAITransformerMappingOptions] 
    # @return [AITransformMappingDto]
    def create_transformer_mappings(create_ai_transformer_mapping_options : CreateAITransformerMappingOptions)
      data, _status_code, _headers = create_transformer_mappings_with_http_info(create_ai_transformer_mapping_options)
      data
    end

    # Create transformer mapping
    # Create AI transformer mappings to other entities
    # @param create_ai_transformer_mapping_options [CreateAITransformerMappingOptions] 
    # @return [Array<(AITransformMappingDto, Integer, Hash)>] AITransformMappingDto data, response status code and response headers
    def create_transformer_mappings_with_http_info(create_ai_transformer_mapping_options : CreateAITransformerMappingOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.create_transformer_mappings ..."}
      end
      # verify the required parameter "create_ai_transformer_mapping_options" is set
      if @api_client.config.client_side_validation && create_ai_transformer_mapping_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_ai_transformer_mapping_options' when calling AIControllerApi.create_transformer_mappings")
      end
      # resource path
      local_var_path = "/ai/transformer/mappings"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_ai_transformer_mapping_options.to_json

      # return_type
      return_type = "AITransformMappingDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AIControllerApi.create_transformer_mappings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#create_transformer_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AITransformMappingDto.from_json(data), status_code, headers
    end

    # Delete all transformer mapping
    # Delete all AI transformer mappings
    # @return [nil]
    def delete_all_transformer_mappings()
      delete_all_transformer_mappings_with_http_info()
      nil
    end

    # Delete all transformer mapping
    # Delete all AI transformer mappings
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_all_transformer_mappings_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.delete_all_transformer_mappings ..."}
      end
      # resource path
      local_var_path = "/ai/transformer/mappings"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"AIControllerApi.delete_all_transformer_mappings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#delete_all_transformer_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete a transformer
    # Delete an AI transformer and schemas by ID
    # @param id [String] 
    # @return [nil]
    def delete_transformer(id : String)
      delete_transformer_with_http_info(id)
      nil
    end

    # Delete a transformer
    # Delete an AI transformer and schemas by ID
    # @param id [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_transformer_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.delete_transformer ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling AIControllerApi.delete_transformer")
      end
      # resource path
      local_var_path = "/ai/transformer/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"AIControllerApi.delete_transformer",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#delete_transformer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete transformer mapping
    # Delete an AI transformer mapping
    # @param id [String] ID of transform mapping
    # @return [nil]
    def delete_transformer_mapping(id : String)
      delete_transformer_mapping_with_http_info(id)
      nil
    end

    # Delete transformer mapping
    # Delete an AI transformer mapping
    # @param id [String] ID of transform mapping
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_transformer_mapping_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.delete_transformer_mapping ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling AIControllerApi.delete_transformer_mapping")
      end
      # resource path
      local_var_path = "/ai/transformer/mappings/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"AIControllerApi.delete_transformer_mapping",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#delete_transformer_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete all transformers
    # Delete all AI transformers and schemas
    # @return [nil]
    def delete_transformers()
      delete_transformers_with_http_info()
      nil
    end

    # Delete all transformers
    # Delete all AI transformers and schemas
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_transformers_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.delete_transformers ..."}
      end
      # resource path
      local_var_path = "/ai/transformer"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"AIControllerApi.delete_transformers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#delete_transformers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Generate structured content for an attachment
    # Use output schemas to extract data from an attachment using AI
    # @param generate_structured_content_attachment_options [GenerateStructuredContentAttachmentOptions] 
    # @return [StructuredContentResultDto]
    def generate_structured_content_from_attachment(generate_structured_content_attachment_options : GenerateStructuredContentAttachmentOptions)
      data, _status_code, _headers = generate_structured_content_from_attachment_with_http_info(generate_structured_content_attachment_options)
      data
    end

    # Generate structured content for an attachment
    # Use output schemas to extract data from an attachment using AI
    # @param generate_structured_content_attachment_options [GenerateStructuredContentAttachmentOptions] 
    # @return [Array<(StructuredContentResultDto, Integer, Hash)>] StructuredContentResultDto data, response status code and response headers
    def generate_structured_content_from_attachment_with_http_info(generate_structured_content_attachment_options : GenerateStructuredContentAttachmentOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.generate_structured_content_from_attachment ..."}
      end
      # verify the required parameter "generate_structured_content_attachment_options" is set
      if @api_client.config.client_side_validation && generate_structured_content_attachment_options.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_structured_content_attachment_options' when calling AIControllerApi.generate_structured_content_from_attachment")
      end
      # resource path
      local_var_path = "/ai/structured-content/attachment"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = generate_structured_content_attachment_options.to_json

      # return_type
      return_type = "StructuredContentResultDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AIControllerApi.generate_structured_content_from_attachment",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#generate_structured_content_from_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return StructuredContentResultDto.from_json(data), status_code, headers
    end

    # Generate structured content for an email
    # Use output schemas to extract data from an email using AI
    # @param generate_structured_content_email_options [GenerateStructuredContentEmailOptions] 
    # @return [StructuredContentResultDto]
    def generate_structured_content_from_email(generate_structured_content_email_options : GenerateStructuredContentEmailOptions)
      data, _status_code, _headers = generate_structured_content_from_email_with_http_info(generate_structured_content_email_options)
      data
    end

    # Generate structured content for an email
    # Use output schemas to extract data from an email using AI
    # @param generate_structured_content_email_options [GenerateStructuredContentEmailOptions] 
    # @return [Array<(StructuredContentResultDto, Integer, Hash)>] StructuredContentResultDto data, response status code and response headers
    def generate_structured_content_from_email_with_http_info(generate_structured_content_email_options : GenerateStructuredContentEmailOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.generate_structured_content_from_email ..."}
      end
      # verify the required parameter "generate_structured_content_email_options" is set
      if @api_client.config.client_side_validation && generate_structured_content_email_options.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_structured_content_email_options' when calling AIControllerApi.generate_structured_content_from_email")
      end
      # resource path
      local_var_path = "/ai/structured-content/email"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = generate_structured_content_email_options.to_json

      # return_type
      return_type = "StructuredContentResultDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AIControllerApi.generate_structured_content_from_email",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#generate_structured_content_from_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return StructuredContentResultDto.from_json(data), status_code, headers
    end

    # Generate structured content for a TXT message
    # Use output schemas to extract data from an SMS using AI
    # @param generate_structured_content_sms_options [GenerateStructuredContentSmsOptions] 
    # @return [StructuredContentResultDto]
    def generate_structured_content_from_sms(generate_structured_content_sms_options : GenerateStructuredContentSmsOptions)
      data, _status_code, _headers = generate_structured_content_from_sms_with_http_info(generate_structured_content_sms_options)
      data
    end

    # Generate structured content for a TXT message
    # Use output schemas to extract data from an SMS using AI
    # @param generate_structured_content_sms_options [GenerateStructuredContentSmsOptions] 
    # @return [Array<(StructuredContentResultDto, Integer, Hash)>] StructuredContentResultDto data, response status code and response headers
    def generate_structured_content_from_sms_with_http_info(generate_structured_content_sms_options : GenerateStructuredContentSmsOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.generate_structured_content_from_sms ..."}
      end
      # verify the required parameter "generate_structured_content_sms_options" is set
      if @api_client.config.client_side_validation && generate_structured_content_sms_options.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_structured_content_sms_options' when calling AIControllerApi.generate_structured_content_from_sms")
      end
      # resource path
      local_var_path = "/ai/structured-content/sms"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = generate_structured_content_sms_options.to_json

      # return_type
      return_type = "StructuredContentResultDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AIControllerApi.generate_structured_content_from_sms",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#generate_structured_content_from_sms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return StructuredContentResultDto.from_json(data), status_code, headers
    end

    # Get a transformer
    # Get AI transformer and schemas by ID
    # @param id [String] 
    # @return [AITransformDto]
    def get_transformer(id : String)
      data, _status_code, _headers = get_transformer_with_http_info(id)
      data
    end

    # Get a transformer
    # Get AI transformer and schemas by ID
    # @param id [String] 
    # @return [Array<(AITransformDto, Integer, Hash)>] AITransformDto data, response status code and response headers
    def get_transformer_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.get_transformer ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling AIControllerApi.get_transformer")
      end
      # resource path
      local_var_path = "/ai/transformer/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AITransformDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AIControllerApi.get_transformer",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#get_transformer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AITransformDto.from_json(data), status_code, headers
    end

    # Get transformer mapping
    # Get an AI transformer mapping
    # @param id [String] ID of transform mapping
    # @return [AITransformMappingDto]
    def get_transformer_mapping(id : String)
      data, _status_code, _headers = get_transformer_mapping_with_http_info(id)
      data
    end

    # Get transformer mapping
    # Get an AI transformer mapping
    # @param id [String] ID of transform mapping
    # @return [Array<(AITransformMappingDto, Integer, Hash)>] AITransformMappingDto data, response status code and response headers
    def get_transformer_mapping_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.get_transformer_mapping ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling AIControllerApi.get_transformer_mapping")
      end
      # resource path
      local_var_path = "/ai/transformer/mappings/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AITransformMappingDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AIControllerApi.get_transformer_mapping",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#get_transformer_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AITransformMappingDto.from_json(data), status_code, headers
    end

    # Get transformer mappings
    # Get AI transformer mappings to other entities
    # @return [PageAITransformMappingProjection]
    def get_transformer_mappings(ai_transform_id : String?, entity_id : String?, entity_type : String?, page : Int32?, size : Int32?, sort : String?)
      data, _status_code, _headers = get_transformer_mappings_with_http_info(ai_transform_id, entity_id, entity_type, page, size, sort)
      data
    end

    # Get transformer mappings
    # Get AI transformer mappings to other entities
    # @return [Array<(PageAITransformMappingProjection, Integer, Hash)>] PageAITransformMappingProjection data, response status code and response headers
    def get_transformer_mappings_with_http_info(ai_transform_id : String?, entity_id : String?, entity_type : String?, page : Int32?, size : Int32?, sort : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.get_transformer_mappings ..."}
      end
      allowable_values = ["INBOX", "PHONE"]
      if @api_client.config.client_side_validation && entity_type && !allowable_values.includes?(entity_type)
        raise ArgumentError.new("invalid value for \"entity_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling AIControllerApi.get_transformer_mappings, must be smaller than or equal to 100.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ai/transformer/mappings"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"aiTransformId"] = ai_transform_id
      query_params[:"entityId"] = entity_id
      query_params[:"entityType"] = entity_type
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageAITransformMappingProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AIControllerApi.get_transformer_mappings",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#get_transformer_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageAITransformMappingProjection.from_json(data), status_code, headers
    end

    # Get transformer result
    # Get AI transformer result
    # @param id [String] ID of transform result
    # @return [AITransformResultDto]
    def get_transformer_result(id : String)
      data, _status_code, _headers = get_transformer_result_with_http_info(id)
      data
    end

    # Get transformer result
    # Get AI transformer result
    # @param id [String] ID of transform result
    # @return [Array<(AITransformResultDto, Integer, Hash)>] AITransformResultDto data, response status code and response headers
    def get_transformer_result_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.get_transformer_result ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling AIControllerApi.get_transformer_result")
      end
      # resource path
      local_var_path = "/ai/transformer/results/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "AITransformResultDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AIControllerApi.get_transformer_result",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#get_transformer_result\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return AITransformResultDto.from_json(data), status_code, headers
    end

    # Get transformer results
    # Get AI transformer results
    # @return [PageAITransformResultProjection]
    def get_transformer_results(ai_transform_id : String?, ai_transform_mapping_id : String?, entity_id : String?, entity_type : String?, page : Int32?, size : Int32?, sort : String?)
      data, _status_code, _headers = get_transformer_results_with_http_info(ai_transform_id, ai_transform_mapping_id, entity_id, entity_type, page, size, sort)
      data
    end

    # Get transformer results
    # Get AI transformer results
    # @return [Array<(PageAITransformResultProjection, Integer, Hash)>] PageAITransformResultProjection data, response status code and response headers
    def get_transformer_results_with_http_info(ai_transform_id : String?, ai_transform_mapping_id : String?, entity_id : String?, entity_type : String?, page : Int32?, size : Int32?, sort : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.get_transformer_results ..."}
      end
      allowable_values = ["INBOX", "PHONE"]
      if @api_client.config.client_side_validation && entity_type && !allowable_values.includes?(entity_type)
        raise ArgumentError.new("invalid value for \"entity_type\", must be one of #{allowable_values}")
      end
      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling AIControllerApi.get_transformer_results, must be smaller than or equal to 100.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ai/transformer/results"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"aiTransformId"] = ai_transform_id
      query_params[:"aiTransformMappingId"] = ai_transform_mapping_id
      query_params[:"entityId"] = entity_id
      query_params[:"entityType"] = entity_type
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageAITransformResultProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AIControllerApi.get_transformer_results",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#get_transformer_results\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageAITransformResultProjection.from_json(data), status_code, headers
    end

    # List transformers
    # List all AI transforms
    # @return [PageAITransformProjection]
    def get_transformers(page : Int32?, size : Int32?, sort : String?, _include : Array(String)?)
      data, _status_code, _headers = get_transformers_with_http_info(page, size, sort, _include)
      data
    end

    # List transformers
    # List all AI transforms
    # @return [Array<(PageAITransformProjection, Integer, Hash)>] PageAITransformProjection data, response status code and response headers
    def get_transformers_with_http_info(page : Int32?, size : Int32?, sort : String?, _include : Array(String)?)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.get_transformers ..."}
      end
      if @api_client.config.client_side_validation && !size.nil? && size > 100
        raise ArgumentError.new("invalid value for \"size\" when calling AIControllerApi.get_transformers, must be smaller than or equal to 100.")
      end

      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/ai/transformer"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"include"] = @api_client.build_collection_param(_include, :multi)

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageAITransformProjection"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"AIControllerApi.get_transformers",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#get_transformers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageAITransformProjection.from_json(data), status_code, headers
    end

    # Invoke a transformer
    # Execute an AI transformer to generate structured content
    # @param invoke_transformer_options [InvokeTransformerOptions] 
    # @return [ConditionalStructuredContentResult]
    def invoke_transformer(invoke_transformer_options : InvokeTransformerOptions)
      data, _status_code, _headers = invoke_transformer_with_http_info(invoke_transformer_options)
      data
    end

    # Invoke a transformer
    # Execute an AI transformer to generate structured content
    # @param invoke_transformer_options [InvokeTransformerOptions] 
    # @return [Array<(ConditionalStructuredContentResult, Integer, Hash)>] ConditionalStructuredContentResult data, response status code and response headers
    def invoke_transformer_with_http_info(invoke_transformer_options : InvokeTransformerOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.invoke_transformer ..."}
      end
      # verify the required parameter "invoke_transformer_options" is set
      if @api_client.config.client_side_validation && invoke_transformer_options.nil?
        raise ArgumentError.new("Missing the required parameter 'invoke_transformer_options' when calling AIControllerApi.invoke_transformer")
      end
      # resource path
      local_var_path = "/ai/transformer/invoke"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = invoke_transformer_options.to_json

      # return_type
      return_type = "ConditionalStructuredContentResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AIControllerApi.invoke_transformer",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#invoke_transformer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ConditionalStructuredContentResult.from_json(data), status_code, headers
    end

    # Validate structured content schema
    # Check if a schema is valid and can be used to extract data using AI
    # @param structured_output_schema [StructuredOutputSchema] 
    # @return [StructuredOutputSchemaValidation]
    def validate_structured_output_schema(structured_output_schema : StructuredOutputSchema)
      data, _status_code, _headers = validate_structured_output_schema_with_http_info(structured_output_schema)
      data
    end

    # Validate structured content schema
    # Check if a schema is valid and can be used to extract data using AI
    # @param structured_output_schema [StructuredOutputSchema] 
    # @return [Array<(StructuredOutputSchemaValidation, Integer, Hash)>] StructuredOutputSchemaValidation data, response status code and response headers
    def validate_structured_output_schema_with_http_info(structured_output_schema : StructuredOutputSchema)
      if @api_client.config.debugging
        Log.debug {"Calling API: AIControllerApi.validate_structured_output_schema ..."}
      end
      # resource path
      local_var_path = "/ai/structured-content/validate"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = structured_output_schema.to_json

      # return_type
      return_type = "StructuredOutputSchemaValidation"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"AIControllerApi.validate_structured_output_schema",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: AIControllerApi#validate_structured_output_schema\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return StructuredOutputSchemaValidation.from_json(data), status_code, headers
    end
  end
end
