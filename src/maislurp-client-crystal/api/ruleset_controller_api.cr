# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class RulesetControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a ruleset
    # Create a new inbox or phone number rule for forwarding, blocking, and allowing emails or SMS when sending and receiving
    # @param create_ruleset_options [CreateRulesetOptions] 
    # @return [RulesetDto]
    def create_new_ruleset(create_ruleset_options : CreateRulesetOptions, inbox_id : String?, phone_id : String?)
      data, _status_code, _headers = create_new_ruleset_with_http_info(create_ruleset_options, inbox_id, phone_id)
      data
    end

    # Create a ruleset
    # Create a new inbox or phone number rule for forwarding, blocking, and allowing emails or SMS when sending and receiving
    # @param create_ruleset_options [CreateRulesetOptions] 
    # @return [Array<(RulesetDto, Integer, Hash)>] RulesetDto data, response status code and response headers
    def create_new_ruleset_with_http_info(create_ruleset_options : CreateRulesetOptions, inbox_id : String?, phone_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RulesetControllerApi.create_new_ruleset ..."}
      end
      # verify the required parameter "create_ruleset_options" is set
      if @api_client.config.client_side_validation && create_ruleset_options.nil?
        raise ArgumentError.new("Missing the required parameter 'create_ruleset_options' when calling RulesetControllerApi.create_new_ruleset")
      end
      # resource path
      local_var_path = "/rulesets"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id
      query_params[:"phoneId"] = phone_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = create_ruleset_options.to_json

      # return_type
      return_type = "RulesetDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RulesetControllerApi.create_new_ruleset",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RulesetControllerApi#create_new_ruleset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RulesetDto.from_json(data), status_code, headers
    end

    # Delete a ruleset
    # Delete ruleset
    # @param id [String] ID of ruleset
    # @return [nil]
    def delete_ruleset(id : String)
      delete_ruleset_with_http_info(id)
      nil
    end

    # Delete a ruleset
    # Delete ruleset
    # @param id [String] ID of ruleset
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_ruleset_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: RulesetControllerApi.delete_ruleset ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling RulesetControllerApi.delete_ruleset")
      end
      # resource path
      local_var_path = "/rulesets/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"RulesetControllerApi.delete_ruleset",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RulesetControllerApi#delete_ruleset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete rulesets
    # Delete rulesets. Accepts optional inboxId or phoneId filters.
    # @return [nil]
    def delete_rulesets(inbox_id : String?, phone_id : String?)
      delete_rulesets_with_http_info(inbox_id, phone_id)
      nil
    end

    # Delete rulesets
    # Delete rulesets. Accepts optional inboxId or phoneId filters.
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_rulesets_with_http_info(inbox_id : String?, phone_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RulesetControllerApi.delete_rulesets ..."}
      end
      # resource path
      local_var_path = "/rulesets"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id
      query_params[:"phoneId"] = phone_id

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"RulesetControllerApi.delete_rulesets",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RulesetControllerApi#delete_rulesets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Get a ruleset
    # Get ruleset
    # @param id [String] ID of ruleset
    # @return [RulesetDto]
    def get_ruleset(id : String)
      data, _status_code, _headers = get_ruleset_with_http_info(id)
      data
    end

    # Get a ruleset
    # Get ruleset
    # @param id [String] ID of ruleset
    # @return [Array<(RulesetDto, Integer, Hash)>] RulesetDto data, response status code and response headers
    def get_ruleset_with_http_info(id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: RulesetControllerApi.get_ruleset ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling RulesetControllerApi.get_ruleset")
      end
      # resource path
      local_var_path = "/rulesets/{id}".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "RulesetDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RulesetControllerApi.get_ruleset",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RulesetControllerApi#get_ruleset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return RulesetDto.from_json(data), status_code, headers
    end

    # List rulesets block and allow lists
    # List all rulesets attached to an inbox or phone or account
    # @return [PageRulesetDto]
    def get_rulesets(inbox_id : String?, phone_id : String?, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      data, _status_code, _headers = get_rulesets_with_http_info(inbox_id, phone_id, page, size, sort, search_filter, since, before)
      data
    end

    # List rulesets block and allow lists
    # List all rulesets attached to an inbox or phone or account
    # @return [Array<(PageRulesetDto, Integer, Hash)>] PageRulesetDto data, response status code and response headers
    def get_rulesets_with_http_info(inbox_id : String?, phone_id : String?, page : Int32?, size : Int32?, sort : String?, search_filter : String?, since : Time?, before : Time?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RulesetControllerApi.get_rulesets ..."}
      end
      allowable_values = ["ASC", "DESC"]
      if @api_client.config.client_side_validation && sort && !allowable_values.includes?(sort)
        raise ArgumentError.new("invalid value for \"sort\", must be one of #{allowable_values}")
      end
      # resource path
      local_var_path = "/rulesets"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id
      query_params[:"phoneId"] = phone_id
      query_params[:"page"] = page
      query_params[:"size"] = size
      query_params[:"sort"] = sort
      query_params[:"searchFilter"] = search_filter
      query_params[:"since"] = since
      query_params[:"before"] = before

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PageRulesetDto"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RulesetControllerApi.get_rulesets",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RulesetControllerApi#get_rulesets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PageRulesetDto.from_json(data), status_code, headers
    end

    # Test inbox rulesets for inbox
    # Test inbox rulesets for inbox
    # @param inbox_id [String] ID of inbox
    # @param ruleset_test_options [RulesetTestOptions] 
    # @return [InboxRulesetTestResult]
    def test_inbox_rulesets_for_inbox(inbox_id : String, ruleset_test_options : RulesetTestOptions)
      data, _status_code, _headers = test_inbox_rulesets_for_inbox_with_http_info(inbox_id, ruleset_test_options)
      data
    end

    # Test inbox rulesets for inbox
    # Test inbox rulesets for inbox
    # @param inbox_id [String] ID of inbox
    # @param ruleset_test_options [RulesetTestOptions] 
    # @return [Array<(InboxRulesetTestResult, Integer, Hash)>] InboxRulesetTestResult data, response status code and response headers
    def test_inbox_rulesets_for_inbox_with_http_info(inbox_id : String, ruleset_test_options : RulesetTestOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: RulesetControllerApi.test_inbox_rulesets_for_inbox ..."}
      end
      # verify the required parameter "inbox_id" is set
      if @api_client.config.client_side_validation && inbox_id.nil?
        raise ArgumentError.new("Missing the required parameter 'inbox_id' when calling RulesetControllerApi.test_inbox_rulesets_for_inbox")
      end
      # verify the required parameter "ruleset_test_options" is set
      if @api_client.config.client_side_validation && ruleset_test_options.nil?
        raise ArgumentError.new("Missing the required parameter 'ruleset_test_options' when calling RulesetControllerApi.test_inbox_rulesets_for_inbox")
      end
      # resource path
      local_var_path = "/rulesets"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = ruleset_test_options.to_json

      # return_type
      return_type = "InboxRulesetTestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"RulesetControllerApi.test_inbox_rulesets_for_inbox",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RulesetControllerApi#test_inbox_rulesets_for_inbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxRulesetTestResult.from_json(data), status_code, headers
    end

    # Test new ruleset
    # Test new ruleset
    # @param test_new_inbox_ruleset_options [TestNewInboxRulesetOptions] 
    # @return [InboxRulesetTestResult]
    def test_new_ruleset(test_new_inbox_ruleset_options : TestNewInboxRulesetOptions)
      data, _status_code, _headers = test_new_ruleset_with_http_info(test_new_inbox_ruleset_options)
      data
    end

    # Test new ruleset
    # Test new ruleset
    # @param test_new_inbox_ruleset_options [TestNewInboxRulesetOptions] 
    # @return [Array<(InboxRulesetTestResult, Integer, Hash)>] InboxRulesetTestResult data, response status code and response headers
    def test_new_ruleset_with_http_info(test_new_inbox_ruleset_options : TestNewInboxRulesetOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: RulesetControllerApi.test_new_ruleset ..."}
      end
      # verify the required parameter "test_new_inbox_ruleset_options" is set
      if @api_client.config.client_side_validation && test_new_inbox_ruleset_options.nil?
        raise ArgumentError.new("Missing the required parameter 'test_new_inbox_ruleset_options' when calling RulesetControllerApi.test_new_ruleset")
      end
      # resource path
      local_var_path = "/rulesets"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = test_new_inbox_ruleset_options.to_json

      # return_type
      return_type = "InboxRulesetTestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:PATCH,
                                                        local_var_path,
                                                        :"RulesetControllerApi.test_new_ruleset",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RulesetControllerApi#test_new_ruleset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxRulesetTestResult.from_json(data), status_code, headers
    end

    # Test a ruleset
    # Test an inbox or phone ruleset
    # @param id [String] ID of ruleset
    # @param ruleset_test_options [RulesetTestOptions] 
    # @return [InboxRulesetTestResult]
    def test_ruleset(id : String, ruleset_test_options : RulesetTestOptions)
      data, _status_code, _headers = test_ruleset_with_http_info(id, ruleset_test_options)
      data
    end

    # Test a ruleset
    # Test an inbox or phone ruleset
    # @param id [String] ID of ruleset
    # @param ruleset_test_options [RulesetTestOptions] 
    # @return [Array<(InboxRulesetTestResult, Integer, Hash)>] InboxRulesetTestResult data, response status code and response headers
    def test_ruleset_with_http_info(id : String, ruleset_test_options : RulesetTestOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: RulesetControllerApi.test_ruleset ..."}
      end
      # verify the required parameter "id" is set
      if @api_client.config.client_side_validation && id.nil?
        raise ArgumentError.new("Missing the required parameter 'id' when calling RulesetControllerApi.test_ruleset")
      end
      # verify the required parameter "ruleset_test_options" is set
      if @api_client.config.client_side_validation && ruleset_test_options.nil?
        raise ArgumentError.new("Missing the required parameter 'ruleset_test_options' when calling RulesetControllerApi.test_ruleset")
      end
      # resource path
      local_var_path = "/rulesets/{id}/test".sub("{" + "id" + "}", URI.encode(id.to_s))

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = ruleset_test_options.to_json

      # return_type
      return_type = "InboxRulesetTestResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RulesetControllerApi.test_ruleset",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RulesetControllerApi#test_ruleset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return InboxRulesetTestResult.from_json(data), status_code, headers
    end

    # Test receiving with rulesets
    # Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets or test if phone number can receive SMS
    # @param test_ruleset_receiving_options [TestRulesetReceivingOptions] 
    # @return [TestRulesetReceivingResult]
    def test_ruleset_receiving(test_ruleset_receiving_options : TestRulesetReceivingOptions)
      data, _status_code, _headers = test_ruleset_receiving_with_http_info(test_ruleset_receiving_options)
      data
    end

    # Test receiving with rulesets
    # Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets or test if phone number can receive SMS
    # @param test_ruleset_receiving_options [TestRulesetReceivingOptions] 
    # @return [Array<(TestRulesetReceivingResult, Integer, Hash)>] TestRulesetReceivingResult data, response status code and response headers
    def test_ruleset_receiving_with_http_info(test_ruleset_receiving_options : TestRulesetReceivingOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: RulesetControllerApi.test_ruleset_receiving ..."}
      end
      # verify the required parameter "test_ruleset_receiving_options" is set
      if @api_client.config.client_side_validation && test_ruleset_receiving_options.nil?
        raise ArgumentError.new("Missing the required parameter 'test_ruleset_receiving_options' when calling RulesetControllerApi.test_ruleset_receiving")
      end
      # resource path
      local_var_path = "/rulesets/test-receiving"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = test_ruleset_receiving_options.to_json

      # return_type
      return_type = "TestRulesetReceivingResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RulesetControllerApi.test_ruleset_receiving",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RulesetControllerApi#test_ruleset_receiving\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return TestRulesetReceivingResult.from_json(data), status_code, headers
    end

    # Test sending with rulesets
    # Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets or whether a phone number can send SMS
    # @param test_inbox_ruleset_sending_options [TestInboxRulesetSendingOptions] 
    # @return [TestRulesetSendingResult]
    def test_ruleset_sending(test_inbox_ruleset_sending_options : TestInboxRulesetSendingOptions)
      data, _status_code, _headers = test_ruleset_sending_with_http_info(test_inbox_ruleset_sending_options)
      data
    end

    # Test sending with rulesets
    # Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets or whether a phone number can send SMS
    # @param test_inbox_ruleset_sending_options [TestInboxRulesetSendingOptions] 
    # @return [Array<(TestRulesetSendingResult, Integer, Hash)>] TestRulesetSendingResult data, response status code and response headers
    def test_ruleset_sending_with_http_info(test_inbox_ruleset_sending_options : TestInboxRulesetSendingOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: RulesetControllerApi.test_ruleset_sending ..."}
      end
      # verify the required parameter "test_inbox_ruleset_sending_options" is set
      if @api_client.config.client_side_validation && test_inbox_ruleset_sending_options.nil?
        raise ArgumentError.new("Missing the required parameter 'test_inbox_ruleset_sending_options' when calling RulesetControllerApi.test_ruleset_sending")
      end
      # resource path
      local_var_path = "/rulesets/test-sending"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = test_inbox_ruleset_sending_options.to_json

      # return_type
      return_type = "TestRulesetSendingResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RulesetControllerApi.test_ruleset_sending",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RulesetControllerApi#test_ruleset_sending\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return TestRulesetSendingResult.from_json(data), status_code, headers
    end
  end
end
