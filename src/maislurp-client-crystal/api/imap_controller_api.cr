# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class ImapControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Fetch message in an inbox
    # @param seq_num [Int64] 
    # @return [ImapServerFetchResult]
    def imap_server_fetch(seq_num : Int64, inbox_id : String?)
      data, _status_code, _headers = imap_server_fetch_with_http_info(seq_num, inbox_id)
      data
    end

    # Fetch message in an inbox
    # @param seq_num [Int64] 
    # @return [Array<(ImapServerFetchResult, Integer, Hash)>] ImapServerFetchResult data, response status code and response headers
    def imap_server_fetch_with_http_info(seq_num : Int64, inbox_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ImapControllerApi.imap_server_fetch ..."}
      end
      # verify the required parameter "seq_num" is set
      if @api_client.config.client_side_validation && seq_num.nil?
        raise ArgumentError.new("Missing the required parameter 'seq_num' when calling ImapControllerApi.imap_server_fetch")
      end
      # resource path
      local_var_path = "/imap/server/fetch"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id
      query_params[:"seqNum"] = seq_num

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ImapServerFetchResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ImapControllerApi.imap_server_fetch",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ImapControllerApi#imap_server_fetch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ImapServerFetchResult.from_json(data), status_code, headers
    end

    # Get a message by email ID
    # @param email_id [String] Email ID to get
    # @return [ImapServerGetResult]
    def imap_server_get(email_id : String, inbox_id : String?)
      data, _status_code, _headers = imap_server_get_with_http_info(email_id, inbox_id)
      data
    end

    # Get a message by email ID
    # @param email_id [String] Email ID to get
    # @return [Array<(ImapServerGetResult, Integer, Hash)>] ImapServerGetResult data, response status code and response headers
    def imap_server_get_with_http_info(email_id : String, inbox_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ImapControllerApi.imap_server_get ..."}
      end
      # verify the required parameter "email_id" is set
      if @api_client.config.client_side_validation && email_id.nil?
        raise ArgumentError.new("Missing the required parameter 'email_id' when calling ImapControllerApi.imap_server_get")
      end
      # resource path
      local_var_path = "/imap/server/get"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"emailId"] = email_id
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ImapServerGetResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ImapControllerApi.imap_server_get",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ImapControllerApi#imap_server_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ImapServerGetResult.from_json(data), status_code, headers
    end

    # List messages in an inbox
    # @param imap_server_list_options [ImapServerListOptions] 
    # @return [ImapServerListResult]
    def imap_server_list(imap_server_list_options : ImapServerListOptions, inbox_id : String?)
      data, _status_code, _headers = imap_server_list_with_http_info(imap_server_list_options, inbox_id)
      data
    end

    # List messages in an inbox
    # @param imap_server_list_options [ImapServerListOptions] 
    # @return [Array<(ImapServerListResult, Integer, Hash)>] ImapServerListResult data, response status code and response headers
    def imap_server_list_with_http_info(imap_server_list_options : ImapServerListOptions, inbox_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ImapControllerApi.imap_server_list ..."}
      end
      # verify the required parameter "imap_server_list_options" is set
      if @api_client.config.client_side_validation && imap_server_list_options.nil?
        raise ArgumentError.new("Missing the required parameter 'imap_server_list_options' when calling ImapControllerApi.imap_server_list")
      end
      # resource path
      local_var_path = "/imap/server/list"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = imap_server_list_options.to_json

      # return_type
      return_type = "ImapServerListResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ImapControllerApi.imap_server_list",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ImapControllerApi#imap_server_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ImapServerListResult.from_json(data), status_code, headers
    end

    # Create a new mailbox if possible
    # @param name [String] Inbox email address to create
    # @return [ImapServerMailboxResult]
    def imap_server_mailbox(name : String)
      data, _status_code, _headers = imap_server_mailbox_with_http_info(name)
      data
    end

    # Create a new mailbox if possible
    # @param name [String] Inbox email address to create
    # @return [Array<(ImapServerMailboxResult, Integer, Hash)>] ImapServerMailboxResult data, response status code and response headers
    def imap_server_mailbox_with_http_info(name : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: ImapControllerApi.imap_server_mailbox ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling ImapControllerApi.imap_server_mailbox")
      end
      # resource path
      local_var_path = "/imap/server/mailbox"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"name"] = name

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ImapServerMailboxResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ImapControllerApi.imap_server_mailbox",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ImapControllerApi#imap_server_mailbox\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ImapServerMailboxResult.from_json(data), status_code, headers
    end

    # Search messages in an inbox
    # @param imap_server_search_options [ImapServerSearchOptions] 
    # @return [ImapServerSearchResult]
    def imap_server_search(imap_server_search_options : ImapServerSearchOptions, inbox_id : String?)
      data, _status_code, _headers = imap_server_search_with_http_info(imap_server_search_options, inbox_id)
      data
    end

    # Search messages in an inbox
    # @param imap_server_search_options [ImapServerSearchOptions] 
    # @return [Array<(ImapServerSearchResult, Integer, Hash)>] ImapServerSearchResult data, response status code and response headers
    def imap_server_search_with_http_info(imap_server_search_options : ImapServerSearchOptions, inbox_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ImapControllerApi.imap_server_search ..."}
      end
      # verify the required parameter "imap_server_search_options" is set
      if @api_client.config.client_side_validation && imap_server_search_options.nil?
        raise ArgumentError.new("Missing the required parameter 'imap_server_search_options' when calling ImapControllerApi.imap_server_search")
      end
      # resource path
      local_var_path = "/imap/server/search"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = imap_server_search_options.to_json

      # return_type
      return_type = "ImapServerSearchResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ImapControllerApi.imap_server_search",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ImapControllerApi#imap_server_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ImapServerSearchResult.from_json(data), status_code, headers
    end

    # Get status for mailbox
    # @param imap_server_status_options [ImapServerStatusOptions] 
    # @return [ImapServerStatusResult]
    def imap_server_status(imap_server_status_options : ImapServerStatusOptions, inbox_id : String?)
      data, _status_code, _headers = imap_server_status_with_http_info(imap_server_status_options, inbox_id)
      data
    end

    # Get status for mailbox
    # @param imap_server_status_options [ImapServerStatusOptions] 
    # @return [Array<(ImapServerStatusResult, Integer, Hash)>] ImapServerStatusResult data, response status code and response headers
    def imap_server_status_with_http_info(imap_server_status_options : ImapServerStatusOptions, inbox_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ImapControllerApi.imap_server_status ..."}
      end
      # verify the required parameter "imap_server_status_options" is set
      if @api_client.config.client_side_validation && imap_server_status_options.nil?
        raise ArgumentError.new("Missing the required parameter 'imap_server_status_options' when calling ImapControllerApi.imap_server_status")
      end
      # resource path
      local_var_path = "/imap/server/status"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = imap_server_status_options.to_json

      # return_type
      return_type = "ImapServerStatusResult"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ImapControllerApi.imap_server_status",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ImapControllerApi#imap_server_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ImapServerStatusResult.from_json(data), status_code, headers
    end

    # Update message flags
    # @param imap_update_flags_options [ImapUpdateFlagsOptions] 
    # @return [nil]
    def imap_server_update_flags(imap_update_flags_options : ImapUpdateFlagsOptions, inbox_id : String?)
      imap_server_update_flags_with_http_info(imap_update_flags_options, inbox_id)
      nil
    end

    # Update message flags
    # @param imap_update_flags_options [ImapUpdateFlagsOptions] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def imap_server_update_flags_with_http_info(imap_update_flags_options : ImapUpdateFlagsOptions, inbox_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: ImapControllerApi.imap_server_update_flags ..."}
      end
      # verify the required parameter "imap_update_flags_options" is set
      if @api_client.config.client_side_validation && imap_update_flags_options.nil?
        raise ArgumentError.new("Missing the required parameter 'imap_update_flags_options' when calling ImapControllerApi.imap_server_update_flags")
      end
      # resource path
      local_var_path = "/imap/server/update-flags"

      # query parameters
      query_params = Hash(Symbol, String).new
      query_params[:"inboxId"] = inbox_id

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = imap_update_flags_options.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ImapControllerApi.imap_server_update_flags",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ImapControllerApi#imap_server_update_flags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end
  end
end
