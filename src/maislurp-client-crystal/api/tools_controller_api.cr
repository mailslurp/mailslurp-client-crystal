# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "uri"

module 
  class ToolsControllerApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Check email client support for email HTML and CSS features
    # @param check_email_features_client_support_options [CheckEmailFeaturesClientSupportOptions] 
    # @return [CheckEmailFeaturesClientSupportResults]
    def check_email_features_client_support(check_email_features_client_support_options : CheckEmailFeaturesClientSupportOptions)
      data, _status_code, _headers = check_email_features_client_support_with_http_info(check_email_features_client_support_options)
      data
    end

    # Check email client support for email HTML and CSS features
    # @param check_email_features_client_support_options [CheckEmailFeaturesClientSupportOptions] 
    # @return [Array<(CheckEmailFeaturesClientSupportResults, Integer, Hash)>] CheckEmailFeaturesClientSupportResults data, response status code and response headers
    def check_email_features_client_support_with_http_info(check_email_features_client_support_options : CheckEmailFeaturesClientSupportOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ToolsControllerApi.check_email_features_client_support ..."}
      end
      # verify the required parameter "check_email_features_client_support_options" is set
      if @api_client.config.client_side_validation && check_email_features_client_support_options.nil?
        raise ArgumentError.new("Missing the required parameter 'check_email_features_client_support_options' when calling ToolsControllerApi.check_email_features_client_support")
      end
      # resource path
      local_var_path = "/tools/check-email-features-client-support"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = check_email_features_client_support_options.to_json

      # return_type
      return_type = "CheckEmailFeaturesClientSupportResults"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ToolsControllerApi.check_email_features_client_support",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ToolsControllerApi#check_email_features_client_support\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return CheckEmailFeaturesClientSupportResults.from_json(data), status_code, headers
    end

    # Create a BIMI record policy
    # @param generate_bimi_record_options [GenerateBimiRecordOptions] 
    # @return [GenerateBimiRecordResults]
    def generate_bimi_record(generate_bimi_record_options : GenerateBimiRecordOptions)
      data, _status_code, _headers = generate_bimi_record_with_http_info(generate_bimi_record_options)
      data
    end

    # Create a BIMI record policy
    # @param generate_bimi_record_options [GenerateBimiRecordOptions] 
    # @return [Array<(GenerateBimiRecordResults, Integer, Hash)>] GenerateBimiRecordResults data, response status code and response headers
    def generate_bimi_record_with_http_info(generate_bimi_record_options : GenerateBimiRecordOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ToolsControllerApi.generate_bimi_record ..."}
      end
      # verify the required parameter "generate_bimi_record_options" is set
      if @api_client.config.client_side_validation && generate_bimi_record_options.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_bimi_record_options' when calling ToolsControllerApi.generate_bimi_record")
      end
      # resource path
      local_var_path = "/tools/generate-bimi-record"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = generate_bimi_record_options.to_json

      # return_type
      return_type = "GenerateBimiRecordResults"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ToolsControllerApi.generate_bimi_record",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ToolsControllerApi#generate_bimi_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateBimiRecordResults.from_json(data), status_code, headers
    end

    # Create a DMARC record policy
    # @param generate_dmarc_record_options [GenerateDmarcRecordOptions] 
    # @return [GenerateDmarcRecordResults]
    def generate_dmarc_record(generate_dmarc_record_options : GenerateDmarcRecordOptions)
      data, _status_code, _headers = generate_dmarc_record_with_http_info(generate_dmarc_record_options)
      data
    end

    # Create a DMARC record policy
    # @param generate_dmarc_record_options [GenerateDmarcRecordOptions] 
    # @return [Array<(GenerateDmarcRecordResults, Integer, Hash)>] GenerateDmarcRecordResults data, response status code and response headers
    def generate_dmarc_record_with_http_info(generate_dmarc_record_options : GenerateDmarcRecordOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ToolsControllerApi.generate_dmarc_record ..."}
      end
      # verify the required parameter "generate_dmarc_record_options" is set
      if @api_client.config.client_side_validation && generate_dmarc_record_options.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_dmarc_record_options' when calling ToolsControllerApi.generate_dmarc_record")
      end
      # resource path
      local_var_path = "/tools/generate-dmarc-record"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = generate_dmarc_record_options.to_json

      # return_type
      return_type = "GenerateDmarcRecordResults"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ToolsControllerApi.generate_dmarc_record",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ToolsControllerApi#generate_dmarc_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateDmarcRecordResults.from_json(data), status_code, headers
    end

    # Create a TLS reporting record policy
    # @param generate_mta_sts_record_options [GenerateMtaStsRecordOptions] 
    # @return [GenerateMtaStsRecordResults]
    def generate_mta_sts_record(generate_mta_sts_record_options : GenerateMtaStsRecordOptions)
      data, _status_code, _headers = generate_mta_sts_record_with_http_info(generate_mta_sts_record_options)
      data
    end

    # Create a TLS reporting record policy
    # @param generate_mta_sts_record_options [GenerateMtaStsRecordOptions] 
    # @return [Array<(GenerateMtaStsRecordResults, Integer, Hash)>] GenerateMtaStsRecordResults data, response status code and response headers
    def generate_mta_sts_record_with_http_info(generate_mta_sts_record_options : GenerateMtaStsRecordOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ToolsControllerApi.generate_mta_sts_record ..."}
      end
      # verify the required parameter "generate_mta_sts_record_options" is set
      if @api_client.config.client_side_validation && generate_mta_sts_record_options.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_mta_sts_record_options' when calling ToolsControllerApi.generate_mta_sts_record")
      end
      # resource path
      local_var_path = "/tools/generate-mta-sts-record"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = generate_mta_sts_record_options.to_json

      # return_type
      return_type = "GenerateMtaStsRecordResults"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ToolsControllerApi.generate_mta_sts_record",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ToolsControllerApi#generate_mta_sts_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateMtaStsRecordResults.from_json(data), status_code, headers
    end

    # Create a TLS reporting record policy
    # @param generate_tls_reporting_record_options [GenerateTlsReportingRecordOptions] 
    # @return [GenerateTlsReportingRecordResults]
    def generate_tls_reporting_record(generate_tls_reporting_record_options : GenerateTlsReportingRecordOptions)
      data, _status_code, _headers = generate_tls_reporting_record_with_http_info(generate_tls_reporting_record_options)
      data
    end

    # Create a TLS reporting record policy
    # @param generate_tls_reporting_record_options [GenerateTlsReportingRecordOptions] 
    # @return [Array<(GenerateTlsReportingRecordResults, Integer, Hash)>] GenerateTlsReportingRecordResults data, response status code and response headers
    def generate_tls_reporting_record_with_http_info(generate_tls_reporting_record_options : GenerateTlsReportingRecordOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ToolsControllerApi.generate_tls_reporting_record ..."}
      end
      # verify the required parameter "generate_tls_reporting_record_options" is set
      if @api_client.config.client_side_validation && generate_tls_reporting_record_options.nil?
        raise ArgumentError.new("Missing the required parameter 'generate_tls_reporting_record_options' when calling ToolsControllerApi.generate_tls_reporting_record")
      end
      # resource path
      local_var_path = "/tools/generate-tls-reporting-record"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = generate_tls_reporting_record_options.to_json

      # return_type
      return_type = "GenerateTlsReportingRecordResults"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ToolsControllerApi.generate_tls_reporting_record",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ToolsControllerApi#generate_tls_reporting_record\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GenerateTlsReportingRecordResults.from_json(data), status_code, headers
    end

    # Lookup a BIMI record policy
    # @param lookup_bimi_domain_options [LookupBimiDomainOptions] 
    # @return [LookupBimiDomainResults]
    def lookup_bimi_domain(lookup_bimi_domain_options : LookupBimiDomainOptions)
      data, _status_code, _headers = lookup_bimi_domain_with_http_info(lookup_bimi_domain_options)
      data
    end

    # Lookup a BIMI record policy
    # @param lookup_bimi_domain_options [LookupBimiDomainOptions] 
    # @return [Array<(LookupBimiDomainResults, Integer, Hash)>] LookupBimiDomainResults data, response status code and response headers
    def lookup_bimi_domain_with_http_info(lookup_bimi_domain_options : LookupBimiDomainOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ToolsControllerApi.lookup_bimi_domain ..."}
      end
      # verify the required parameter "lookup_bimi_domain_options" is set
      if @api_client.config.client_side_validation && lookup_bimi_domain_options.nil?
        raise ArgumentError.new("Missing the required parameter 'lookup_bimi_domain_options' when calling ToolsControllerApi.lookup_bimi_domain")
      end
      # resource path
      local_var_path = "/tools/lookup-bimi-domain"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = lookup_bimi_domain_options.to_json

      # return_type
      return_type = "LookupBimiDomainResults"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ToolsControllerApi.lookup_bimi_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ToolsControllerApi#lookup_bimi_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return LookupBimiDomainResults.from_json(data), status_code, headers
    end

    # Lookup a DMARC record policy
    # @param lookup_dmarc_domain_options [LookupDmarcDomainOptions] 
    # @return [LookupDmarcDomainResults]
    def lookup_dmarc_domain(lookup_dmarc_domain_options : LookupDmarcDomainOptions)
      data, _status_code, _headers = lookup_dmarc_domain_with_http_info(lookup_dmarc_domain_options)
      data
    end

    # Lookup a DMARC record policy
    # @param lookup_dmarc_domain_options [LookupDmarcDomainOptions] 
    # @return [Array<(LookupDmarcDomainResults, Integer, Hash)>] LookupDmarcDomainResults data, response status code and response headers
    def lookup_dmarc_domain_with_http_info(lookup_dmarc_domain_options : LookupDmarcDomainOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ToolsControllerApi.lookup_dmarc_domain ..."}
      end
      # verify the required parameter "lookup_dmarc_domain_options" is set
      if @api_client.config.client_side_validation && lookup_dmarc_domain_options.nil?
        raise ArgumentError.new("Missing the required parameter 'lookup_dmarc_domain_options' when calling ToolsControllerApi.lookup_dmarc_domain")
      end
      # resource path
      local_var_path = "/tools/lookup-dmarc-domain"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = lookup_dmarc_domain_options.to_json

      # return_type
      return_type = "LookupDmarcDomainResults"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ToolsControllerApi.lookup_dmarc_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ToolsControllerApi#lookup_dmarc_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return LookupDmarcDomainResults.from_json(data), status_code, headers
    end

    # Lookup a MTA-STS domain policy
    # @param lookup_mta_sts_domain_options [LookupMtaStsDomainOptions] 
    # @return [LookupMtaStsDomainResults]
    def lookup_mta_sts_domain(lookup_mta_sts_domain_options : LookupMtaStsDomainOptions)
      data, _status_code, _headers = lookup_mta_sts_domain_with_http_info(lookup_mta_sts_domain_options)
      data
    end

    # Lookup a MTA-STS domain policy
    # @param lookup_mta_sts_domain_options [LookupMtaStsDomainOptions] 
    # @return [Array<(LookupMtaStsDomainResults, Integer, Hash)>] LookupMtaStsDomainResults data, response status code and response headers
    def lookup_mta_sts_domain_with_http_info(lookup_mta_sts_domain_options : LookupMtaStsDomainOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ToolsControllerApi.lookup_mta_sts_domain ..."}
      end
      # verify the required parameter "lookup_mta_sts_domain_options" is set
      if @api_client.config.client_side_validation && lookup_mta_sts_domain_options.nil?
        raise ArgumentError.new("Missing the required parameter 'lookup_mta_sts_domain_options' when calling ToolsControllerApi.lookup_mta_sts_domain")
      end
      # resource path
      local_var_path = "/tools/lookup-mta-sts-domain"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = lookup_mta_sts_domain_options.to_json

      # return_type
      return_type = "LookupMtaStsDomainResults"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ToolsControllerApi.lookup_mta_sts_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ToolsControllerApi#lookup_mta_sts_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return LookupMtaStsDomainResults.from_json(data), status_code, headers
    end

    # Lookup a TLS reporting domain policy
    # @param lookup_tls_reporting_domain_options [LookupTlsReportingDomainOptions] 
    # @return [LookupTlsReportingDomainResults]
    def lookup_tls_reporting_domain(lookup_tls_reporting_domain_options : LookupTlsReportingDomainOptions)
      data, _status_code, _headers = lookup_tls_reporting_domain_with_http_info(lookup_tls_reporting_domain_options)
      data
    end

    # Lookup a TLS reporting domain policy
    # @param lookup_tls_reporting_domain_options [LookupTlsReportingDomainOptions] 
    # @return [Array<(LookupTlsReportingDomainResults, Integer, Hash)>] LookupTlsReportingDomainResults data, response status code and response headers
    def lookup_tls_reporting_domain_with_http_info(lookup_tls_reporting_domain_options : LookupTlsReportingDomainOptions)
      if @api_client.config.debugging
        Log.debug {"Calling API: ToolsControllerApi.lookup_tls_reporting_domain ..."}
      end
      # verify the required parameter "lookup_tls_reporting_domain_options" is set
      if @api_client.config.client_side_validation && lookup_tls_reporting_domain_options.nil?
        raise ArgumentError.new("Missing the required parameter 'lookup_tls_reporting_domain_options' when calling ToolsControllerApi.lookup_tls_reporting_domain")
      end
      # resource path
      local_var_path = "/tools/lookup-tls-reporting-domain"

      # query parameters
      query_params = Hash(Symbol, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, String).new

      # http body (model)
      post_body = lookup_tls_reporting_domain_options.to_json

      # return_type
      return_type = "LookupTlsReportingDomainResults"

      # auth_names
      auth_names = ["API_KEY"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"ToolsControllerApi.lookup_tls_reporting_domain",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: ToolsControllerApi#lookup_tls_reporting_domain\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return LookupTlsReportingDomainResults.from_json(data), status_code, headers
    end
  end
end
