# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "time"

module 
  # Email entity (also known as EmailDto). When an SMTP email message is received by MailSlurp it is parsed. The body and attachments are written to disk and the fields such as to, from, subject etc are stored in a database. The `body` contains the email content. If you want the original SMTP message see the `getRawEmail` endpoints. The attachments can be fetched using the AttachmentController
  class Email include JSON::Serializable
   include JSON::Serializable 
    # ID of the email entity
    @[JSON::Field(key: id, type: String)]
    property id : String


    # ID of user that email belongs to
    @[JSON::Field(key: userId, type: String)]
    property user_id : String


    # ID of the inbox that received the email
    @[JSON::Field(key: inboxId, type: String)]
    property inbox_id : String


    # ID of the domain that received the email
    @[JSON::Field(key: domainId, type: String, nilable: true, emit_null: true)]
    property domain_id : String


    # List of `To` recipient email addresses that the email was addressed to. See recipients object for names.
    @[JSON::Field(key: to, type: Array(String))]
    property to : Array(String)


    # Who the email was sent from. An email address - see fromName for the sender name.
    @[JSON::Field(key: from, type: String, nilable: true, emit_null: true)]
    property from : String


    @[JSON::Field(key: sender, type: Sender, nilable: true, emit_null: true)]
    property sender : Sender


    @[JSON::Field(key: recipients, type: EmailRecipients, nilable: true, emit_null: true)]
    property recipients : EmailRecipients


    # The `replyTo` field on the received email message
    @[JSON::Field(key: replyTo, type: String, nilable: true, emit_null: true)]
    property reply_to : String


    # List of `CC` recipients email addresses that the email was addressed to. See recipients object for names.
    @[JSON::Field(key: cc, type: Array(String), nilable: true, emit_null: true)]
    property cc : Array(String)


    # List of `BCC` recipients email addresses that the email was addressed to. See recipients object for names.
    @[JSON::Field(key: bcc, type: Array(String), nilable: true, emit_null: true)]
    property bcc : Array(String)


    # Collection of SMTP headers attached to email
    @[JSON::Field(key: headers, type: Hash(String, String), nilable: true, emit_null: true)]
    property headers : Hash(String, String)


    # Multi-value map of SMTP headers attached to email
    @[JSON::Field(key: headersMap, type: Hash(String, Array(String)), nilable: true, emit_null: true)]
    property headers_map : Hash(String, Array(String))


    # List of IDs of attachments found in the email. Use these IDs with the Inbox and Email Controllers to download attachments and attachment meta data such as filesize, name, extension.
    @[JSON::Field(key: attachments, type: Array(String), nilable: true, emit_null: true)]
    property attachments : Array(String)


    # The subject line of the email message as specified by SMTP subject header
    @[JSON::Field(key: subject, type: String, nilable: true, emit_null: true)]
    property subject : String


    # The body of the email message as text parsed from the SMTP message body (does not include attachments). Fetch the raw content to access the SMTP message and use the attachments property to access attachments. The body is stored separately to the email entity so the body is not returned in paginated results only in full single email or wait requests.
    @[JSON::Field(key: body, type: String, nilable: true, emit_null: true)]
    property body : String


    # An excerpt of the body of the email message for quick preview. Takes HTML content part if exists falls back to TEXT content part if not
    @[JSON::Field(key: bodyExcerpt, type: String, nilable: true, emit_null: true)]
    property body_excerpt : String


    # An excerpt of the body of the email message for quick preview. Takes TEXT content part if exists
    @[JSON::Field(key: textExcerpt, type: String, nilable: true, emit_null: true)]
    property text_excerpt : String


    # A hash signature of the email message using MD5. Useful for comparing emails without fetching full body.
    @[JSON::Field(key: bodyMD5Hash, type: String, nilable: true, emit_null: true)]
    property body_md5_hash : String


    # Is the email body content type HTML?
    @[JSON::Field(key: isHTML, type: Bool, nilable: true, emit_null: true)]
    property is_html : Bool


    # Detected character set of the email body such as UTF-8
    @[JSON::Field(key: charset, type: String, nilable: true, emit_null: true)]
    property charset : String


    @[JSON::Field(key: analysis, type: EmailAnalysis, nilable: true, emit_null: true)]
    property analysis : EmailAnalysis


    # When was the email received by MailSlurp
    @[JSON::Field(key: createdAt, type: Time)]
    property created_at : Time


    # When was the email last updated
    @[JSON::Field(key: updatedAt, type: Time)]
    property updated_at : Time


    # Read flag. Has the email ever been viewed in the dashboard or fetched via the API with a hydrated body? If so the email is marked as read. Paginated results do not affect read status. Read status is different to email opened event as it depends on your own account accessing the email. Email opened is determined by tracking pixels sent to other uses if enable during sending. You can listened for both email read and email opened events using webhooks.
    @[JSON::Field(key: read, type: Bool)]
    property read : Bool


    # Can the email be accessed by organization team members
    @[JSON::Field(key: teamAccess, type: Bool)]
    property team_access : Bool


    # Is the email body content type x-amp-html Amp4Email?
    @[JSON::Field(key: isXAmpHtml, type: Bool, nilable: true, emit_null: true)]
    property is_x_amp_html : Bool


    # A list of detected multipart mime message body part content types such as text/plain and text/html. Can be used with email bodyPart endpoints to fetch individual body parts.
    @[JSON::Field(key: bodyPartContentTypes, type: Array(String), nilable: true, emit_null: true)]
    property body_part_content_types : Array(String)


    # UID used by external IMAP server to identify email
    @[JSON::Field(key: externalId, type: String, nilable: true, emit_null: true)]
    property external_id : String


    # RFC 5322 Message-ID header value without angle brackets.
    @[JSON::Field(key: messageId, type: String, nilable: true, emit_null: true)]
    property message_id : String


    # MailSlurp thread ID for email chain that enables lookup for In-Reply-To and References fields.
    @[JSON::Field(key: threadId, type: String, nilable: true, emit_null: true)]
    property thread_id : String


    # Parsed value of In-Reply-To header. A Message-ID in a thread.
    @[JSON::Field(key: inReplyTo, type: String, nilable: true, emit_null: true)]
    property in_reply_to : String


    # Is email favourited
    @[JSON::Field(key: favourite, type: Bool, nilable: true, emit_null: true)]
    property favourite : Bool


    @[JSON::Field(key: html, type: Bool)]
    property html : Bool


    @[JSON::Field(key: xampHtml, type: Bool)]
    property xamp_html : Bool

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@id : String, @user_id : String, @inbox_id : String, @domain_id : String | Nil, @to : Array(String), @from : String | Nil, @sender : Sender | Nil, @recipients : EmailRecipients | Nil, @reply_to : String | Nil, @cc : Array(String) | Nil, @bcc : Array(String) | Nil, @headers : Hash(String, String) | Nil, @headers_map : Hash(String, Array(String)) | Nil, @attachments : Array(String) | Nil, @subject : String | Nil, @body : String | Nil, @body_excerpt : String | Nil, @text_excerpt : String | Nil, @body_md5_hash : String | Nil, @is_html : Bool | Nil, @charset : String | Nil, @analysis : EmailAnalysis | Nil, @created_at : Time, @updated_at : Time, @read : Bool, @team_access : Bool, @is_x_amp_html : Bool | Nil, @body_part_content_types : Array(String) | Nil, @external_id : String | Nil, @message_id : String | Nil, @thread_id : String | Nil, @in_reply_to : String | Nil, @favourite : Bool | Nil, @html : Bool | Nil, @xamp_html : Bool | Nil)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push("invalid value for \"id\", id cannot be nil.")
      end

      if @user_id.nil?
        invalid_properties.push("invalid value for \"user_id\", user_id cannot be nil.")
      end

      if @inbox_id.nil?
        invalid_properties.push("invalid value for \"inbox_id\", inbox_id cannot be nil.")
      end

      if @to.nil?
        invalid_properties.push("invalid value for \"to\", to cannot be nil.")
      end

      if @created_at.nil?
        invalid_properties.push("invalid value for \"created_at\", created_at cannot be nil.")
      end

      if @updated_at.nil?
        invalid_properties.push("invalid value for \"updated_at\", updated_at cannot be nil.")
      end

      if @read.nil?
        invalid_properties.push("invalid value for \"read\", read cannot be nil.")
      end

      if @team_access.nil?
        invalid_properties.push("invalid value for \"team_access\", team_access cannot be nil.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @user_id.nil?
      return false if @inbox_id.nil?
      return false if @to.nil?
      return false if @created_at.nil?
      return false if @updated_at.nil?
      return false if @read.nil?
      return false if @team_access.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          user_id == o.user_id &&
          inbox_id == o.inbox_id &&
          domain_id == o.domain_id &&
          to == o.to &&
          from == o.from &&
          sender == o.sender &&
          recipients == o.recipients &&
          reply_to == o.reply_to &&
          cc == o.cc &&
          bcc == o.bcc &&
          headers == o.headers &&
          headers_map == o.headers_map &&
          attachments == o.attachments &&
          subject == o.subject &&
          body == o.body &&
          body_excerpt == o.body_excerpt &&
          text_excerpt == o.text_excerpt &&
          body_md5_hash == o.body_md5_hash &&
          is_html == o.is_html &&
          charset == o.charset &&
          analysis == o.analysis &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          read == o.read &&
          team_access == o.team_access &&
          is_x_amp_html == o.is_x_amp_html &&
          body_part_content_types == o.body_part_content_types &&
          external_id == o.external_id &&
          message_id == o.message_id &&
          thread_id == o.thread_id &&
          in_reply_to == o.in_reply_to &&
          favourite == o.favourite &&
          html == o.html &&
          xamp_html == o.xamp_html
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, user_id, inbox_id, domain_id, to, from, sender, recipients, reply_to, cc, bcc, headers, headers_map, attachments, subject, body, body_excerpt, text_excerpt, body_md5_hash, is_html, charset, analysis, created_at, updated_at, read, team_access, is_x_amp_html, body_part_content_types, external_id, message_id, thread_id, in_reply_to, favourite, html, xamp_html].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = .const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
