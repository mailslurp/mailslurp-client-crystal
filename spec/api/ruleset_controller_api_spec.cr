# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::RulesetControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "RulesetControllerApi" do
  describe "test an instance of RulesetControllerApi" do
    it "should create an instance of RulesetControllerApi" do
      api_instance = ::RulesetControllerApi.new
      # TODO expect(api_instance).to be_instance_of(::RulesetControllerApi)
    end
  end

  # unit tests for create_new_ruleset
  # Create a ruleset
  # Create a new inbox or phone number rule for forwarding, blocking, and allowing emails or SMS when sending and receiving
  # @param create_ruleset_options 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Inbox id to attach ruleset to
  # @option opts [String] :phone_id Phone id to attach ruleset to
  # @return [RulesetDto]
  describe "create_new_ruleset test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_ruleset
  # Delete a ruleset
  # Delete ruleset
  # @param id ID of ruleset
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_ruleset test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_rulesets
  # Delete rulesets
  # Delete rulesets. Accepts optional inboxId or phoneId filters.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Optional inbox id to attach ruleset to
  # @option opts [String] :phone_id 
  # @return [nil]
  describe "delete_rulesets test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_ruleset
  # Get a ruleset
  # Get ruleset
  # @param id ID of ruleset
  # @param [Hash] opts the optional parameters
  # @return [RulesetDto]
  describe "get_ruleset test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_rulesets
  # List rulesets block and allow lists
  # List all rulesets attached to an inbox or phone or account
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Optional inbox id to get rulesets from
  # @option opts [String] :phone_id Optional phone id to get rulesets from
  # @option opts [Int32] :page Optional page index in inbox ruleset list pagination
  # @option opts [Int32] :size Optional page size in inbox ruleset list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [PageRulesetDto]
  describe "get_rulesets test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for test_inbox_rulesets_for_inbox
  # Test inbox rulesets for inbox
  # Test inbox rulesets for inbox
  # @param inbox_id ID of inbox
  # @param ruleset_test_options 
  # @param [Hash] opts the optional parameters
  # @return [InboxRulesetTestResult]
  describe "test_inbox_rulesets_for_inbox test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for test_new_ruleset
  # Test new ruleset
  # Test new ruleset
  # @param test_new_inbox_ruleset_options 
  # @param [Hash] opts the optional parameters
  # @return [InboxRulesetTestResult]
  describe "test_new_ruleset test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for test_ruleset
  # Test a ruleset
  # Test an inbox or phone ruleset
  # @param id ID of ruleset
  # @param ruleset_test_options 
  # @param [Hash] opts the optional parameters
  # @return [InboxRulesetTestResult]
  describe "test_ruleset test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for test_ruleset_receiving
  # Test receiving with rulesets
  # Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets or test if phone number can receive SMS
  # @param test_ruleset_receiving_options 
  # @param [Hash] opts the optional parameters
  # @return [TestRulesetReceivingResult]
  describe "test_ruleset_receiving test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for test_ruleset_sending
  # Test sending with rulesets
  # Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets or whether a phone number can send SMS
  # @param test_inbox_ruleset_sending_options 
  # @param [Hash] opts the optional parameters
  # @return [TestRulesetSendingResult]
  describe "test_ruleset_sending test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
