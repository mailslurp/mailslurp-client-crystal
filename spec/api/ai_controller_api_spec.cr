# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::AIControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "AIControllerApi" do
  describe "test an instance of AIControllerApi" do
    it "should create an instance of AIControllerApi" do
      api_instance = ::AIControllerApi.new
      # TODO expect(api_instance).to be_instance_of(::AIControllerApi)
    end
  end

  # unit tests for create_transformer
  # Create a transformer for reuse in automations
  # Save an AI transform instructions and schema for use with webhooks and automations
  # @param ai_transform_create_options 
  # @param [Hash] opts the optional parameters
  # @return [AITransformDto]
  describe "create_transformer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_transformer_mappings
  # Create transformer mapping
  # Create AI transformer mappings to other entities
  # @param create_ai_transformer_mapping_options 
  # @param [Hash] opts the optional parameters
  # @return [AITransformMappingDto]
  describe "create_transformer_mappings test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_all_transformer_mappings
  # Delete all transformer mapping
  # Delete all AI transformer mappings
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_all_transformer_mappings test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_transformer
  # Delete a transformer
  # Delete an AI transformer and schemas by ID
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_transformer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_transformer_mapping
  # Delete transformer mapping
  # Delete an AI transformer mapping
  # @param id ID of transform mapping
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_transformer_mapping test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_transformers
  # Delete all transformers
  # Delete all AI transformers and schemas
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_transformers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for generate_structured_content_from_attachment
  # Generate structured content for an attachment
  # Use output schemas to extract data from an attachment using AI
  # @param generate_structured_content_attachment_options 
  # @param [Hash] opts the optional parameters
  # @return [StructuredContentResultDto]
  describe "generate_structured_content_from_attachment test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for generate_structured_content_from_email
  # Generate structured content for an email
  # Use output schemas to extract data from an email using AI
  # @param generate_structured_content_email_options 
  # @param [Hash] opts the optional parameters
  # @return [StructuredContentResultDto]
  describe "generate_structured_content_from_email test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for generate_structured_content_from_sms
  # Generate structured content for a TXT message
  # Use output schemas to extract data from an SMS using AI
  # @param generate_structured_content_sms_options 
  # @param [Hash] opts the optional parameters
  # @return [StructuredContentResultDto]
  describe "generate_structured_content_from_sms test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_transformer
  # Get a transformer
  # Get AI transformer and schemas by ID
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [AITransformDto]
  describe "get_transformer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_transformer_mapping
  # Get transformer mapping
  # Get an AI transformer mapping
  # @param id ID of transform mapping
  # @param [Hash] opts the optional parameters
  # @return [AITransformMappingDto]
  describe "get_transformer_mapping test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_transformer_mappings
  # Get transformer mappings
  # Get AI transformer mappings to other entities
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ai_transform_id 
  # @option opts [String] :entity_id 
  # @option opts [String] :entity_type 
  # @option opts [Int32] :page 
  # @option opts [Int32] :size Optional page size. Maximum size is 100. Use page index and sort to page through larger results
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @return [PageAITransformMappingProjection]
  describe "get_transformer_mappings test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_transformer_result
  # Get transformer result
  # Get AI transformer result
  # @param id ID of transform result
  # @param [Hash] opts the optional parameters
  # @return [AITransformResultDto]
  describe "get_transformer_result test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_transformer_results
  # Get transformer results
  # Get AI transformer results
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ai_transform_id 
  # @option opts [String] :ai_transform_mapping_id 
  # @option opts [String] :entity_id 
  # @option opts [String] :entity_type 
  # @option opts [Int32] :page 
  # @option opts [Int32] :size Optional page size. Maximum size is 100. Use page index and sort to page through larger results
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @return [PageAITransformResultProjection]
  describe "get_transformer_results test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_transformers
  # List transformers
  # List all AI transforms
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page 
  # @option opts [Int32] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Array(String)] :_include Optional list of IDs to include in result
  # @return [PageAITransformProjection]
  describe "get_transformers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for invoke_transformer
  # Invoke a transformer
  # Execute an AI transformer to generate structured content
  # @param invoke_transformer_options 
  # @param [Hash] opts the optional parameters
  # @return [ConditionalStructuredContentResult]
  describe "invoke_transformer test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for validate_structured_output_schema
  # Validate structured content schema
  # Check if a schema is valid and can be used to extract data using AI
  # @param structured_output_schema 
  # @param [Hash] opts the optional parameters
  # @return [StructuredOutputSchemaValidation]
  describe "validate_structured_output_schema test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
