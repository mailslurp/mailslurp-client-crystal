# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::ImapControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "ImapControllerApi" do
  describe "test an instance of ImapControllerApi" do
    it "should create an instance of ImapControllerApi" do
      api_instance = ::ImapControllerApi.new
      # TODO expect(api_instance).to be_instance_of(::ImapControllerApi)
    end
  end

  # unit tests for imap_server_fetch
  # Fetch message in an inbox
  # @param seq_num 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Inbox ID to search
  # @return [ImapServerFetchResult]
  describe "imap_server_fetch test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for imap_server_get
  # Get a message by email ID
  # @param email_id Email ID to get
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Inbox ID to search
  # @return [ImapServerGetResult]
  describe "imap_server_get test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for imap_server_list
  # List messages in an inbox
  # @param imap_server_list_options 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Inbox ID to list
  # @return [ImapServerListResult]
  describe "imap_server_list test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for imap_server_mailbox
  # Create a new mailbox if possible
  # @param name Inbox email address to create
  # @param [Hash] opts the optional parameters
  # @return [ImapServerMailboxResult]
  describe "imap_server_mailbox test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for imap_server_search
  # Search messages in an inbox
  # @param imap_server_search_options 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Inbox ID to search
  # @return [ImapServerSearchResult]
  describe "imap_server_search test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for imap_server_status
  # Get status for mailbox
  # @param imap_server_status_options 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Inbox ID to list
  # @return [ImapServerStatusResult]
  describe "imap_server_status test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for imap_server_update_flags
  # Update message flags
  # @param imap_update_flags_options 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id 
  # @return [nil]
  describe "imap_server_update_flags test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
