# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::PhoneControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "PhoneControllerApi" do
  describe "test an instance of PhoneControllerApi" do
    it "should create an instance of PhoneControllerApi" do
      api_instance = ::PhoneControllerApi.new
      # TODO expect(api_instance).to be_instance_of(::PhoneControllerApi)
    end
  end

  # unit tests for create_emergency_address
  # Create an emergency address
  # Add an emergency address to a phone number
  # @param create_emergency_address_options 
  # @param [Hash] opts the optional parameters
  # @return [EmergencyAddress]
  describe "create_emergency_address test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_emergency_address
  # Delete an emergency address
  # Delete an emergency address
  # @param address_id 
  # @param [Hash] opts the optional parameters
  # @return [EmptyResponseDto]
  describe "delete_emergency_address test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_phone_number
  # Delete a phone number
  # Remove phone number from account
  # @param phone_number_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_phone_number test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_consent_status
  # Get consent status
  # Get the status of phone usage consent
  # @param [Hash] opts the optional parameters
  # @return [ConsentStatusDto]
  describe "get_consent_status test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_emergency_address
  # Get an emergency address
  # Fetch an emergency address by ID
  # @param address_id 
  # @param [Hash] opts the optional parameters
  # @return [EmergencyAddress]
  describe "get_emergency_address test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_emergency_addresses
  # Get emergency addresses
  # List emergency addresses
  # @param [Hash] opts the optional parameters
  # @return [Array(EmergencyAddressDto)]
  describe "get_emergency_addresses test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_phone_number
  # Get a phone number by ID
  # Get a phone number by ID
  # @param phone_number_id 
  # @param [Hash] opts the optional parameters
  # @return [PhoneNumberDto]
  describe "get_phone_number test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_phone_numbers
  # Get phone numbers
  # List phone numbers for account
  # @param [Hash] opts the optional parameters
  # @option opts [String] :phone_country Optional phone country
  # @option opts [Int32] :page Optional page index for list pagination
  # @option opts [Int32] :size Optional page size for list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @option opts [String] :search Optional search filter
  # @option opts [Array(String)] :_include Optional phoneIds to include in result
  # @option opts [Bool] :favourite Optionally filter results for favourites only
  # @return [PagePhoneNumberProjection]
  describe "get_phone_numbers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_phone_plans
  # Get phone plans
  # Get phone number plans
  # @param [Hash] opts the optional parameters
  # @return [Array(PhonePlanDto)]
  describe "get_phone_plans test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_phone_plans_availability
  # Get phone plans availability
  # @param [Hash] opts the optional parameters
  # @return [PhonePlanAvailability]
  describe "get_phone_plans_availability test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_sms_by_phone_number
  # List sent TXT messages for a phone number
  # Get sent SMS messages for a phone number
  # @param phone_number_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in SMS list pagination
  # @option opts [Int32] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Optional filter SMSs received after given date time
  # @option opts [Time] :before Optional filter SMSs received before given date time
  # @option opts [String] :search Optional search filter
  # @return [PageSentSmsProjection]
  describe "get_sent_sms_by_phone_number test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sms_by_phone_number
  # List SMS messages for a phone number
  # Get SMS messages for a phone number
  # @param phone_number_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in SMS list pagination
  # @option opts [Int32] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Bool] :unread_only Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly
  # @option opts [Time] :since Optional filter SMSs received after given date time
  # @option opts [Time] :before Optional filter SMSs received before given date time
  # @option opts [String] :search Optional search filter
  # @option opts [Bool] :favourite Optionally filter results for favourites only
  # @return [PageSmsProjection]
  describe "get_sms_by_phone_number test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for send_sms_from_phone_number
  # Send TXT message from a phone number
  # Send SMS from a phone number
  # @param phone_number_id 
  # @param sms_send_options 
  # @param [Hash] opts the optional parameters
  # @return [SentSmsDto]
  describe "send_sms_from_phone_number test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for set_consent_status
  # Set consent status
  # Give or revoke consent for phone usage
  # @param agree 
  # @param [Hash] opts the optional parameters
  # @return [ConsentStatusDto]
  describe "set_consent_status test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for set_phone_favourited
  # Set phone favourited state
  # Set and return new favorite state for a phone
  # @param phone_number_id ID of phone to set favourite state
  # @param set_phone_favourited_options 
  # @param [Hash] opts the optional parameters
  # @return [PhoneNumberDto]
  describe "set_phone_favourited test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for test_phone_number_send_sms
  # Test sending an SMS to a number
  # Test a phone number by sending an SMS to it
  # @param phone_number_id 
  # @param test_phone_number_options 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :x_test_id 
  # @return [nil]
  describe "test_phone_number_send_sms test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_phone_number
  # Update a phone number
  # Set field for phone number
  # @param phone_number_id ID of phone to set favourite state
  # @param update_phone_number_options 
  # @param [Hash] opts the optional parameters
  # @return [PhoneNumberDto]
  describe "update_phone_number test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for validate_phone_number
  # Verify validity of a phone number
  # Validate a phone number
  # @param validate_phone_number_options 
  # @param [Hash] opts the optional parameters
  # @return [PhoneNumberValidationDto]
  describe "validate_phone_number test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
