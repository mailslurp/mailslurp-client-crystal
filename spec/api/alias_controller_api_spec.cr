# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
#
#The version of the OpenAPI document: 6.5.2
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.0
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::AliasControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "AliasControllerApi" do
  describe "test an instance of AliasControllerApi" do
    it "should create an instance of AliasControllerApi" do
      api_instance = ::AliasControllerApi.new
      # TODO expect(api_instance).to be_instance_of(::AliasControllerApi)
    end
  end

  # unit tests for create_alias
  # Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
  # Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
  # @param create_alias_options createAliasOptions
  # @param [Hash] opts the optional parameters
  # @return [AliasDto]
  describe "create_alias test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_alias
  # Delete an email alias
  # @param alias_id aliasId
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_alias test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_alias
  # Get an email alias
  # Get an email alias by ID
  # @param alias_id aliasId
  # @param [Hash] opts the optional parameters
  # @return [AliasDto]
  describe "get_alias test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_alias_emails
  # Get emails for an alias
  # Get paginated emails for an alias by ID
  # @param alias_id aliasId
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index alias email list pagination
  # @option opts [Int32] :size Optional page size alias email list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @return [PageEmailProjection]
  describe "get_alias_emails test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_alias_threads
  # Get threads created for an alias
  # Returns threads created for an email alias in paginated form
  # @param alias_id aliasId
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in thread list pagination
  # @option opts [Int32] :size Optional page size in thread list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @return [PageThreadProjection]
  describe "get_alias_threads test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_aliases
  # Get all email aliases you have created
  # Get all email aliases in paginated form
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in alias list pagination
  # @option opts [Int32] :size Optional page size in alias list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @return [PageAlias]
  describe "get_aliases test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for reply_to_alias_email
  # Reply to an email
  # Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
  # @param alias_id ID of the alias that email belongs to
  # @param email_id ID of the email that should be replied to
  # @param reply_to_alias_email_options replyToAliasEmailOptions
  # @param [Hash] opts the optional parameters
  # @return [SentEmailDto]
  describe "reply_to_alias_email test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for send_alias_email
  # Send an email from an alias inbox
  # Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
  # @param alias_id aliasId
  # @param [Hash] opts the optional parameters
  # @option opts [SendEmailOptions] :send_email_options Options for the email to be sent
  # @return [SentEmailDto]
  describe "send_alias_email test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_alias
  # Update an email alias
  # @param alias_id aliasId
  # @param update_alias_options updateAliasOptions
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "update_alias test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
