# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::ConnectorControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "ConnectorControllerApi" do
  describe "test an instance of ConnectorControllerApi" do
    it "should create an instance of ConnectorControllerApi" do
      api_instance = ::ConnectorControllerApi.new
      # TODO expect(api_instance).to be_instance_of(::ConnectorControllerApi)
    end
  end

  # unit tests for create_connector
  # Create an inbox connector
  # Sync emails between external mailboxes and MailSlurp inboxes
  # @param create_connector_options 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Optional inbox ID to associate with the connector
  # @return [ConnectorDto]
  describe "create_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_connector_imap_connection
  # Create an inbox connector IMAP connection
  # Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
  # @param id 
  # @param create_connector_imap_connection_options 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorImapConnectionDto]
  describe "create_connector_imap_connection test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_connector_smtp_connection
  # Create an inbox connector SMTP connection
  # Allows sending via connector and email is routed to connected inbox and sent via SMTP
  # @param id 
  # @param create_connector_smtp_connection_options 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorSmtpConnectionDto]
  describe "create_connector_smtp_connection test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_connector_sync_settings
  # Create an inbox connector sync settings
  # Configure automatic pull or emails from external inboxes using an interval or schedule
  # @param id 
  # @param create_connector_sync_settings_options 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorSyncSettingsDto]
  describe "create_connector_sync_settings test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_connector_with_options
  # Create an inbox connector with options
  # Sync emails between external mailboxes and MailSlurp inboxes
  # @param create_connector_with_options 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Optional inbox ID to associate with the connector
  # @return [ConnectorDto]
  describe "create_connector_with_options test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_all_connector
  # Delete all inbox connectors
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_all_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_connector
  # Delete an inbox connector
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_connector_imap_connection
  # Delete an inbox connector IMAP connection
  # Delete IMAP connection for external inbox
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_connector_imap_connection test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_connector_smtp_connection
  # Delete an inbox connector SMTP connection
  # Delete SMTP connection for external inbox
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_connector_smtp_connection test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_connector_sync_settings
  # Create an inbox connector sync settings
  # Configure automatic pull or emails from external inboxes using an interval or schedule
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_connector_sync_settings test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_all_connector_events
  # Get all inbox connector events
  # @param [Hash] opts the optional parameters
  # @option opts [String] :id Optional connector ID
  # @option opts [Int32] :page Optional page index in connector list pagination
  # @option opts [Int32] :size Optional page size in connector list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @option opts [String] :event_type Filter by event type
  # @return [PageConnectorEvents]
  describe "get_all_connector_events test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector
  # Get an inbox connector
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorDto]
  describe "get_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector_by_email_address
  # Get connector by email address
  # Find an inbox connector by email address
  # @param email_address Email address to search for connector by
  # @param [Hash] opts the optional parameters
  # @return [OptionalConnectorDto]
  describe "get_connector_by_email_address test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector_by_inbox_id
  # Get connector by inbox ID
  # Find an inbox connector by inbox ID
  # @param inbox_id Inbox ID to search for connector by
  # @param [Hash] opts the optional parameters
  # @return [OptionalConnectorDto]
  describe "get_connector_by_inbox_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector_by_name
  # Get connector by name
  # Find an inbox connector by name
  # @param name Name to search for connector by
  # @param [Hash] opts the optional parameters
  # @return [OptionalConnectorDto]
  describe "get_connector_by_name test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector_event
  # Get an inbox connector event
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorEventDto]
  describe "get_connector_event test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector_events
  # Get an inbox connector events
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in connector list pagination
  # @option opts [Int32] :size Optional page size in connector list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @option opts [String] :event_type Filter by event type
  # @return [PageConnectorEvents]
  describe "get_connector_events test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector_imap_connection
  # Get an inbox connector IMAP connection
  # Get IMAP connection for external inbox
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [OptionalConnectorImapConnectionDto]
  describe "get_connector_imap_connection test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector_provider_settings
  # Get SMTP and IMAP connection settings for common mail providers
  # Get common mail provider SMTP and IMAP connection settings
  # @param [Hash] opts the optional parameters
  # @return [ConnectorProviderSettingsDto]
  describe "get_connector_provider_settings test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector_smtp_connection
  # Get an inbox connector SMTP connection
  # Get SMTP connection for external inbox
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [OptionalConnectorSmtpConnectionDto]
  describe "get_connector_smtp_connection test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector_sync_settings
  # Get an inbox connector sync settings
  # Get sync settings for connection with external inbox
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [OptionalConnectorSyncSettingsDto]
  describe "get_connector_sync_settings test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connectors
  # Get inbox connectors
  # List inbox connectors that sync external emails to MailSlurp inboxes
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in connector list pagination
  # @option opts [Int32] :size Optional page size in connector list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [PageConnector]
  describe "get_connectors test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for send_email_from_connector
  # Send from an inbox connector
  # @param id 
  # @param send_email_options 
  # @param [Hash] opts the optional parameters
  # @option opts [Bool] :use_fallback 
  # @return [SentEmailDto]
  describe "send_email_from_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for sync_connector
  # Sync an inbox connector
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :since Date to request emails since
  # @option opts [String] :folder Which folder to sync emails with
  # @option opts [Bool] :logging Enable or disable logging for the sync operation
  # @return [ConnectorSyncRequestResult]
  describe "sync_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for test_connector_imap_connection
  # Test an inbox connector IMAP connection
  # Test the IMAP connection for a connector
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [CreateConnectorImapConnectionOptions] :create_connector_imap_connection_options 
  # @return [ConnectorImapConnectionTestResult]
  describe "test_connector_imap_connection test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for test_connector_imap_connection_options
  # Test an inbox connector IMAP connection options
  # Test the IMAP connection options for a connector
  # @param create_connector_imap_connection_options 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorImapConnectionTestResult]
  describe "test_connector_imap_connection_options test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for test_connector_smtp_connection
  # Test an inbox connector SMTP connection
  # Test the SMTP connection for a connector
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [CreateConnectorSmtpConnectionOptions] :create_connector_smtp_connection_options 
  # @return [ConnectorSmtpConnectionTestResult]
  describe "test_connector_smtp_connection test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for test_connector_smtp_connection_options
  # Test an inbox connector SMTP connection options
  # Test the SMTP connection options for a connector
  # @param create_connector_smtp_connection_options 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorSmtpConnectionTestResult]
  describe "test_connector_smtp_connection_options test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_connector
  # Update an inbox connector
  # @param id 
  # @param create_connector_options 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorDto]
  describe "update_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_connector_imap_connection
  # Update an inbox connector IMAP connection
  # Update IMAP connection for external inbox
  # @param id 
  # @param create_connector_imap_connection_options 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorImapConnectionDto]
  describe "update_connector_imap_connection test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_connector_smtp_connection
  # Update an inbox connector SMTP connection
  # Update SMTP connection for external inbox
  # @param id 
  # @param create_connector_smtp_connection_options 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorSmtpConnectionDto]
  describe "update_connector_smtp_connection test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
