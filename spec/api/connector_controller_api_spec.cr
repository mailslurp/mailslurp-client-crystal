# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::ConnectorControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "ConnectorControllerApi" do
  describe "test an instance of ConnectorControllerApi" do
    it "should create an instance of ConnectorControllerApi" do
      api_instance = ::ConnectorControllerApi.new
      # TODO expect(api_instance).to be_instance_of(::ConnectorControllerApi)
    end
  end

  # unit tests for create_connector
  # Create an inbox connector
  # Sync emails between external mailboxes and MailSlurp inboxes
  # @param create_connector_options 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorDto]
  describe "create_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_all_connector
  # Delete all inbox connectors
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_all_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_connector
  # Delete an inbox connector
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_all_connector_sync_events
  # Get all inbox connector sync events
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in connector list pagination
  # @option opts [Int32] :size Optional page size in connector list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [PageConnectorSyncEvents]
  describe "get_all_connector_sync_events test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector
  # Get an inbox connector
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorDto]
  describe "get_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector_sync_event
  # Get an inbox connector sync event
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorSyncEventDto]
  describe "get_connector_sync_event test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connector_sync_events
  # Get an inbox connector sync events
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in connector list pagination
  # @option opts [Int32] :size Optional page size in connector list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [PageConnectorSyncEvents]
  describe "get_connector_sync_events test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_connectors
  # Get inbox connectors
  # List inbox connectors that sync external emails to MailSlurp inboxes
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in connector list pagination
  # @option opts [Int32] :size Optional page size in connector list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [PageConnector]
  describe "get_connectors test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for sync_connector
  # Sync an inbox connector
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorSyncRequestResult]
  describe "sync_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_connector
  # Update an inbox connector
  # @param id 
  # @param create_connector_options 
  # @param [Hash] opts the optional parameters
  # @return [ConnectorDto]
  describe "update_connector test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
