# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::InboxControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "InboxControllerApi" do
  describe "test an instance of InboxControllerApi" do
    it "should create an instance of InboxControllerApi" do
      api_instance = ::InboxControllerApi.new
      # TODO expect(api_instance).to be_instance_of(::InboxControllerApi)
    end
  end

  # unit tests for create_inbox
  # Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either &#x60;SMTP&#x60; or &#x60;HTTP&#x60; inboxes.
  # Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :a_custom_email_address_to_use_with_the_inbox__defaults_to_null__when_null_mail_slurp_will_assign_a_random_email_address_to_the_inbox_such_as_123mailslurp_com__if_you_use_the_use_domain_pool_option_when_the_email_address_is_null_it_will_generate_an_email_address_with_a_more_varied_domain_ending_such_as_123mailslurp_info_or_123mailslurp_biz__when_a_custom_email_address_is_provided_the_address_is_split_into_a_domain_and_the_domain_is_queried_against_your_user__if_you_have_created_the_domain_in_the_mail_slurp_dashboard_and_verified_it_you_can_use_any_email_address_that_ends_with_the_domain__note_domain_types_must_match_the_inbox_type___so_smtp_inboxes_will_only_work_with_smtp_type_domains__avoid_smtp_inboxes_if_you_need_to_send_emails_as_they_can_only_receive__send_an_email_to_this_address_and_the_inbox_will_receive_and_store_it_for_you__to_retrieve_the_email_use_the_inbox_and_email_controller_endpoints_with_the_inbox_id_ 
  # @option opts [Array(String)] :tags_that_inbox_has_been_tagged_with__tags_can_be_added_to_inboxes_to_group_different_inboxes_within_an_account__you_can_also_search_for_inboxes_by_tag_in_the_dashboard_ui_ 
  # @option opts [String] :optional_name_of_the_inbox__displayed_in_the_dashboard_for_easier_search_and_used_as_the_sender_name_when_sending_emails_ 
  # @option opts [String] :optional_description_of_the_inbox_for_labelling_purposes__is_shown_in_the_dashboard_and_can_be_used_with 
  # @option opts [Bool] :use_the_mail_slurp_domain_name_pool_with_this_inbox_when_creating_the_email_address__defaults_to_null__if_enabled_the_inbox_will_be_an_email_address_with_a_domain_randomly_chosen_from_a_list_of_the_mail_slurp_domains__this_is_useful_when_the_default_mailslurp_com_email_addresses_used_with_inboxes_are_blocked_or_considered_spam_by_a_provider_or_receiving_service__when_domain_pool_is_enabled_an_email_address_will_be_generated_ending_in_mailslurp_worldinfoxyz______this_means_a_tld_is_randomly_selecting_from_a_list_of__biz__info__xyz_etc_to_add_variance_to_the_generated_email_addresses__when_null_or_false_mail_slurp_uses_the_default_behavior_of_mailslurp_com_or_custom_email_address_provided_by_the_email_address_field__note_this_feature_is_only_available_for_http_inbox_types_ 
  # @option opts [Bool] :is_the_inbox_a_favorite__marking_an_inbox_as_a_favorite_is_typically_done_in_the_dashboard_for_quick_access_or_filtering 
  # @option opts [Time] :optional_inbox_expiration_date__if_null_then_this_inbox_is_permanent_and_the_emails_in_it_wont_be_deleted__if_an_expiration_date_is_provided_or_is_required_by_your_plan_the_inbox_will_be_closed_when_the_expiration_time_is_reached__expired_inboxes_still_contain_their_emails_but_can_no_longer_send_or_receive_emails__an_expired_inbox_record_is_created_when_an_inbox_and_the_email_address_and_inbox_id_are_recorded__the_expires_at_property_is_a_timestamp_string_in_iso_date_time_format_yyyy_mm_dd_th_hmmss_sssxxx_ 
  # @option opts [Int64] :number_of_milliseconds_that_inbox_should_exist_for 
  # @option opts [Bool] :deprecated__team_access_is_always_true__grant_team_access_to_this_inbox_and_the_emails_that_belong_to_it_for_team_members_of_your_organization_ 
  # @option opts [String] :http__default_or_smtp_inbox_type__http_inboxes_are_default_and_best_solution_for_most_cases__smtp_inboxes_are_more_reliable_for_public_inbound_email_consumption__but_do_not_support_sending_emails__when_using_custom_domains_the_domain_type_must_match_the_inbox_type__http_inboxes_are_processed_by_aws_ses_while_smtp_inboxes_use_a_custom_mail_server_running_at_mx_mailslurp_com_ 
  # @return [InboxDto]
  describe "create_inbox test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_inbox_ruleset
  # Create an inbox ruleset
  # Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
  # @param inbox_id 
  # @param create_inbox_ruleset_options 
  # @param [Hash] opts the optional parameters
  # @return [InboxRulesetDto]
  describe "create_inbox_ruleset test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_inbox_with_defaults
  # Create an inbox with default options. Uses MailSlurp domain pool address and is private.
  # @param [Hash] opts the optional parameters
  # @return [InboxDto]
  describe "create_inbox_with_defaults test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_inbox_with_options
  # Create an inbox with options. Extended options for inbox creation.
  # Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
  # @param create_inbox_dto 
  # @param [Hash] opts the optional parameters
  # @return [InboxDto]
  describe "create_inbox_with_options test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_all_inboxes
  # Delete all inboxes
  # Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_all_inboxes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_inbox
  # Delete inbox
  # Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
  # @param inbox_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_inbox test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for does_inbox_exist
  # Does inbox exist
  # Check if inboxes exist by email address. Useful if you are sending emails to mailslurp addresses
  # @param email_address Email address
  # @param [Hash] opts the optional parameters
  # @return [InboxExistsDto]
  describe "does_inbox_exist test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for flush_expired
  # Remove expired inboxes
  # Remove any expired inboxes for your account (instead of waiting for scheduled removal on server)
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :before Optional expired at before flag to flush expired inboxes that have expired before the given time
  # @return [FlushExpiredInboxesResult]
  describe "flush_expired test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_all_inboxes
  # List All Inboxes Paginated
  # List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in list pagination
  # @option opts [Int32] :size Optional page size in list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Bool] :favourite Optionally filter results for favourites only
  # @option opts [String] :search Optionally filter by search words partial matching ID, tags, name, and email address
  # @option opts [String] :tag Optionally filter by tags. Will return inboxes that include given tags
  # @option opts [Bool] :deprecated__optionally_filter_by_team_access_ 
  # @option opts [Time] :since Optional filter by created after given date time
  # @option opts [Time] :before Optional filter by created before given date time
  # @return [PageInboxProjection]
  describe "get_all_inboxes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_emails
  # Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
  # List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
  # @param id_of_inbox_that_emails_belongs_to 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :alias_for_limit__assessed_first_before_assessing_any_passed_limit_ 
  # @option opts [Int32] :limit Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller
  # @option opts [String] :sort_the_results_by_received_date_and_direction_asc_or_desc 
  # @option opts [Int64] :retry_timeout Maximum milliseconds to spend retrying inbox database until minCount emails are returned
  # @option opts [Int64] :delay_timeout 
  # @option opts [Int64] :min_count Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached.
  # @option opts [Bool] :unread_only 
  # @option opts [Time] :exclude_emails_received_after_this_iso_8601_date_time 
  # @option opts [Time] :exclude_emails_received_before_this_iso_8601_date_time 
  # @return [Array(EmailPreview)]
  describe "get_emails test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_inbox
  # Get Inbox. Returns properties of an inbox.
  # Returns an inbox&#39;s properties, including its email address and ID.
  # @param inbox_id 
  # @param [Hash] opts the optional parameters
  # @return [InboxDto]
  describe "get_inbox test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_inbox_count
  # Get total inbox count
  # @param [Hash] opts the optional parameters
  # @return [CountDto]
  describe "get_inbox_count test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_inbox_email_count
  # Get email count in inbox
  # @param id_of_inbox_that_emails_belongs_to 
  # @param [Hash] opts the optional parameters
  # @return [CountDto]
  describe "get_inbox_email_count test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_inbox_emails_paginated
  # Get inbox emails paginated
  # Get a paginated list of emails in an inbox. Does not hold connections open.
  # @param id_of_inbox_that_emails_belongs_to 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in inbox emails list pagination
  # @option opts [Int32] :size Optional page size in inbox emails list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Optional filter by received after given date time
  # @option opts [Time] :before Optional filter by received before given date time
  # @return [PageEmailPreview]
  describe "get_inbox_emails_paginated test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_inbox_sent_emails
  # Get Inbox Sent Emails
  # Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
  # @param inbox_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in inbox sent email list pagination
  # @option opts [Int32] :optional_page_size_in_inbox_sent_email_list_pagination 
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional sent email search
  # @option opts [Time] :since Optional filter by sent after given date time
  # @option opts [Time] :before Optional filter by sent before given date time
  # @return [PageSentEmailProjection]
  describe "get_inbox_sent_emails test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_inbox_tags
  # Get inbox tags
  # Get all inbox tags
  # @param [Hash] opts the optional parameters
  # @return [Set(String)]
  describe "get_inbox_tags test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_inboxes
  # List Inboxes and email addresses
  # List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended and allows paginated access using a limit and sort parameter.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :size Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries.
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Optional filter by created after given date time
  # @option opts [Time] :before Optional filter by created before given date time
  # @return [Array(InboxDto)]
  describe "get_inboxes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_organization_inboxes
  # List Organization Inboxes Paginated
  # List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in list pagination
  # @option opts [Int32] :size Optional page size in list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Optional filter by created after given date time
  # @option opts [Time] :before Optional filter by created before given date time
  # @return [PageOrganizationInboxProjection]
  describe "get_organization_inboxes test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for list_inbox_rulesets
  # List inbox rulesets
  # List all rulesets attached to an inbox
  # @param inbox_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in inbox ruleset list pagination
  # @option opts [Int32] :size Optional page size in inbox ruleset list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Optional filter by created after given date time
  # @option opts [Time] :before Optional filter by created before given date time
  # @return [PageInboxRulesetDto]
  describe "list_inbox_rulesets test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for list_inbox_tracking_pixels
  # List inbox tracking pixels
  # List all tracking pixels sent from an inbox
  # @param inbox_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in inbox tracking pixel list pagination
  # @option opts [Int32] :optional_page_size_in_inbox_tracking_pixel_list_pagination 
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Optional filter by created after given date time
  # @option opts [Time] :before Optional filter by created before given date time
  # @return [PageTrackingPixelProjection]
  describe "list_inbox_tracking_pixels test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for send_email
  # Send Email
  # Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
  # @param id_of_the_inbox_you_want_to_send_the_email_from 
  # @param send_email_options 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "send_email test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for send_email_and_confirm
  # Send email and return sent confirmation
  # Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
  # @param id_of_the_inbox_you_want_to_send_the_email_from 
  # @param send_email_options 
  # @param [Hash] opts the optional parameters
  # @return [SentEmailDto]
  describe "send_email_and_confirm test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for send_test_email
  # Send a test email to inbox
  # Send an inbox a test email to test email receiving is working
  # @param inbox_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "send_test_email test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for set_inbox_favourited
  # Set inbox favourited state
  # Set and return new favourite state for an inbox
  # @param inbox_id 
  # @param set_inbox_favourited_options 
  # @param [Hash] opts the optional parameters
  # @return [InboxDto]
  describe "set_inbox_favourited test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_inbox
  # Update Inbox. Change name and description. Email address is not editable.
  # Update editable fields on an inbox
  # @param inbox_id 
  # @param update_inbox_options 
  # @param [Hash] opts the optional parameters
  # @return [InboxDto]
  describe "update_inbox test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
