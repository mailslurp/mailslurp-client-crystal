# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::MFAControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "MFAControllerApi" do
  describe "test an instance of MFAControllerApi" do
    it "should create an instance of MFAControllerApi" do
      api_instance = ::MFAControllerApi.new
      # TODO expect(api_instance).to be_instance_of(::MFAControllerApi)
    end
  end

  # unit tests for create_totp_device_for_custom
  # Create a TOTP device from custom options
  # Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
  # @param create_totp_device_otp_auth_url_options 
  # @param [Hash] opts the optional parameters
  # @return [TotpDeviceDto]
  describe "create_totp_device_for_custom test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_totp_device_for_otp_auth_url
  # Create a TOTP device from an OTP Auth URL
  # Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
  # @param create_totp_device_otp_auth_url_options 
  # @param [Hash] opts the optional parameters
  # @return [TotpDeviceDto]
  describe "create_totp_device_for_otp_auth_url test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_totp_device
  # Get a TOTP device by ID
  # Get Time-Based One-Time Password (TOTP) device by its ID.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [TotpDeviceDto]
  describe "get_totp_device test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_totp_device_by
  # Get a TOTP device by username, issuer, or name. Returns empty if not found.
  # Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :name Optional name filter
  # @option opts [String] :issuer Optional issuer filter
  # @option opts [String] :username Optional username filter
  # @return [TotpDeviceOptionalDto]
  describe "get_totp_device_by test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_totp_device_code
  # Get a TOTP device code by device ID
  # Get Time-Based One-Time Password for a device by its ID.
  # @param id ID of the TOTP device to get the code for
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :at Optional time to get code for. If not provided, current time is used.
  # @option opts [Int32] :min_seconds_until_expire Optional minimum time until code expires. Will hold thread open until period reached.
  # @return [TotpDeviceCodeDto]
  describe "get_totp_device_code test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
