# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::SmsControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "SmsControllerApi" do
  describe "test an instance of SmsControllerApi" do
    it "should create an instance of SmsControllerApi" do
      api_instance = ::SmsControllerApi.new
      # TODO expect(api_instance).to be_instance_of(::SmsControllerApi)
    end
  end

  # unit tests for delete_sent_sms_message
  # Delete sent SMS message.
  # Delete a sent SMS message
  # @param sent_sms_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_sent_sms_message test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_sent_sms_messages
  # Delete all sent SMS messages
  # Delete all sent SMS messages or all messages for a given phone number
  # @param [Hash] opts the optional parameters
  # @option opts [String] :phone_number_id 
  # @return [nil]
  describe "delete_sent_sms_messages test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_sms_message
  # Delete SMS message.
  # Delete an SMS message
  # @param sms_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_sms_message test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_sms_messages
  # Delete all SMS messages
  # Delete all SMS messages or all messages for a given phone number
  # @param [Hash] opts the optional parameters
  # @option opts [String] :phone_number_id 
  # @return [nil]
  describe "delete_sms_messages test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_all_sms_messages
  # @param [Hash] opts the optional parameters
  # @option opts [String] :phone_number Optional receiving phone number to filter SMS messages for
  # @option opts [Int32] :page Optional page index in SMS list pagination
  # @option opts [Int32] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Optional filter SMSs received after given date time
  # @option opts [Time] :before Optional filter SMSs received before given date time
  # @option opts [String] :search Optional search filter
  # @option opts [Bool] :favourite Optionally filter results for favourites only
  # @option opts [Array(String)] :_include Optional list of IDs to include in result
  # @return [PageSmsProjection]
  describe "get_all_sms_messages test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_reply_for_sms_message
  # Get reply for an SMS message
  # Get reply for an SMS message.
  # @param sms_id 
  # @param [Hash] opts the optional parameters
  # @return [ReplyForSms]
  describe "get_reply_for_sms_message test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_sms_count
  # Get sent SMS count
  # Get number of sent SMS
  # @param [Hash] opts the optional parameters
  # @return [CountDto]
  describe "get_sent_sms_count test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_sms_message
  # Get sent SMS content including body. Expects sent SMS to exist by ID.
  # Returns an SMS summary object with content.
  # @param sent_sms_id 
  # @param [Hash] opts the optional parameters
  # @return [SentSmsDto]
  describe "get_sent_sms_message test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_sms_messages_paginated
  # Get all SMS messages in all phone numbers in paginated form. .
  # By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
  # @param [Hash] opts the optional parameters
  # @option opts [String] :phone_number Optional phone number to filter sent SMS messages for
  # @option opts [Int32] :page Optional page index in SMS list pagination
  # @option opts [Int32] :size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Optional filter SMSs received after given date time
  # @option opts [Time] :before Optional filter SMSs received before given date time
  # @option opts [String] :search Optional search filter
  # @return [PageSentSmsProjection]
  describe "get_sent_sms_messages_paginated test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sms_count
  # Get SMS count
  # Get number of SMS
  # @param [Hash] opts the optional parameters
  # @return [CountDto]
  describe "get_sms_count test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sms_message
  # Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController.
  # Returns a SMS summary object with content.
  # @param sms_id 
  # @param [Hash] opts the optional parameters
  # @return [SmsDto]
  describe "get_sms_message test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_unread_sms_count
  # Get unread SMS count
  # Get number of SMS unread. Unread means has not been viewed in dashboard or returned in an email API response
  # @param [Hash] opts the optional parameters
  # @return [UnreadCount]
  describe "get_unread_sms_count test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for reply_to_sms_message
  # Send a reply to a received SMS message. Replies are sent from the receiving number.
  # Reply to an SMS message.
  # @param sms_id 
  # @param sms_reply_options 
  # @param [Hash] opts the optional parameters
  # @return [SentSmsDto]
  describe "reply_to_sms_message test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for send_sms
  # @param sms_send_options 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :from_phone_number Phone number to send from in E.164 format
  # @option opts [String] :from_phone_id Phone number ID to send from in UUID form
  # @return [SentSmsDto]
  describe "send_sms test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for set_sms_favourited
  # @param sms_id ID of SMS to set favourite state
  # @param favourited 
  # @param [Hash] opts the optional parameters
  # @return [SmsDto]
  describe "set_sms_favourited test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
