# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::WebhookControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "WebhookControllerApi" do
  describe "test an instance of WebhookControllerApi" do
    it "should create an instance of WebhookControllerApi" do
      api_instance = ::WebhookControllerApi.new
      # TODO expect(api_instance).to be_instance_of(::WebhookControllerApi)
    end
  end

  # unit tests for create_account_webhook
  # Attach a WebHook URL to an inbox
  # Get notified of account level events such as bounce and bounce recipient.
  # @param create_webhook_options 
  # @param [Hash] opts the optional parameters
  # @return [WebhookDto]
  describe "create_account_webhook test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_webhook
  # Attach a WebHook URL to an inbox
  # Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
  # @param inbox_id 
  # @param create_webhook_options 
  # @param [Hash] opts the optional parameters
  # @return [WebhookDto]
  describe "create_webhook test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for create_webhook_for_phone_number
  # Attach a WebHook URL to a phone number
  # Get notified whenever a phone number receives an SMS via a WebHook URL.
  # @param phone_number_id 
  # @param create_webhook_options 
  # @param [Hash] opts the optional parameters
  # @return [WebhookDto]
  describe "create_webhook_for_phone_number test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_all_webhooks
  # Delete all webhooks
  # @param [Hash] opts the optional parameters
  # @option opts [Time] :before before
  # @return [nil]
  describe "delete_all_webhooks test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_webhook
  # Delete and disable a Webhook for an Inbox
  # @param inbox_id 
  # @param webhook_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_webhook test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_webhook_by_id
  # Delete a webhook
  # @param webhook_id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_webhook_by_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_all_account_webhooks
  # List account webhooks Paginated
  # List account webhooks in paginated form. Allows for page index, page size, and sort direction.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in list pagination
  # @option opts [Int32] :size Optional page size for paginated result list.
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @option opts [String] :event_type Optional event type
  # @option opts [String] :health Filter by webhook health
  # @option opts [String] :search_filter Optional search filter
  # @return [PageWebhookProjection]
  describe "get_all_account_webhooks test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_all_webhook_endpoints
  # List Webhooks endpoints Paginated
  # List webhooks URL in paginated form. Allows for page index, page size, and sort direction.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in list pagination
  # @option opts [Int32] :size Optional page size for paginated result list.
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [String] :inbox_id Filter by inboxId
  # @option opts [String] :phone_id Filter by phoneId
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @option opts [String] :health Filter by webhook health
  # @option opts [String] :event_type Optional event type
  # @return [PageWebhookEndpointProjection]
  describe "get_all_webhook_endpoints test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_all_webhook_results
  # Get results for all webhooks
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in list pagination
  # @option opts [Int32] :size Optional page size in list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @option opts [Bool] :unseen_only Filter for unseen exceptions only
  # @option opts [String] :result_type Filter by result type
  # @option opts [String] :event_name Filter by event name
  # @option opts [Int32] :min_status_code Minimum response status
  # @option opts [Int32] :max_status_code Maximum response status
  # @option opts [String] :inbox_id Inbox ID
  # @option opts [String] :sms_id Sms ID
  # @option opts [String] :attachment_id Attachment ID
  # @option opts [String] :email_id Email ID
  # @option opts [String] :phone_id Phone ID
  # @return [PageWebhookResult]
  describe "get_all_webhook_results test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_all_webhooks
  # List Webhooks Paginated
  # List webhooks in paginated form. Allows for page index, page size, and sort direction.
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in list pagination
  # @option opts [Int32] :size Optional page size for paginated result list.
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [String] :inbox_id Filter by inboxId
  # @option opts [String] :phone_id Filter by phoneId
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @option opts [String] :health Filter by webhook health
  # @option opts [String] :event_type Optional event type
  # @option opts [String] :url Optional url endpoint filter
  # @return [PageWebhookProjection]
  describe "get_all_webhooks test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_inbox_webhooks_paginated
  # Get paginated webhooks for an Inbox
  # @param inbox_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in list pagination
  # @option opts [Int32] :size Optional page size in list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @option opts [String] :health Filter by webhook health
  # @option opts [String] :event_type Optional event type
  # @return [PageWebhookProjection]
  describe "get_inbox_webhooks_paginated test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_json_schema_for_webhook_event
  # Get JSON Schema definition for webhook payload by event
  # @param event 
  # @param [Hash] opts the optional parameters
  # @return [JSONSchemaDto]
  describe "get_json_schema_for_webhook_event test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_json_schema_for_webhook_payload
  # Get JSON Schema definition for webhook payload
  # @param webhook_id 
  # @param [Hash] opts the optional parameters
  # @return [JSONSchemaDto]
  describe "get_json_schema_for_webhook_payload test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_phone_number_webhooks_paginated
  # Get paginated webhooks for a phone number
  # @param phone_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in list pagination
  # @option opts [Int32] :size Optional page size in list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @option opts [String] :event_type Optional event type
  # @option opts [String] :search_filter Optional search filter
  # @option opts [String] :health Filter by webhook health
  # @return [PageWebhookProjection]
  describe "get_phone_number_webhooks_paginated test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_webhook_payload
  # Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :event_name 
  # @return [AbstractWebhookPayload]
  describe "get_test_webhook_payload test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_webhook_payload_bounce
  # Get webhook test payload for bounce
  # @param [Hash] opts the optional parameters
  # @return [WebhookBouncePayload]
  describe "get_test_webhook_payload_bounce test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_webhook_payload_bounce_recipient
  # Get webhook test payload for bounce recipient
  # @param [Hash] opts the optional parameters
  # @return [WebhookBounceRecipientPayload]
  describe "get_test_webhook_payload_bounce_recipient test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_webhook_payload_delivery_status
  # Get webhook test payload for delivery status event
  # @param [Hash] opts the optional parameters
  # @return [WebhookDeliveryStatusPayload]
  describe "get_test_webhook_payload_delivery_status test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_webhook_payload_email_opened
  # Get webhook test payload for email opened event
  # @param [Hash] opts the optional parameters
  # @return [WebhookEmailOpenedPayload]
  describe "get_test_webhook_payload_email_opened test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_webhook_payload_email_read
  # Get webhook test payload for email opened event
  # @param [Hash] opts the optional parameters
  # @return [WebhookEmailReadPayload]
  describe "get_test_webhook_payload_email_read test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_webhook_payload_for_webhook
  # Get example payload for webhook
  # @param webhook_id 
  # @param [Hash] opts the optional parameters
  # @return [AbstractWebhookPayload]
  describe "get_test_webhook_payload_for_webhook test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_webhook_payload_new_ai_transform_result
  # Get webhook test payload for new ai transform result event
  # @param [Hash] opts the optional parameters
  # @return [WebhookNewAITransformResultPayload]
  describe "get_test_webhook_payload_new_ai_transform_result test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_webhook_payload_new_attachment
  # Get webhook test payload for new attachment event
  # @param [Hash] opts the optional parameters
  # @return [WebhookNewAttachmentPayload]
  describe "get_test_webhook_payload_new_attachment test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_webhook_payload_new_contact
  # Get webhook test payload for new contact event
  # @param [Hash] opts the optional parameters
  # @return [WebhookNewContactPayload]
  describe "get_test_webhook_payload_new_contact test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_webhook_payload_new_email
  # Get webhook test payload for new email event
  # @param [Hash] opts the optional parameters
  # @return [WebhookNewEmailPayload]
  describe "get_test_webhook_payload_new_email test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_test_webhook_payload_new_sms
  # Get webhook test payload for new sms event
  # @param [Hash] opts the optional parameters
  # @return [WebhookNewSmsPayload]
  describe "get_test_webhook_payload_new_sms test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_webhook
  # Get a webhook
  # @param webhook_id 
  # @param [Hash] opts the optional parameters
  # @return [WebhookDto]
  describe "get_webhook test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_webhook_result
  # Get a webhook result for a webhook
  # @param webhook_result_id Webhook Result ID
  # @param [Hash] opts the optional parameters
  # @return [WebhookResultDto]
  describe "get_webhook_result test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_webhook_results
  # Get a webhook results for a webhook
  # @param webhook_id ID of webhook to get results for
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in list pagination
  # @option opts [Int32] :size Optional page size in list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @option opts [Bool] :unseen_only Filter for unseen exceptions only
  # @option opts [String] :result_type Filter by result type
  # @option opts [String] :event_name Filter by event name
  # @option opts [Int32] :min_status_code Minimum response status
  # @option opts [Int32] :max_status_code Maximum response status
  # @option opts [String] :inbox_id Inbox ID
  # @option opts [String] :sms_id Sms ID
  # @option opts [String] :attachment_id Attachment ID
  # @option opts [String] :email_id Email ID
  # @option opts [String] :phone_id Phone ID
  # @return [PageWebhookResult]
  describe "get_webhook_results test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_webhook_results_count
  # Get a webhook results count for a webhook
  # @param webhook_id ID of webhook to get results for
  # @param [Hash] opts the optional parameters
  # @return [CountDto]
  describe "get_webhook_results_count test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_webhook_results_unseen_error_count
  # Get count of unseen webhook results with error status
  # @param [Hash] opts the optional parameters
  # @return [UnseenErrorCountDto]
  describe "get_webhook_results_unseen_error_count test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_webhooks
  # Get all webhooks for an Inbox
  # @param inbox_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in list pagination
  # @option opts [Int32] :size Optional page size in list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @return [Array(WebhookProjection)]
  describe "get_webhooks test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for redrive_all_webhook_results
  # Redrive all webhook results that have failed status
  # Allows you to resend webhook payloads for any recorded webhook result that failed to deliver the payload.
  # @param [Hash] opts the optional parameters
  # @return [WebhookRedriveAllResult]
  describe "redrive_all_webhook_results test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for redrive_webhook_result
  # Get a webhook result and try to resend the original webhook payload
  # Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
  # @param webhook_result_id Webhook Result ID
  # @param [Hash] opts the optional parameters
  # @return [WebhookRedriveResult]
  describe "redrive_webhook_result test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for send_test_data
  # Send webhook test data
  # @param webhook_id 
  # @param [Hash] opts the optional parameters
  # @return [WebhookTestResult]
  describe "send_test_data test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_webhook
  # Update a webhook
  # @param webhook_id 
  # @param create_webhook_options 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id 
  # @option opts [String] :phone_number_id 
  # @option opts [Bool] :override_auth 
  # @return [WebhookDto]
  describe "update_webhook test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for update_webhook_headers
  # Update a webhook request headers
  # @param webhook_id 
  # @param webhook_headers 
  # @param [Hash] opts the optional parameters
  # @return [WebhookDto]
  describe "update_webhook_headers test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for verify_webhook_signature
  # Verify a webhook payload signature
  # Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
  # @param verify_webhook_signature_options 
  # @param [Hash] opts the optional parameters
  # @return [VerifyWebhookSignatureResults]
  describe "verify_webhook_signature test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for wait_for_webhook_results
  # Wait for webhook results for a webhook
  # @param webhook_id ID of webhook to get results for
  # @param expected_count Expected result count
  # @param timeout Max time to wait in milliseconds
  # @param [Hash] opts the optional parameters
  # @return [Array(WebhookResultDto)]
  describe "wait_for_webhook_results test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
