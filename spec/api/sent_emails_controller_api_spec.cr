# #MailSlurp API
#
##MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
#
#The version of the OpenAPI document: 6.5.2
#Contact: contact@mailslurp.dev
#Generated by: https://openapi-generator.tech
#OpenAPI Generator version: 5.1.1
#

require "../spec_helper"
require "json"
require "time"

# Unit tests for ::SentEmailsControllerApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe "SentEmailsControllerApi" do
  describe "test an instance of SentEmailsControllerApi" do
    it "should create an instance of SentEmailsControllerApi" do
      api_instance = ::SentEmailsControllerApi.new
      # TODO expect(api_instance).to be_instance_of(::SentEmailsControllerApi)
    end
  end

  # unit tests for delete_all_sent_emails
  # Delete all sent email receipts
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_all_sent_emails test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for delete_sent_email
  # Delete sent email receipt
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe "delete_sent_email test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_all_sent_tracking_pixels
  # Get all sent email tracking pixels in paginated form
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in sent email tracking pixel list pagination
  # @option opts [Int32] :size Optional page size in sent email tracking pixel list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [PageTrackingPixelProjection]
  describe "get_all_sent_tracking_pixels test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_raw_sent_email_contents
  # Get raw sent email string. Returns unparsed raw SMTP message with headers and body.
  # Returns a raw, unparsed, and unprocessed sent email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawSentEmailJson endpoint
  # @param email_id ID of email
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe "get_raw_sent_email_contents test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_raw_sent_email_json
  # Get raw sent email in JSON. Unparsed SMTP message in JSON wrapper format.
  # Returns a raw, unparsed, and unprocessed sent email wrapped in a JSON response object for easier handling when compared with the getRawSentEmail text/plain response
  # @param email_id ID of email
  # @param [Hash] opts the optional parameters
  # @return [RawEmailJson]
  describe "get_raw_sent_email_json test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_delivery_status
  # Get a sent email delivery status
  # @param delivery_id 
  # @param [Hash] opts the optional parameters
  # @return [DeliveryStatusDto]
  describe "get_sent_delivery_status test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_delivery_statuses
  # Get all sent email delivery statuses
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in delivery status list pagination
  # @option opts [Int32] :size Optional page size in delivery status list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [PageDeliveryStatus]
  describe "get_sent_delivery_statuses test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_delivery_statuses_by_sent_id
  # Get all sent email delivery statuses
  # @param sent_id ID of the sent email that you want to get the delivery status of. Sent email object is returned when sending an email
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in delivery status list pagination
  # @option opts [Int32] :size Optional page size in delivery status list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [PageDeliveryStatus]
  describe "get_sent_delivery_statuses_by_sent_id test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_email
  # Get sent email receipt
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [SentEmailDto]
  describe "get_sent_email test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_email_html_content
  # Get sent email HTML content
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe "get_sent_email_html_content test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_email_preview_urls
  # Get sent email URL for viewing in browser or downloading
  # Get a list of URLs for sent email content as text/html or raw SMTP message for viewing the message in a browser.
  # @param id 
  # @param [Hash] opts the optional parameters
  # @return [EmailPreviewUrls]
  describe "get_sent_email_preview_urls test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_email_tracking_pixels
  # Get all tracking pixels for a sent email in paginated form
  # @param id 
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in sent email tracking pixel list pagination
  # @option opts [Int32] :size Optional page size in sent email tracking pixel list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [PageTrackingPixelProjection]
  describe "get_sent_email_tracking_pixels test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_emails
  # Get all sent emails in paginated form
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Optional inboxId to filter sender of sent emails by
  # @option opts [Int32] :page Optional page index in inbox sent email list pagination
  # @option opts [Int32] :size Optional page size in inbox sent email list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [PageSentEmailProjection]
  describe "get_sent_emails test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_emails_with_queue_results
  # Get results of email sent with queues in paginated form
  # @param [Hash] opts the optional parameters
  # @option opts [Int32] :page Optional page index in inbox sent email list pagination
  # @option opts [Int32] :size Optional page size in inbox sent email list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [PageSentEmailWithQueueProjection]
  describe "get_sent_emails_with_queue_results test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for get_sent_organization_emails
  # Get all sent organization emails in paginated form
  # @param [Hash] opts the optional parameters
  # @option opts [String] :inbox_id Optional inboxId to filter sender of sent emails by
  # @option opts [Int32] :page Optional page index in sent email list pagination
  # @option opts [Int32] :size Optional page size in sent email list pagination
  # @option opts [String] :sort Optional createdAt sort direction ASC or DESC
  # @option opts [String] :search_filter Optional search filter
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [PageSentEmailProjection]
  describe "get_sent_organization_emails test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  # unit tests for wait_for_delivery_statuses
  # Wait for delivery statuses
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sent_id Optional sent email ID filter
  # @option opts [String] :inbox_id Optional inbox ID filter
  # @option opts [Int64] :timeout Optional timeout milliseconds
  # @option opts [Int32] :index Zero based index of the delivery status to wait for. If 1 delivery status already and you want to wait for the 2nd pass index&#x3D;1
  # @option opts [Time] :since Filter by created at after the given timestamp
  # @option opts [Time] :before Filter by created at before the given timestamp
  # @return [DeliveryStatusDto]
  describe "wait_for_delivery_statuses test" do
    it "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
